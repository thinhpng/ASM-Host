/*/////////////////////////////////////////////
*   File: IdleRun.ssl        
*	Version: 2.0        
*	Date: Oct 04, 2018
*	Scripted by THINH P NGUYEN 
*//////////////////////////////////////////////
Global RPTID_SRC, ECID_SRC, CEID_SRC, VID_SRC, VIDVALS_SRC, DVID_SRC, LAST_TOOLTYPE, TOOLTYPE, INITIALIZE, INTROSTART;
Global RC1_READY, RC2_READY, RC3_READY, RC4_READY, TOOL_READY, RECORDID, REPORTIDB REPORTCeId, INTRO_COUNT, ASMLOT;
Global ACCESSMODE, CTRLREMOTE, CJID, PJID, PJIDS, LID, PID, CID, RECIPE, INTROTYPE, QUANTITY, SLOTS, RECIPES;
Global INTRO, INTROFILE, NumIntro, TOTALPORT, STPLIST, DEFAULTSLOTLIST, AMS_TYPE, SOFTREV, N2PURGE, PURGEMODE;
Global P1LOADED, P2LOADED, P3LOADED, P4LOADED, LP1_CID, LP2_CID, LP3_CID, LP4_CID, NUMSLOT, TRACEOBJ;
Global DUMMYPORT, S6F11WBIT, TARGET, DEVICEID, REQUEST, REPLY, SLOTMAPFAIL, INTROREADY, RPTVIDSINFO;
Global VIDS_DICT, CEIDS_DICT, RPTIDS_DICT, CJSMSCT_DICT, ONLINE, CJSMSCT_STRUCT, LPSTAT_STRUCT, CJSTATE_DICT;
Global PROCESSSTATE, CUSRPT, PM1, PM2, PM3, PM4, BIND, BIND_INFO, BIND_SENT, REPEAT, UPDATERECDIR;
Global CID1_DOCKED, CID2_DOCKED, CID3_DOCKED, CID4_DOCKED, PJQTY, PJRECIPE_DIR, PROCREC_DIR, SCRTREC_DIR;
Global CJSTART, CJCOMPLETE, HIGLCK, PUMPTO, STARTUP, S1F3VIDS;

STRUCTURE CJSTATE_STRUCT(stateID, stateName);
STRUCTURE LPSTAT(portid, carrierid, done);	
STRUCTURE CJSMSCT (cjid, pjids, carrierid, portid, state);	
STRUCTURE PJSMSCT (pjid, cjid, carrierid, portid, recipe, state);
STRUCTURE INTROOBJ (lotid, carrierid, portid, recipes, introtype, quantity, slots, pjids, cjid, state, inprocess, first, PWC, CJStart, pjCmd, CJstate);
STRUCTURE RECOBJ (folder, name, origfullname, hostfullname);
STRUCTURE S6F11_STRUCT (dataId, CeId, reportList);
STRUCTURE CEID_STRUCT (ceid, name, rptids);
STRUCTURE VID_STRUCT (vid, name, value, valnames);
STRUCTURE RPTID_STRUCT (rptid, rptname, vids, vidnames);

IdleRun (){
	local Msg, mS6F11List, mCEID;
	PJRECIPE_DIR = "C:\\ASM-Host\\PJRecipe";
	PROCREC_DIR = "C:\\ASM-Host\\ProcessRecipe";
	SCRTREC_DIR = "C:\\ASM-Host\\Script";
	RC1_READY = RC2_READY = RC3_READY = RC4_READY = TOOL_READY = CTRLREMOTE = AMS_TYPE = INTROSTART = INITIALIZE = 0;
	INTRO_COUNT = BIND = BIND_SENT = DUMMYPORT = SLOTMAPFAIL = ONLINE = INTROREADY = REPEAT = UPDATERECDIR = HIGLCK = PUMPTO = 0;
	CID1_DOCKED = CID2_DOCKED = CID3_DOCKED = CID4_DOCKED = N2PURGE = PURGEMODE = CUSRPT = CJSTART = CJCOMPLETE = STARTUP =  0;
	TOTALPORT = 4;
	PJQTY = DEVICEID = 1;
	PORT = -1;
	LPSTAT_STRUCT = NewStructured(LPSTAT);
	LPSTAT_DICT = NewDictionary(CJSMSCT.portid);
	CJSMSCT_STRUCT = NewStructured(CJSMSCT);
	CJSMSCT_DICT = NewDictionary(CJSMSCT.cjid);
	logn("Thinh -> Begins Idlerun");
	run(_RemovePJRecipes);
	run(_RemoveProcessRecipes);	
	
	while(PORT == -1){
		wait(NewTimer(2)); //sleep to wait until port is entered by user
	}

	logn("Selected PORT = ", PORT);
	Subscribe(TARGET);
	logn("*****************************************************");
	logn("****** PLEASE WAIT UNTIL TOOL IS ONLINE/REMOTE ******");
	logn("*****************************************************");	
	
	while (1){
		//logn("Thinh -> Idlerun's whileloop");
		Msg = NewMessageIn();
		Msg = wait(Msg);          
		//logn("Thinh - Idlerun - received S", Msg.Stream, "F", Msg.Function);
		switch(Msg.Stream){
			case 1 :
				switch (Msg.Function){
					case 1 :   //S1F11 - Are You Online?
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						SendReply(Msg, S2_L(S2_A("ASM-Host"), S2_A("2.0")));						
						break;						
					case 13 :   //S1F13 - Establish Comunication Request
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);		
						ParseS1F13(Msg);
						S1F14_Parser(Msg);						
						break;						
				}					
			case 6 :
				switch (Msg.Function){
					case 5 :   //S6F5 - Multi-blockDataSendInquire
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);		
						SendReply(Msg, S2_B(0));
						break;						
					case 11 :   //S6F11 - Event Report
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);	
						S6F12_Parser(Msg);					
						break;							
				}				
			case 7 :
				switch (Msg.Function){
					case 27 :   //S7F27 : Process Program Verification Send by Tool and Host Receives
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						S7F27_Parser(Msg); //Parse to see the status reported by Tool
						S7F28_Reply(Msg);
						break;						
					case 29 :   //S7F29 : Process Program Verification Inquire
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						S7F30_Parser(Msg);
						break;							
				}					
			case 9 : logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);	
				switch (Msg.Function){						
					case 1 :   //S9F1 : Unrecognized DeviceID
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("**************************************************************");
						logn("***** Tool Does not recognized DeviceID *****");
						logn("**************************************************************");
						break;					
					case 3 :   //S9F3 : Unrecognized Stream Type
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("**************************************************************");
						logn("***** Tool Does not recognized Stream Type *****");
						logn("**************************************************************");
						break;							
					case 5 :   //S9F5 : Unrecognized Function Type
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("**************************************************************");
						logn("***** Tool Does not recognized Function Type *****");
						logn("**************************************************************");
						break;		
					case 7 :   //S9F7 : Illegal Data
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("***************************************************************");
						logn("***** Tool can't support Illegal Secs cmd  Host just sent *****");
						logn("***************************************************************");
						break;
					case 9 :   //S9F9 : Transaction Timer Time-out
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("***************************************************************");
						logn("***** Tool noticed Transaction Timer Time-out *****");
						logn("***************************************************************");
						break;		
					case 11 :   //S9F11 : Data Too Long
						logn("Thinh - Idlerun - handles S", Msg.Stream, "F", Msg.Function);							
						logn("***************************************************************");
						logn("***** Tool can't handle Data Too Long *****");
						logn("***************************************************************");
						break;							
				}				
			default :
				if (Msg.function == 0){
					logn("Thinh - Idlerun - received but not handled. S", Msg.Stream, "F", Msg.Function);
					logn("***************************************************************");
					logn("***** Tool aborted transaction *****");
					logn("***************************************************************");
					break;
				}else if (Msg.function & 0x01){
					logn("Thinh - Idlerun - received but not handled. S", Msg.Stream, "F", Msg.Function);
					UnReceive();
				}				              
		}
	}

	logn("Thinh <- Idlerun");
	
	Unsubscribe();
}

public _TurnOFF_REPEAT(){
	REPEAT = 0;
}

public _TurnOFF_Tracing(){
	local mRequestData;
	if(S2F23TRACEOBJ){
		//S2F23_Request(S2_L());
		//S2F23_Request(88888, "00000050", 0, 1);
		//mRequestData = S2_L(S2_U4(88888), S2_A("00000050"), S2_U4(0), S2_U4(0), S2_L()); //Samsung
		mRequestData = S2_L(S2_U4(1), S2_A("000010"), S2_U4(0), S2_U4(0), S2_L()); //TDK-Headway
		S2F23_Request(mRequestData);
	}else{
		abort(TRACEOBJ);
	}	
}

public _TurnON_S1F3Tracing(){
	TRACEOBJ = run(S1F3Tracing) ;
}

public _TurnON_S2F23Tracing(){
	S2F23TRACEOBJ = run(S2F23Tracing) ;
}

S1F3Tracing(){
	local mSecsVidList;
	mSecsVidList = GetVIDsInFile();
	while(1){
		wait(NewTimer(1));	//sleep for 1 sec
		if(isEmptyList(mSecsVidList)){
			//wait(SendPrimary(TRACING_LIST, TARGET));
			//wait(SendPrimary(TRACING_LIST, TARGET));
			wait(SendPrimary(TRACING_LIST, TARGET));
		}else{
			logn("one");
			S1F3_Request(mSecsVidList);
			logn("two");
			S1F3_Request(mSecsVidList);
			logn("three");
			S1F3_Request(mSecsVidList);
		}
	}
}

S2F23Tracing(){
	local mSecsVidList, mRequestData;
	mSecsVidList = GetVIDsInFile();
	mRequestData = S2_L(S2_U4(1), S2_A("000010"), S2_U4(15000), S2_U4(1), S2_L(mSecsVidList)); //TDK-Headway
	//mRequestData = S2_L(S2_U4(88888), S2_A("00000050"), S2_U4(30000), S2_U4(1), S2_L(mSecsVidList)); //Samsung
	S2F23_Request(mRequestData);
	//S2_L(S2_U4(TRID), S2_A(DSPER), S2_U4(TOTSMP), S2_U4(REPGSZ), S2_L(VIDS));
	//S2F23_Request(88888, "00000050", 30000, 1, mSecsVidList); //Samsung's Tracing every 50 secs, 30000 total samples with 1 set of data
}

createEcidsConfigFile(){
	local i, mFStatus, mECIDs_Dict, mReply, mEcId, mEcName, mEcids, mLine;				
	mReply = S2F29_Request();
	mECIDs_Dict = S2F30_Parser(mReply);
	
	for (i = 0; i < GetCount(mECIDs_Dict); i = i + 1){
		mEcId = ToAscii(mECIDs_Dict[i].ecid);
		mEcName = mECIDs_Dict[i].ecname;
		if (mEcName == "")
			mEcName = "No Name ECID";
		
		mLine = CatString(mEcId, " ", mEcName, " NA\n");
		mEcids = CatString(mEcids, mLine);
	}
	
	mFStatus = FileWrite(ECID_SRC, mEcids);
	if (mFStatus){
		logn("Thinh - ", ECID_SRC, " was created!");
	}	
}

createVidsConfigFile(){
	local i, mFStatus, mReply, mVid, mName, mVids, mLine;				
	mReply = S1F11_Request();
	VIDS_DICT = S1F12_Parser(mReply);
	
	for (i = 0; i < GetCount(VIDS_DICT); i = i + 1){
		mVid = ToAscii(VIDS_DICT[i].vid);
		mName = VIDS_DICT[i].name;
		if (mName == "")
			mName = "No Name VID";
		
		mLine = CatString(mVid, " ", mName, " NA\n");
		mVids = CatString(mVids, mLine);
	}
	
	mFStatus = FileWrite(VID_SRC, mVids);
	if (mFStatus){
		logn("Thinh - ", VID_SRC, " was created!");
	}	
}

InitializeMecca(){
	local myMsg;
	logn("Thinh - InitializeMecca ...");
	S1_F17_RequestToolOnline();
	// if(UPDATERECDIR == 0){
		// _UpdateRecipeDirectories();
		// //UpdateProcessRecipeDir();
		// UPDATERECDIR = 1;
	// }
	
	wait(NewTimer(1));	//sleep for 1 sec
	S6_F23_PurgeSpooledData();
	wait(NewTimer(1));	//sleep for 1 sec
	S2_F43_TurnOffAllStreamSpooling();
	
	wait(NewTimer(1));	//sleep for 1 sec	
	S5_F3_EnableAllAlarms();	
	wait( NewTimer( 1 ) );	//sleep for 1 sec
	S2_F33_DeleteAllExistingReports();
	wait( NewTimer( 1 ) );	//sleep for 1 sec
	S2_F37_DisableAllEvents();
	wait( NewTimer( 1 ) );	//sleep for 1 sec
	wait(SendPrimary(Polygon_S2F33));	//Define to Reports
	wait( NewTimer( 1 ) );	//sleep for 1 sec
	wait(SendPrimary(Polygon_S2F35));	//Link Reports to Events
	wait( NewTimer( 1 ) );	//sleep for 1 sec
	wait(SendPrimary(Enable_All_Events));	//Enable All Available Events	
	// wait( NewTimer( 1 ) );	//sleep for 1 sec
	// wait(SendPrimary(Polygon_S2F37));	//Enable Specific Events	
	wait( NewTimer( 1 ) );	//sleep for 1 sec	
	
	S2F15_Request(NewList(	S2_L(S2_U4(300000029), S2_U4(0)), 
							S2_L(S2_U4(300000009), S2_U4(1)))); //Set Equipment Constants
							
	wait(NewTimer(1));	//sleep for 1 sec
	S2F15_Request(NewList(	S2_L(S2_U4(300000121), S2_BOOLEAN(1)), //BypassReadID 
							S2_L(S2_U4(300000122), S2_BOOLEAN(1)), //Port1BypassReadID
							S2_L(S2_U4(300000123), S2_BOOLEAN(1)))); //Port2BypassReadID
	wait(NewTimer(1));	//sleep for 1 sec
	
	ChangeModulesStateFromMaintToProd();	
	wait(NewTimer(1));	//sleep for 1 sec
	S3_F25_ChangeToInService_LP1();
	wait(NewTimer(1));	//sleep for 1 sec
	S3_F25_ChangeToInService_LP2();
	wait(NewTimer(1));	//sleep for 1 sec}

	LP1_CID = "1";
	LP2_CID = "2";
	LP3_CID = "3";
	LP4_CID = "4";	
		
	if(IsToolReady()){
		CTRLREMOTE = 1;
		if(UPDATERECDIR == 0){
			_UpdateRecipeDirectories();
			//UpdateProcessRecipeDir();
			UPDATERECDIR = 1;
			
			wait(SendPrimary(Mecca_DownloadRecipe));	//Download recipe "/SEQUENCE/pm1_10s"
			wait( NewTimer( 1 ) );	//sleep for 1 sec
			S7_F19_GetCurrentProcessPrograms();
			wait( NewTimer( 1 ) );	//sleep for 1 sec
			mS7F26_Reply = S7F25_Request("/SEQUENCE/pm1_10s");
			S7F26_Parser(mS7F26_Reply);				
		}
	
		Send_S3_F17_CarrierActionRequest("ProceedWithCarrier", LP1_CID, 1);
	}
}

SetupConfig(TOOLTYPE){	
	local i, mFStatus, mRunSetupVidObj, mRunSetupRptObj;
	logn("*****   SetupConfig: ", TOOLTYPE, " ****************************");

	// run(RemovePJRecipes);
	// run(RemoveProcessRecipes);
	
	if (INITIALIZE == 0){		
		ECID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\ECIDsFromHostLog.txt");
		
		if(TOOLTYPE == "Mecca"){
			RPTID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\ReportIds.txt");
			CEID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\Ceids.txt");
			VID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\VIDsAndVals.txt");
			DVID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\Dvids.txt");
			
			mFStatus = FindFile(VID_SRC,"", FF_FILETITLEONLY);
			if (IsEmptyList(mFStatus)){
				logn("Thinh - ", VID_SRC, " Currently does not exist!");
				mRunSetupVidObj = run(createVidsConfigFile) ;			
			}
			else{
				mRunSetupVidObj = run(SetupVidDictionary);
			}
			
			mRunSetupVidObj = run(SetupCeidDictionary);
			mFStatus = FindFile(ECID_SRC,"", FF_FILETITLEONLY);
			if (IsEmptyList(mFStatus)){
				logn("Thinh - ", ECID_SRC, " Currently does not exist!");
				//mRunSetupRptObj = run(createEcidsConfigFile) ;						
			}	
			
			mFStatus = FindFile(RPTID_SRC,"", FF_FILETITLEONLY);
			if (!IsEmptyList(mFStatus)){
				mRunSetupRptObj = run(SetupReportDictionary);				
			}
		}else{ //ALD or EPI or SYN			
			RPTID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\ConvertedEventXp.txt");
			if (!FindFile(RPTID_SRC,"", FF_FILETITLEONLY)){
				RPTID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\EventsAndReports.txt");
			}			
			VID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\VIDsFromEventXp.txt");	
//			VID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\VIDsOnly.txt");
			if (!FindFile(VID_SRC,"", FF_FILETITLEONLY)){
				VID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\VIDsFromHostLog.txt");
			}
			
			VIDVALS_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\VIDsAndVals.txt");
			
			run(SetupCJStateDict);
			mRunSetupVidObj = run(SetupVidDictionary);
			mRunSetupRptObj = run(SetupReportDictionary);
			
			if (CTRLREMOTE == 1){
				if(!LP1_CID && !LP2_CID && !LP3_CID && !LP4_CID){
					CarrierLocationInfo();
				}
				
				if(TOOLTYPE == "ALD"){
					SetPulsarHigLeakCheckTime(10);
					SetPulsarHIGLkChkPumpTime("10");
					SetPulsarPumpTimeOut("60");
				}				
				
				if(UPDATERECDIR == 0){
					_UpdateRecipeDirectories();
					_UpdateProcessRecipeDir();
					UPDATERECDIR = 1;
				}	

				if(AreChambersReady()){
					INITIALIZE = 1;
				}
			}			
		}
			
		logn("RPTID_SRC = ", RPTID_SRC);
		logn("VID_SRC = ", VID_SRC);
		logn("*****************************************************");
	
		INITIALIZE = 1;
		LAST_TOOLTYPE = TOOLTYPE;
	}
}

ParseS1F13(S1F13Msg){
	local mS1F13List, mRunObj, mIsYES;
	mS1F13List 	= Decode(S1F13Msg.Text);
	
	if(GetCount(mS1F13List) == 2){
		TOOLTYPE	= Smart_Decode(mS1F13List[0]);
		SOFTREV		= Smart_Decode(mS1F13List[1]);
		
		STARTUP == 1;
		
		if (TOOLTYPE == "AP8300" || TOOLTYPE == "AP9300")
			TOOLTYPE = "Mecca";
		else if(TOOLTYPE == "EagleX"){
			logn("SoftRev: ", AtoI(Substring(SOFTREV, 0, 4)));
			if (AtoI(Substring(SOFTREV, 0, 4)) > 300)
				TOOLTYPE = "EPI";
			else{
				TOOLTYPE = "ALD";				
				PM1 = "RC1";
				PM2 = "RC2";
				PM3 = "RC3";
				PM4 = "RC4";				
			}
		}else if(TOOLTYPE == "Synerg"){
				TOOLTYPE = "SYN";
				PM1 = "DCM1";
				PM2 = "DCM2";
				PM3 = "DCM3";
				PM4 = "DCM4";
				TOTALPORT = 6;
		} 	 		
		
		logn("*****    TOOLTYPE: ", TOOLTYPE, "    *****");
		logn("*****    SOFTREV : ", SOFTREV, "    *****");

		if(TOOLTYPE == "ALD" || TOOLTYPE == "EPI" || TOOLTYPE == "SYN" || TOOLTYPE == "Mecca"){
			mParas = NewList(TOOLTYPE);
			if (INITIALIZE == 0 && LAST_TOOLTYPE != TOOLTYPE){
				mRunObj = run(SetupConfig, mParas);				
			}
			
			if(GetCount(INTRO) < 1){
				run(Initialize_Intro, mParas);
			}	
			
			if(TOOLTYPE == "Mecca"){
				mRunObj = run(InitializeMecca, mParas);
			}				
		}
	}
	
	//logn("Completed ParseS1F13");
}
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// This function will be called to respond to a S2F17 that has arrived.
// Make sure to load this file into SECSIM Pro's memory after any SML files
// have been loaded, this will make sure that the S2F18 object is up to date.
////////////////////////////////////////////////////////////////////////////////////////////////////
// S2F18 (msg)
// {
	// local useful_time;

	// // remove first 2 bytes and last 2 bytes
	// useful_time = SubString(GetDateTime(), 2);
	// useful_time = SubString(useful_time, 0, GetCount(useful_time) - 2);

	// // Send the message
	// msg = SendReply(msg, <A useful_time>);
	// wait(msg);
// }


// It will construct each Vid Struct per VID_STRUCT definition
AddNewVidDef(vidInfo)
{
	local mVidStruct, mValNameList;
	// Structure VID_STRUCT (vid, name, value);
	mVidStruct 			= NewStructured(VID_STRUCT);
	mVidStruct.vid 		= vidInfo[0];		//String data for readable in debug
	mVidStruct.name 	= vidInfo[1];
	//mVidStruct.value 	= "NA";
	if(FindString(vidInfo[2], "=").Count > 0){
		mVidStruct.valnames = splitString(vidInfo[2], ",");
	}

	return(mVidStruct);
}

// It will construct each Ceid Struct per CEID_STRUCT definition
AddNewCeidDef(ceidInfo)
{
	local mCeidStruct;
	// Structure CEID_STRUCT (ceid, name);
	mCeidStruct 		= NewStructured(CEID_STRUCT);
	mCeidStruct.ceid 	= (ceidInfo[0])[0];	//String data for readable in debug
	mCeidStruct.name 	= (ceidInfo[1])[0];
	return(mCeidStruct);
}

// It will construct each reportId Struct per RPTID_STRUCT definition
AddNewRptIdDef(mReportIdInfo)
{
	local mReportIdStruct;
	// Structure RPTID_STRUCT (rptid, rptname, vids, vidnames, values);
	mReportIdStruct = NewStructured(RPTID_STRUCT);
	mReportIdStruct.rptid = (mReportIdInfo[0])[0]; //String data for readable in debug
	mReportIdStruct.rptname = (mReportIdInfo[1])[0];
	mReportIdStruct.vids = mReportIdInfo[2];
	mReportIdStruct.vidnames = mReportIdInfo[3];
	//mReportIdStruct.values = mReportIdInfo[4];
	return(mReportIdStruct);
}
// It constructs VID dictionary to be used later once Host parsing the reports published by Tool
// STRUCTURE VID_STRUCT (vid, name, value, valnames);
SetupVidDictionary(){
	local i, mFStatus, mLines, VIDStruct, foundVIDStruct, VID_Db_Src, VIDInfo;	
	logn("Thinh - SetupVidDictionary from <", _GetLeaf(VID_SRC), ">");	

	if(TOOLTYPE == "Mecca"){
		mLines = GetLines(VID_SRC);
		// Make a Dictionary with a vid as a key.
		VIDS_DICT = NewDictionary(VID_STRUCT.vid);
		for (i = 0; i < GetCount(mLines); i = i + 1){
			VIDVALSInfo = splitString(mLines[i], " ");
			DictionaryInsert (AddNewVidDef(VIDVALSInfo), VIDS_DICT);
		}
		// Additional DVIDs if available	
		mFileStatus = FindFile(DVID_SRC,"", FF_FILETITLEONLY);
		if (!IsEmptyList(mFileStatus)){		
			mLines = GetLines(DVID_SRC);
			mDvids = MakeListFromLines(mLines);		
			for (i = 0; i < GetCount(mDvids); i = i + 1)
				DictionaryInsert (AddNewVidDef(mDvids[i]), VIDS_DICT);		
		}		
	}else{		
		mFStatus = FindFile(VIDVALS_SRC,"", FF_FILETITLEONLY);
		VIDS_DICT = NewDictionary(VID_STRUCT.vid);
		
		// First we gather all VIDs with predefined values
		if (!IsEmptyList(mFStatus)){
			mLines = GetLines(VIDVALS_SRC);
			for (i = 0; i < GetCount(mLines); i = i + 1){
				VIDVALSInfo = splitString(mLines[i], " : ");
				//logn("VID: ", VIDVALSInfo[0], " NAME: ", VIDVALSInfo[1], " VALS: ", VIDVALSInfo[2]);	
				VIDStruct = NewStructured(VID_STRUCT);
				VIDStruct.vid = VIDVALSInfo[0]; //This is a string number. Human readable number once viewing VID_STRUCT (for Debug purpose)
				VIDStruct.name = VIDVALSInfo[1];
				VIDStruct.value = "";
				VIDStruct.valnames = splitString(VIDVALSInfo[2], ","); ;
				DictionaryInsert (VIDStruct, VIDS_DICT);
			}		
		}
		
		mFStatus = FindFile(VID_SRC,"", FF_FILETITLEONLY);
		
		// Now we add other VIDs
		if (!IsEmptyList(mFStatus)){
			mLines = GetLines(VID_SRC);
			
			for (i = 0; i < GetCount(mLines); i = i + 1){
				VIDInfo = splitString(mLines[i], " : ");
				//logn("VID: ", VIDInfo[1], " NAME: ", VIDInfo[2]);	
				VIDStruct = NewStructured(VID_STRUCT);
				VIDStruct.vid = VIDInfo[2]; //This is a string number. Human readable number once viewing VID_STRUCT (for Debug purpose)
				VIDStruct.name = VIDInfo[3];
				//logn("VID Name: ", VIDStruct.name);
				VIDStruct.value = "";
				if(!DictionaryLookup(VIDStruct, VIDS_DICT)){
					DictionaryInsert (VIDStruct, VIDS_DICT);
				}
			}		
		}
		
		mFStatus = FindFile(ECID_SRC,"", FF_FILETITLEONLY);
		
		// Then we add ECIDs
		if (!IsEmptyList(mFStatus)){
			mLines = GetLines(ECID_SRC);
			
			for (i = 0; i < GetCount(mLines); i = i + 1){
				VIDInfo = splitString(mLines[i], " : ");
				//logn("VID: ", VIDInfo[1], " NAME: ", VIDInfo[2]);	
				VIDStruct = NewStructured(VID_STRUCT);
				VIDStruct.vid = VIDInfo[2]; //This is a string number. Human readable number once viewing VID_STRUCT (for Debug purpose)
				VIDStruct.name = VIDInfo[3];
				VIDStruct.value = "";
				if(!DictionaryLookup(VIDStruct, VIDS_DICT)){
					DictionaryInsert (VIDStruct, VIDS_DICT);
				}
			}		
		}		
	}	
	//dump(VIDS_DICT);
	logn("VIDS_DICT: ", GetCount(VIDS_DICT), " Vids");		
}

// It will construct CEID dictionary to be used later once Host parsing the reports published by Tool
SetupCeidDictionary()
{
	local i, mCeids, mLines;	

	logn("Thinh - SetupCeidDictionary");
	// Structure CEID_STRUCT (ceid, name);
	// Make a Dictionary with a ceid as a key.
    CEIDS_DICT = NewDictionary(CEID_STRUCT.ceid);

	mCeids = NewList();
	mLines = GetLines(CEID_SRC);
	mCeids = MakeListFromLines(mLines);
	
	// Make a Dictionary with a ceid as a key.
    CEIDS_DICT = NewDictionary(CEID_STRUCT.ceid);
	for (i = 0; i < GetCount(mCeids); i = i + 1)
		DictionaryInsert (AddNewCeidDef(mCeids[i]), CEIDS_DICT);
	
	logn("CEIDS_DICT: ", GetCount(CEIDS_DICT), " Ceids");
}

// It will construct the report dictionary based upon the ConvertedEventXp.txt file
// CEID_STRUCT (ceid, name, rptids);
// RPTID_STRUCT (rptid, rptname, vids, vidnames);
SetupReportDictionary(){
	local i, mLines, mFStatus, CEIDInfo, reportIdInfo, RPTIDInfo, VIDInfo, VIDVALSInfo;
	local RPTIDStruct, CEIDStruct, rptVIDs, rptVIDNames, reportIds;
	local mRptVidsInfo, VIDStruct, foundVIDStruct, mReportIds;
	logn("Thinh - SetupReportDictionary");    
	
	if(TOOLTYPE == "Mecca"){
		mReportIds = NewList();
		mLines = GetLines(RPTID_SRC);
		mReportIds = MakeListFromLines(mLines);
		//logn("Number of Reports: ", GetCount(mReportIds));
		// Make a Dictionary with a rptid as a key.
		RPTIDS_DICT = NewDictionary(RPTID_STRUCT.rptid);
		for (i = 0; i < GetCount(mReportIds); i = i + 1){
			//logn("i: ", i); logn("report: ", mReportIds[i]);
			//logn("RptIdLine = ", mReportIds[i]);
			DictionaryInsert (AddNewRptIdDef(mReportIds[i]), RPTIDS_DICT);
		}			
	}else{
		RPTVIDSINFO = NewList();
		mRptVidsInfo = "";
		
		mFStatus = FindFile(RPTID_SRC,"", FF_FILETITLEONLY);
		if (!IsEmptyList(mFStatus)){
			CEIDS_DICT 	= NewDictionary(CEID_STRUCT.ceid);
			RPTIDS_DICT = NewDictionary(RPTID_STRUCT.rptid);
			//VIDS_DICT 	= NewDictionary(VID_STRUCT.vid);
			
			mLines = GetLines(RPTID_SRC);
			for (i = 0; i < GetCount(mLines); i = i + 1){
				if((FindString(mLines[i], "CEID : ", 0)).Count > 0){
					CEIDInfo = splitString(mLines[i], " : ");
					//logn("CEID: ", CEIDInfo[2], " NAME: ", CEIDInfo[3]);	
					if(!isEmptyList(reportIds)){
						CEIDStruct.rptids = Reverse(reportIds);
						DictionaryInsert (CEIDStruct, CEIDS_DICT);
						//logn(CEIDStruct);
					}
					reportIds = NewList();
					CEIDStruct = NewStructured(CEID_STRUCT);
					CEIDStruct.ceid = CEIDInfo[2]; //This is a string number. Human readable number once viewing CEID_STRUCT (for Debug purpose)
					CEIDStruct.name = CEIDInfo[3];		
									
				}else if((FindString(mLines[i], "RPID : ", 0)).Count > 0){
					reportIdInfo = splitString(mLines[i], " : ");
					//logn("reportId: ", reportIdInfo[2]);	
					reportIds = InsertFirst(reportIdInfo[2], reportIds);				
				}else if((FindString(mLines[i], "RPTID : ", 0)).Count > 0){
					RPTIDInfo = splitString(mLines[i], " : ");
					//logn("RPTID: ", RPTIDInfo[2], " NAME: ", RPTIDInfo[3]);	
					//Take care of the last CEID
					if(!isEmptyList(reportIds)){
						CEIDStruct.rptids = Reverse(reportIds);
						DictionaryInsert (CEIDStruct, CEIDS_DICT);
						//logn(CEIDStruct);
						reportIds = NewList();
					}
					//Take care of the previous RPID
					if(!isEmptyList(rptVIDs)){
						RPTIDStruct.vids = Reverse(rptVIDs);
						RPTIDStruct.vidnames = Reverse(rptVIDNames);
						DictionaryInsert (RPTIDStruct, RPTIDS_DICT);
						//logn(RPTIDStruct);
					}
					rptVIDs = NewList();
					rptVIDNames = NewList();
					RPTIDStruct = NewStructured(RPTID_STRUCT);
					RPTIDStruct.rptid = RPTIDInfo[2]; //This is a string number. Human readable number once viewing RPTID_STRUCT (for Debug purpose)
					RPTIDStruct.rptname = RPTIDInfo[3];
				}else if((FindString(mLines[i], "VID : ", 0)).Count > 0){
					VIDInfo = splitString(mLines[i], " : ");
					//logn("VID: ", VIDInfo[2], " NAME: ", VIDInfo[3]);
					rptVIDs = InsertFirst(VIDInfo[2], rptVIDs);	
					rptVIDNames = InsertFirst(VIDInfo[3], rptVIDNames);			
				}
			}
			//Take care of last RPTID
			if(!isEmptyList(rptVIDs)){
				RPTIDStruct.vids = Reverse(rptVIDs);
				RPTIDStruct.vidnames = Reverse(rptVIDNames);
				DictionaryInsert (RPTIDStruct, RPTIDS_DICT);
				//logn(RPTIDStruct);
			}		
		}		
	}	

	logn("***************************************");
	logn("**** CEIDS_DICT  : ", GetCount(CEIDS_DICT), " CEIDs ****");
	logn("**** RPTIDS_DICT : ", GetCount(RPTIDS_DICT), " RPTIDS ****");	
//	logn("**** RPTVIDSINFO : ", GetCount(RPTVIDSINFO), " VIDs ****");
	logn("**** VIDS_DICT   : ", GetCount(VIDS_DICT), " VIDS ****");	
	logn("***************************************");	
}

//0=QUEUED,1=SELECTED,2=WAITING-FOR-START,3=EXECUTIING,4=PAUSED,5=COMPLETED,6=CANCELED,7=STOPPED,8=ABORTED
SetupCJStateDict(){
	CJSTATE_DICT = NewDictionary(CJSTATE_STRUCT.stateID);	
	DictionaryInsert (CreateCJStateStruct(-1,"NA"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(0,"QUEUED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(1,"SELECTED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(2,"WAITING-FOR-START"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(3,"EXECUTIING"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(4,"PAUSED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(5,"COMPLETED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(6,"CANCELED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(7,"STOPPED"), CJSTATE_DICT);
	DictionaryInsert (CreateCJStateStruct(8,"ABORTED"), CJSTATE_DICT);
}

CreateCJStateStruct(id, name){
	local CJStateStruct;
	CJStateStruct = NewStructured(CJSTATE_STRUCT);
	CJStateStruct.stateID = id; 	
	CJStateStruct.stateName = name;	
	return(CJStateStruct);	
}

GetVIDsInfo(inFile){      
    local begin, end, line, lines, fileContent, mFound;
	logn("Thinh - GetVIDsInfo");
	fileContent = FileRead(inFile);
	begin = 0;
	lines = NewList();
    do{
		//logn("begin: ", begin);
        end = FindString(fileContent, "\n", begin);			
		//logn("end.Start = ", end.Start, " and end.Count = ", end.Count);
		line = SubString(fileContent, begin, end.Start - begin);
		mFound = FindString(line, "<U4[1/1] ");
		if(mFound.Count > 0){
			logn("Got: ", SubString(line, mFound.Start + mFound.Count));		
		}

		begin = end.Start + end.Count;
    } while (begin < GetCount(fileContent));

    // //logn("Done!");
	// return(Reverse(lines));
}

// Its input is the whole content of a file in a string including the character return \cr
// Its output is a list containing all the lines of the file
GetLines(inFile){      
    local begin, end, line, lines, fileContent;
	//logn("Thinh - GetLines");
	fileContent = FileRead(inFile);
	begin = 0;
	lines = NewList();
    do{
		//logn("begin: ", begin);
        end = FindString(fileContent, "\n", begin);			
		//logn("end.Start = ", end.Start, " and end.Count = ", end.Count);
		line = SubString(fileContent, begin, end.Start - begin);
		if (SubString(line, 0, 2) != "//")
		{
			//logn("line = ", line);
			lines = InsertFirst(line, lines);
		}
		begin = end.Start + end.Count;
    } while (begin < GetCount(fileContent));

    //logn("Done!");
	return(Reverse(lines));
}

GetNumbers(inFile){      
    local begin, end, line, lines, fileContent;
	//logn("Thinh - GetLines");
	fileContent = FileRead(inFile);
	begin = 0;
	lines = NewList();
    do{
		//logn("begin: ", begin);
        end = FindString(fileContent, "\n", begin);			
		//logn("end.Start = ", end.Start, " and end.Count = ", end.Count);
		line = SubString(fileContent, begin, end.Start - begin);
		if (SubString(line, 0, 2) != "//")
		{
			//logn("line = ", line);
			lines = InsertFirst(AtoI(line), lines);
		}
		begin = end.Start + end.Count;
    } while (begin < GetCount(fileContent));

    //logn("Done!");
	return(Reverse(lines));
}

MakeListFromLines(lines){
	local i, line, separator, begin, end, item, list, commaBegin, commaEnd, lineList, subList;
//	local lines;
//	lines = GetLines(VID_SRC);
	separator = " ";
	list = NewList();
	for(i = 0; i < GetCount(lines); i = i + 1)	
	{	//logn("i: ", i); logn("line: ", lines[i]);
		line = lines[i];
		lineList = NewList();
		begin = 0;
			
		do
		{	//Each field in a line is separated by space
			end = FindString(line, " ", begin);	
			if(end.Count != 0)
				item = SubString(line, begin, end.Start - begin);
			else
				item = SubString(line, begin);
			
			commaBegin = 0;
			subList = NewList();
			//logn("item: ", item);
			do
			{	//If field contains more than one item then they're separated by comma
				commaEnd = FindString(item, ",", commaBegin);
				
				if(commaEnd.Count != 0)
					subItem = SubString(item, commaBegin, commaEnd.Start - commaBegin); //Get each item in the field
				else
					subItem = SubString(item, commaBegin); //The last item in the field
					
				subList = InsertFirst(subItem, subList); //List all items together					
				commaBegin = commaEnd.Start + 1;
				//logn("subItem: ", subItem);
			}while(commaEnd.Count != 0); //Do until we don't see the next comma in the field
			
			if(!IsEmptyList(subList)) //Field with multiple items
				lineList = InsertFirst(Reverse(subList), lineList);
			else //Field with single item
				lineList = InsertFirst(item, lineList);				
			
			begin = end.Start + 1;
			
		}while(end.Count != 0);
			
		begin = end.Start + end.Count;
		list = InsertFirst(Reverse(lineList), list);
	}
	//logn("Finished");
	return(Reverse(list));
}

PrintReportId(mRpt){
	logn("id: ", mRpt.rptid);
	logn("name:", mRpt.rptname);
	logn("vids:", mRpt.vids);
	logn("values:", mRpt.values);
}

CreateVids(){
	local mMsg, mClick, mVidName;
	mMsg = "Click Yes to creat all Vids\n\nClick No to create your specific one\n\nClick Cancel to abort this operation";
	mClick = GuiMsgBox("CreateVids Query", mMsg, 3);
	logn("click: ", mClick);
	switch(mClick){
		case 2:
			break;
		case 6:
			break;
		case 7:
			mVidName = GuiGetString("Enter your VID's based Name");
			BuildVid(mVidName);
			break;
		default:
			break;
	}
}
BuildVid(baseName){
	switch(baseName){
		case "ProcRCDataSigmaTI":
			ComputeVidNumber(baseName, 84222208, 16, 0, 32);
			break;
		default:
			break;
	}	
}

ComputeVidNumber(baseName, baseNumber, constant, lowFactor, highFactor){
	local i, mId, mVid, mStatus, mOutFile;
	mOutFile = "C:\\ASM-Host\\Data\\Vids.txt";
	for(i = lowFactor; i < highFactor; i = i + 1){
		mId = baseNumber + (constant * i);
		mVid = CatString (ToASCII(mId), " ", baseName, ToASCII(i), "\n");
		logn(mVid);
		FileAppend(mOutFile, mVid);	
	}
}

SetPulsarHIGLkChkPumpTime(time){
	local i, mVids, mS1F4_Reply, mS2F16_Reply, mValues, mValue, mECIDsSetting;
	logn(">>>>>> SetPulsarHIGLkChkPumpTime: ", time, " <<<<<<<");
	mVids = InsertFirst(S2_U4(17635137), mVids); //RC1
	mVids = InsertFirst(S2_U4(17635138), mVids); //RC2
	mVids = InsertFirst(S2_U4(17635139), mVids); //RC3
	mVids = InsertFirst(S2_U4(17635140), mVids); //RC4	
	mS1F4_Reply = S1F3_Request(mVids);
	mValues = S1F4_Parser(mS1F4_Reply, mVids);//Decode(mS1F4_Reply.text);
	mArrVids = ListToArray(mVids);
	for(i = 0;i < GetCount(mValues);i = i + 1){
		mValue = mValues[i];
		//logn("*****    mValue = ", mValue);
		if(mValue > 10){
			mECIDsSetting = InsertFirst(S2_L(mArrVids[i], S2_U2(10)), mECIDsSetting);
			logn(mArrVids[i], " = ", mValue);
		}
	}	

	if(!IsEmptyList(mECIDsSetting) && PUMPTO == 0){
		PUMPTO = GuiMsgBox("HIG LkChkPumpTime", "Do you want to Minimize HIG LkChkPumpTime ?", 3);
		if(PUMPTO == 6){ //Yes clicked
			S2_F15_SetEquipmentConstants(mECIDsSetting);
		}
	}
}

SetPulsarPumpTimeOut(time){
	local i, mVids, mS1F4_Reply, mS2F16_Reply, mValues, mValue, mECIDsSetting;
	logn(">>>>>> SetPulsarPumpTimeOut: ", time, " <<<<<<<");
	mVids = InsertFirst(S2_U4(17635009), mVids); //RC1
	mVids = InsertFirst(S2_U4(17635010), mVids); //RC2
	mVids = InsertFirst(S2_U4(17635011), mVids); //RC3
	mVids = InsertFirst(S2_U4(17635012), mVids); //RC4	
	mS1F4_Reply = S1F3_Request(mVids);
	mValues = S1F4_Parser(mS1F4_Reply, mVids);//Decode(mS1F4_Reply.text);
	mArrVids = ListToArray(mVids);
	for(i = 0;i < GetCount(mValues);i = i + 1){
		mValue = mValues[i];
		//logn("*****    mValue = ", mValue);
		if(mValue > 60){
			//mSetting =  mArrVids[i]
			mECIDsSetting = InsertFirst(S2_L(mArrVids[i], S2_U2(60)), mECIDsSetting);
			logn(mArrVids[i], " = ", mValue);
		}
	}	

	if(!IsEmptyList(mECIDsSetting) && PUMPTO == 0){
		PUMPTO = GuiMsgBox("Pump TimeOut", "Do you want to Minimize time for Pump TimeOut ?", 3);
		if(PUMPTO == 6){ //Yes clicked
			S2_F15_SetEquipmentConstants(mECIDsSetting);
		}
	}
}

SetPulsarHigLeakCheckTime(time){
	local i, mVids, mS1F4_Reply, mS2F16_Reply, mValues, mValue, mECIDsSetting;
	logn(">>>>>> SetPulsarHigLeakCheckTime: ", time, " <<<<<<<");
	mVids = InsertFirst(S2_U4(17635121), mVids); //RC1
	mVids = InsertFirst(S2_U4(17635122), mVids); //RC2
	mVids = InsertFirst(S2_U4(17635123), mVids); //RC3
	mVids = InsertFirst(S2_U4(17635124), mVids); //RC4	
	mS1F4_Reply = S1F3_Request(mVids);
	mValues = S1F4_Parser(mS1F4_Reply, mVids);//Decode(mS1F4_Reply.text);
	mArrVids = ListToArray(mVids);
	for(i = 0;i < GetCount(mValues);i = i + 1){
		mValue = mValues[i];
		//logn("*****    mValue = ", mValue);
		if(mValue > 10){
			mECIDsSetting = InsertFirst(S2_L(mArrVids[i], S2_U2(10)), mECIDsSetting);
			logn(mArrVids[i], " = ", mValue);
		}
	}	
	
	if(!IsEmptyList(mECIDsSetting) && HIGLCK == 0){
		HIGLCK = GuiMsgBox("HIGLeakCheck", "Do you want to Minimize time for HIG LeakCheck ?", 3);
		if(HIGLCK == 6){ //Yes clicked
			S2_F15_SetEquipmentConstants(mECIDsSetting);
		}
	}
}

public _GetValuesForECIDsFromFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS2F14_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\ECIDS.txt";
		logn("**** Select ECIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains ECIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;				
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		mSecsVidList = Reverse(mSecsVidList);
		mS2F14_Reply = S2F13_Request(mSecsVidList);
		mValues = S2F14_Parser(mS2F14_Reply, mSecsVidList);		
	}
}

public _GetVIDNameWithValuesFromFile(iFile){
	local i, mFStatus, mSecsVidList, mS1F4_Reply, mValues, mGuiStrct, mStatus, VIDStruct, VIDInfo;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\VIDS.txt";
		logn("**** Select VIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains VIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;		
	}
	
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}else{
		mLines = GetLines(iFile);
		
		for (i = 0; i < GetCount(mLines); i = i + 1){
			VIDInfo = splitString(mLines[i], " : ");
			//logn("VID: ", VIDInfo[1], " NAME: ", VIDInfo[2]);	
			VIDStruct = NewStructured(VID_STRUCT);
			VIDStruct.vid = VIDInfo[2]; //This is a string number. Human readable number once viewing VID_STRUCT (for Debug purpose)
			VIDStruct.name = VIDInfo[3];
			VIDStruct.value = "";
			if(!DictionaryLookup(VIDStruct, VIDS_DICT)){
				DictionaryInsert (VIDStruct, VIDS_DICT);
			}
			
			mSecsVidList = InsertFirst(S2_U4(AtoI(VIDStruct.vid)), mSecsVidList);			
		}	
		
		mSecsVidList = Reverse(mSecsVidList);
		mS1F4_Reply = S1F3_Request(mSecsVidList);
		mValues = S1F4_Parser(mS1F4_Reply, mSecsVidList);			
	}
}

public _GetValuesForVIDsFromFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS1F4_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\VIDS.txt";
		logn("**** Select VIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains VIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;		
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		mSecsVidList = Reverse(mSecsVidList);
		mS1F4_Reply = S1F3_Request(mSecsVidList);
		mValues = S1F4_Parser(mS1F4_Reply, mSecsVidList);			
	}
}

public _GetNameListInfoForVIDsFromFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS1F12_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\VIDS.txt";
		logn("**** Select VIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains VIDs or ECIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;			
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		mS1F12_Reply = S1F11_Request(Reverse(mSecsVidList));
		mValues = S1F12_Parser(mS1F12_Reply);		
	}
}

IsToolReady(){
	local mVids, mS1F4_Reply, mValues;
	logn( "Thinh - IsToolReady ???" );	
	mVids = InsertFirst(S2_U4(33882400), mVids); //PREVIOUS PROCESSSTATE
	mVids = InsertFirst(S2_U4(33882384), mVids); //PROCESSSTATE
	mS1F4_Reply = S1F3_Request(mVids);	
	mValues = S1F4_Parser(mS1F4_Reply);
	PROCESSSTATE = mValues[0];
	//if (mValues[0] ==  mValues[1] && mValues[1] == 64){ //64:idle, 65:Active	
	if (mValues[1] >= 64){ //64:idle, 65:Active
		logn("*****************************************************");
		logn("****  TOOL IS IDLE and READY FOR NEW INTRO NOW  *****");
		logn("*****************************************************");			
		_SynchronizeTimeWithHost();
		return(1);
	}else{
		return(0);
	}
}

test(){
	local test, secsObj, value, count, list, str, byteCount, strCount, integer, num;
	
	test =  <B[28/1] 0x02 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
                     0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
                     0x01 0x01 0x01 0x01 0x01 0x00 0x00 0x00>;
	secsObj = CheckSECSFormat(test);
	If(IsSECS(secsObj))
		logn("yes");
	
	value = S2_Decode(secsObj);
	logn("secs value: ", value);
	// value = ToHex(value);
	// logn("hex value: ", value);
	// value = ToString(value);
	// logn("str value: ", value);
	// value = AtoI(value);
	// logn("int value: ", value);
	
	// logn("value: ", value);
	// count = GetBlockCount(secsObj);
	// logn("count: ", count);
	format = GetFormat(secsObj);
	logn("format: ", format);
	if(format == "B")
	{
		byteCount = GetCount(secsObj);
		logn("byteCount: ", byteCount);
		for(i = 0; i < byteCount*2; i = i + 2)
		{
			//logn(i, " : ", value[i]);
			num = CatString(value[i],value[i+1]);
			logn("num: ", num);
			integer = AtoI(num);
			logn("integer: ", integer);			
		}		
	}

	logn("test: ", test);
}

public _ATEST(){ //change to public once needed to test something
	local mStructuredObject, mSubDirs, mFileStructure, mRecipes, mRecipeName, mFloat;
	local i, mVids, mS1F4_Reply, mS2F16_Reply, mValues, mValue, mECIDsSetting, mTest;
	logn("->_ATEST()");
	mVids = InsertFirst(S2_U4(17635009), mVids); //RC1
	mVids = InsertFirst(S2_U4(17635010), mVids); //RC2
	mVids = InsertFirst(S2_U4(17635011), mVids); //RC3
	mVids = InsertFirst(S2_U4(17635012), mVids); //RC4	

TestData(mVids);
	mECIDsSetting = Str_Decode(mVids);
	// logn("mECIDsSetting: ", mECIDsSetting);
	// mTest = CatString(mECIDsSetting[0], "=60");
	// logn("mTest: ", mTest);
	// TestData(mTest);
	// mECIDsSetting = CatString(Str_Decode(mVids[0]), "=");
	// logn("mECIDsSetting: ", mECIDsSetting);
	
	mFloat = 36.5 / 100;
	
	logn("mFloat: ", mFloat);
	
	TOOLTYPE = "ALD";
	RPTID_SRC = CatString("C:\\ASM-Host\\Config\\",TOOLTYPE,"\\CEIDs.txt");
	mFStatus = FindFile(RPTID_SRC,"", FF_FILETITLEONLY);
	if (!IsEmptyList(mFStatus)){
		mRunSetupRptObj = run(SetupReportDictionaryFromCEIDFile);
	}
			
	// RecDir = PJRECIPE_DIR;
	// mStructuredObject = FindFile (RecDir, "*", FF_RECURSE);	
	
	// //logn(mStructuredObject);
	
	// if(IsDirectoryStructure(mStructuredObject)){
		// mSubDirs = mStructuredObject.Directories;
		// if(GetCount(mSubDirs) > 0){
			// for(i = 0;i < GetCount(mSubDirs);i = i + 1){
				// mFileStructure = mSubDirs[i];
				// if(IsDirectoryStructure(mFileStructure)){
					// //logn("******* ", fileStructure);
					// logn("Dir : ", mFileStructure.Name);
					// mRecipes = mFileStructure.Files;
					// for(ii = 0;ii < GetCount(mRecipes);ii = ii + 1){
						// mRecipeName = mRecipes[ii].Name;
						// //logn("Thinh - mRecipeName : ", mRecipeName);
						// if(IsEmptyList(filewrite(mRecipeName))){ //No data to write will delete the file
							// logn("Thinh - failed to remove recipe: ", mRecipeName);
						// }else{
							// logn("Removed Recipe: ", mRecipeName);	
						// }
					// }			
				// }
			// }			
		// }else{
			// mRecipes = mStructuredObject.Files;
			// for(ii = 0;ii < GetCount(mRecipes);ii = ii + 1){
				// mRecipeName = mRecipes[ii].Name;
				// //logn("Thinh - mRecipeName : ", mRecipeName);
				// if(IsEmptyList(filewrite(mRecipeName))){ //No data to write will delete the file
					// logn("Thinh - failed to remove recipe: ", mRecipeName);
				// }else{
					// logn("Removed Recipe: ", mRecipeName);	
				// }
			// }			
		// }
	// }
	// GetVIDsInfo(ECID_SRC);
	logn("DONE");	
}

SetupReportDictionaryFromCEIDFile(){
	local i, mLines, mFStatus, CEIDInfo, reportIdInfo, RPTIDInfo, VIDInfo, VIDVALSInfo;
	local RPTIDStruct, CEIDStruct, rptVIDs, rptVIDNames, reportIds;
	local mRptVidsInfo, VIDStruct, foundVIDStruct, mReportIds;
	local mFoundU4;
	logn("Thinh - SetupReportDictionary");    
	
	if(TOOLTYPE == "Mecca"){
		mReportIds = NewList();
		mLines = GetLines(RPTID_SRC);
		mReportIds = MakeListFromLines(mLines);
		//logn("Number of Reports: ", GetCount(mReportIds));
		// Make a Dictionary with a rptid as a key.
		RPTIDS_DICT = NewDictionary(RPTID_STRUCT.rptid);
		for (i = 0; i < GetCount(mReportIds); i = i + 1){
			//logn("i: ", i); logn("report: ", mReportIds[i]);
			//logn("RptIdLine = ", mReportIds[i]);
			DictionaryInsert (AddNewRptIdDef(mReportIds[i]), RPTIDS_DICT);
		}		
	}else{
		RPTVIDSINFO = NewList();
		mRptVidsInfo = "";
		CEIDS_DICT 	= NewDictionary(CEID_STRUCT.ceid);
		RPTIDS_DICT = NewDictionary(RPTID_STRUCT.rptid);
		//VIDS_DICT 	= NewDictionary(VID_STRUCT.vid);
		
		mLines = GetLines(RPTID_SRC);
		for (i = 0; i < GetCount(mLines); i = i + 1){
			if((FindString(mLines[i], "CEID : ", 0)).Count > 0){
				CEIDInfo = splitString(mLines[i], " : ");
				//logn("CEID: ", CEIDInfo[2], " NAME: ", CEIDInfo[3]);	
				if(!isEmptyList(reportIds)){
					CEIDStruct.rptids = Reverse(reportIds);
					DictionaryInsert (CEIDStruct, CEIDS_DICT);
					//logn(CEIDStruct);
				}
				reportIds = NewList();
				CEIDStruct = NewStructured(CEID_STRUCT);
				CEIDStruct.ceid = CEIDInfo[2]; //This is a string number. Human readable number once viewing CEID_STRUCT (for Debug purpose)
				CEIDStruct.name = CEIDInfo[3];		
								
			}else if((FindString(mLines[i], "RPID : ", 0)).Count > 0){
				reportIdInfo = splitString(mLines[i], " : ");
				//logn("reportId: ", reportIdInfo[2]);	
				reportIds = InsertFirst(reportIdInfo[2], reportIds);				
			}
		}
	}	
}

public _ActivateN2Purge() { N2PURGE = PURGEMODE = 1;}
