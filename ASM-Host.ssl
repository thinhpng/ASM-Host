/*/////////////////////////////////////////////
 *  File: ASM-Host.ssl
 *	Version: 2.0
 *	Date: Oct 04, 2018
 *	Scripted by THINH P NGUYEN
 */ /////////////////////////////////////////////
//// AreYouOnline ////
S1F1_Request(){
	local mRequest, mReply;
	logn("*****    S1F1_AreYouOnline   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// OnLineData ////
S1F2_Parser(S1F2_Reply){
	local mReplyInfo;
	logn("*****    S1F2_OnLineData   *****");
	if(IsMessage(S1F2_Reply) && S1F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F2_Reply.text);
}
//// SelectedEquipmentStatusRequest ////
S1F3_Request(VIDs){
	local mRequest, mReply;
	logn("*****    S1F3_SelectedEquipmentStatusRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = S2_L(VIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SelectedEquipmentStatusData ////
S1F4_Parser(S1F4_Reply, VIDs){
	local i1, i2, i3, mS1F4List, mReplyInfo, mResults, mFormat, mValue, mData1, mData2, mVID;
	logn("*****    S1F4_SelectedEquipmentStatusData   *****");
	if(IsMessage(S1F4_Reply) && S1F4_Reply.text == "")
		return;
	
	mReplyInfo = Decode(S1F4_Reply.text);
	
	for(i1 = 0;i1 < GetCount(mReplyInfo);i1 = i1 + 1){
		mValue = "";
		mData1 = mReplyInfo[i1];
		mFormat = GetFormat(mData1);
		//logn("mData1: ", mData1);
		//logn("mFormat: ", mFormat);
		if(mFormat == "L"){
			if(GetCount(mData1) == 0){ //Empty List
				mResults = InsertFirst(mValue, mResults);
			}else{
				mData1 = Decode(mData1);
				for(i2 = 0;i2 < GetCount(mData1);i2 = i2 + 1){
					mData2 = mData1[i2];
					mFormat = GetFormat(mData2);
					//logn("Item's mFormat: ", mFormat);
					if(mFormat == "L"){
						if(GetCount(mData2) == 0){ //Empty List
							mResults = InsertFirst(mValue, mResults);
						}else{
							mData2 = Decode(mData2);
							for(i3 = 0;i3 < GetCount(mData2);i3 = i3 + 1){
								mValue = Smart_Decode(mData2[i3]);
								if(IsEmptyList(VIDs)){
									logn("*****    mValue = ", mValue);
								}else{
									mVID = Smart_Decode(VIDs[i3]);
									logn("*****    VID:", mVID, " (", GetVidName(mVID), ") = ", mValue);	
								}
								mResults = InsertFirst(mValue, mResults);
							}				
						}
					}else if (GetCount(S1F3VIDS) == 1){ //Single VID request but received a list of values
						mValue = Smart_Decode(mData2);
						logn("mValue: ", mValue);
						mResults = InsertFirst(mValue, mResults);
					}else{
						mValue = Smart_Decode(mData2);
						logn("mValue: ", mValue);
						if(IsEmptyList(VIDs)){
							logn("*****    mValue = ", mValue);
						}else{
							mVID = Smart_Decode(VIDs[i2]);
							logn("*****    VID:", mVID, " (", GetVidName(mVID), ") = ", mValue);
						}
						mResults = InsertFirst(mValue, mResults);
					}
				}				
			}				
		}else{
			mValue = Smart_Decode(mData1);
			if(IsEmptyList(VIDs)){
				logn("*****    mValue = ", mValue);
			}else{
				mVID = Smart_Decode(VIDs[i1]);
				logn("*****    VID:", mVID, " (", GetVidName(mVID), ") = ", mValue);
			}
			mResults = InsertFirst(mValue, mResults);
		}
	}
	//logn("DONE");
	return (Reverse(mResults));
}
//// FormattedStatusRequest ////
S1F5_Request(){
	local mRequest, mReply;
	logn("*****    S1F5_FormattedStatusRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// FormattedStatusData ////
S1F6_Parser(S1F6_Reply){
	local mReplyInfo;
	logn("*****    S1F6_FormattedStatusData   *****");
	if(IsMessage(S1F6_Reply) && S1F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F6_Reply.text);
}
//// FixedFormRequest ////
S1F7_Request(){
	local mRequest, mReply;
	logn("*****    S1F7_FixedFormRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// FixedFormData ////
S1F8_Parser(S1F8_Reply){
	local mReplyInfo;
	logn("*****    S1F8_FixedFormData   *****");
	if(IsMessage(S1F8_Reply) && S1F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F8_Reply.text);
}
//// MaterialTransferStatusRequest ////
S1F9_Request(){
	local mRequest, mReply;
	logn("*****    S1F9_MaterialTransferStatusRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MaterialTransferStatusData ////
S1F10_Parser(S1F10_Reply){
	local mReplyInfo;
	logn("*****    S1F10_MaterialTransferStatusData   *****");
	if(IsMessage(S1F10_Reply) && S1F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F10_Reply.text);
}
//// StatusVariableNamelistRequest ////
S1F11_Request(VIDs){
	local mRequest, mReply;
	logn("*****    S1F11_StatusVariableNamelistRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = S2_L(VIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// StatusVariableNamelistReply ////
S1F12_Parser(S1F12_Reply){
	local i, mReplyInfo, mVidInfo, mVidInfoStruct, mVid, mName, mVidInfos_Dict;
	logn("*****    S1F12_StatusVariableNamelistReply   *****");
	if(IsMessage(S1F12_Reply) && S1F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F12_Reply.text);
	mVidInfos_Dict = NewDictionary(VID_STRUCT.vid);

	for(i = GetCount(mReplyInfo) - 1;i >= 0;i = i - 1){
		mVidInfo = Decode(mReplyInfo[i]);
		mVid = Smart_Decode(mVidInfo[0]);
		mName = Smart_Decode(mVidInfo[1]);
		mVidInfoStruct = NewStructured(VID_STRUCT);
		mVidInfoStruct.vid = mVid;
		mVidInfoStruct.name = mName;
		DictionaryInsert(mVidInfoStruct, mVidInfos_Dict);
	}
	return (mVidInfos_Dict);
}
//// EstablishCommunicationsRequest ////
S1F13_Request(VIDs){
	local mRequest, mReply;
	logn("*****    S1F13_EstablishCommunicationsRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = S2_L(VIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
////////////////////////////////////////////////////////
// NTSC requests S1F13. simulator replies S1F14 to NTSC. Equipmnet Establish Communication 
///////////////////////////////////////////////////////
S1F14(S1F13Msg){
	local S1F13List;
	logn("Thinh -> S1F14_Reply()");
	//wait(NewTimer(1));	//sleep for 1 sec
	S1F13List = decode(S1F13Msg.Text);

	if(GetCount(S1F13List) == 0){
		logn("Thinh - Equipment Establish Communication Reply");
		SendReply(S1F13Msg, S2_L(S2_B(0), S2_L(S2_A("ProdSE"), S2_A("B3947"))));
	}else if(GetCount(S1F13List) == 2){
		logn("Thinh - Equipment Establish Communication Reply");
		SendReply(S1F13Msg, S2_L(S2_B(0), S2_L()));
	}else
		logn("Thinh - Unknown! Secsim will handle it!");

	logn("Thinh <- S1F14_Reply()");
}
//// EstablishCommunicationsRequestAcknowledge ////
S1F14_Parser(S1F14_Reply){
	local mReplyInfo;
	logn("*****    S1F14_EstablishCommunicationsRequestAcknowledge   *****");
	if(IsMessage(S1F14_Reply) && S1F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F14_Reply.text);

	if(GetCount(mReplyInfo) == 0){
		logn("Thinh - Equipment Establish Communication Reply");
		SendReply(S1F14_Reply, S2_L(S2_B(0), S2_L(S2_A("ProdSE"), S2_A("B3947"))));
	}else if(GetCount(mReplyInfo) == 2){
		logn("Thinh - Equipment Establish Communication Reply");
		SendReply(S1F14_Reply, S2_L(S2_B(0), S2_L()));
	}else
		logn("Thinh - Unknown! Secsim will handle it!");
}
//// RequestOFF-LINE ////
S1F15_Request(){
	local mRequest, mReply;
	logn("*****    S1F15_RequestOFF-LINE   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// OFF-LINEAcknowledge ////
S1F16_Parser(S1F16_Reply){
	local mCmdAck;
	logn("*****    S1F16_OFF-LINEAcknowledge   *****");
	if(IsMessage(S1F16_Reply) && S1F16_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S1F16_Reply.text);

	if(IsMessage(S1F16_Reply) && S1F16_Reply.Stream == 1 && S1F16_Reply.Function == 0)
		logn("*****    Equipment denies OFF-LINE    *****");
	else{
		mCmdAck = S2_Decode(S1F16_Reply.text);
		switch(mCmdAck){
			case 0: logn("*****    ", mCmdAck, ": Ok - Accepted S1F15 Tool Offline Request    *****"); break;
			case 1: logn("*****    ", mCmdAck, ": Refused S1F15 Tool Offline Request    *****"); break;
			case 2: logn("*****    ", mCmdAck, ": Tool is currently Offline    *****"); break;
			default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
		}
	}
}
//// RequestON-LINE ////
S1F17_Request(){
	local mRequest, mReply;
	logn("*****    S1F17_RequestON-LINE   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ON-LINEAcknowledge ////
S1F18_Parser(S1F18_Reply){
	local mCmdAck;
	logn("*****    S1F18_ON-LINEAcknowledge   *****");
	if(IsMessage(S1F18_Reply) && S1F18_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S1F18_Reply.text);
	mCmdAck = S2_Decode(S1F18_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted S1F17 Tool Online Request    *****"); ONLINE = 1; break;
		case 1: logn("*****    ", mCmdAck, ": Refused S1F17 Tool Online Request    *****");	break;
		case 2: logn("*****    ", mCmdAck, ": Tool is currently Online    *****"); ONLINE = 1; break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;
	}

	if(mCmdAck == 1)
		return (0);
	else
		return (1);
}
//// GetAttribute ////
S1F19_Request(){
	local mRequest, mReply;
	logn("*****    S1F19_GetAttribute   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AttributeData ////
S1F20_Parser(S1F20_Reply){
	local mReplyInfo;
	logn("*****    S1F20_AttributeData   *****");
	if(IsMessage(S1F20_Reply) && S1F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F20_Reply.text);
}
//// DataVariableNamelistRequest ////
S1F21_Request(){
	local mRequest, mReply;
	logn("*****    S1F21_DataVariableNamelistRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = S2_L();
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DataVariableNamelistReply ////
S1F22_Parser(S1F22_Reply){
	local i, mReplyInfo, mVidInfo, mVidInfoStruct, mVid, mName, mVidInfos_Dict;
	logn("*****    S1F22_DataVariableNamelistReply   *****");
	if(IsMessage(S1F22_Reply) && S1F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F22_Reply.text);
	mVidInfos_Dict = NewDictionary(VID_STRUCT.vid);

	for(i = GetCount(mReplyInfo) - 1;i >= 0;i = i - 1){
		mVidInfo = Decode(mReplyInfo[i]);
		mVid = Smart_Decode(mVidInfo[0]);
		mName = Smart_Decode(mVidInfo[1]);
		mVidInfoStruct = NewStructured(VID_STRUCT);
		mVidInfoStruct.vid = mVid;
		mVidInfoStruct.name = mName;
		DictionaryInsert(mVidInfoStruct, mVidInfos_Dict);
	}
	return (mVidInfos_Dict);
}
//// CollectionEventNamelistRequest ////
S1F23_Request(){
	local mRequest, mReply;
	logn("*****    S1F23_CollectionEventNamelistRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = S2_L();
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CollectionEventNamelistReply ////
S1F24_Parser(S1F24_Reply){
	local mReplyInfo;
	logn("*****    S1F24_CollectionEventNamelistReply   *****");
	if(IsMessage(S1F24_Reply) && S1F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S1F24_Reply.text);
}
//// ToolOnlineLocalRequest ////
S1F65_Request(){
	local mRequest, mReply;
	logn("*****    S1F65_ToolOnlineLocalRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 65;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ToolOnlineLocalReply ////
S1F66_Parser(S1F66_Reply){
	local mCmdAck;
	logn("*****    S1F66_ToolOnlineLocalReply  *****");
	if(IsMessage(S1F66_Reply) && S1F66_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S1F66_Reply.text);
	mCmdAck = S2_Decode(S1F66_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted S1F65 Tool OnlineLocal Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Refused S1F65 Tool OnlineLocal Request    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": Tool is currently OnlineLocal    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// ToolOnlineRemoteRequest ////
S1F67_Request(){
	local mRequest, mReply;
	logn("*****    S1F67_ToolOnlineRemoteRequest *****");
	mRequest = NewMessage();
	mRequest.stream = 1;
	mRequest.function = 67;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ToolOnlineRemoteReply ////
S1F68_Parser(S1F68_Reply){
	local mCmdAck;
	logn("*****    S1F68_ToolOnlineRemoteReply *****");
	if(IsMessage(S1F68_Reply) && S1F68_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S1F68_Reply.text);
	mCmdAck = S2_Decode(S1F68_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted S1F67 Tool OnlineRemote Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Refused S1F67 Tool OnlineRemote Request    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": Tool is currently OnlineRemote    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// EquipmentConstantRequest ////
S2F13_Request(ECIDs){
	local mRequest, mReply;
	logn("*****    S2F13_EquipmentConstantRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = S2_L(Ecids);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EquipmentConstantData ////
S2F14_Parser(S2F14_Reply, ECIDs){
	local mReplyInfo, mValue, mValues;
	logn("*****    S2F14_EquipmentConstantData   *****");
	if(IsMessage(S2F14_Reply) && S2F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F14_Reply.text);
	logn("*****    There're ", GetCount(mReplyInfo), " ECIDs    *****");

	for(i = 0;i < GetCount(mReplyInfo);i = i + 1){
		mValue = Smart_Decode(mReplyInfo[i]);
		if(IsEmptyList(ECIDs)){
			logn("*****    Value = ", mValue);
		}else{
			logn("*****    ECID:", Smart_Decode(ECIDs[i]), " = ", mValue);
		}
		mValues = InsertFirst(mValue, mValues);
	}
	return (Reverse(mValues));
}
//// NewEquipmentConstantSend ////
S2F15_Request(ECIDs){
	local mRequest, mReply;
	logn("*****    S2F15_NewEquipmentConstantSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = S2_L(ECIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NewEquipmentConstantAck ////
S2F16_Parser(S2F16_Reply){
	local mCmdAck;
	logn("*****    S2F16_NewEquipmentConstantAck   *****");
	if(IsMessage(S2F16_Reply) && S2F16_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S2F16_Reply.text);
	mCmdAck = S2_Decode(S2F16_Reply.text);

	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted ECIDs setting Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": One or more ECIDs does not exist    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": Tool is currently Busy    *****"); break;
		case 3: logn("*****    ", mCmdAck, ": One or more values out of range    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;
	}
}
//// DateandTimeRequest ////
S2F17_Request(){
	local mRequest, mReply;
	logn("*****    S2F17_DateandTimeRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DateandTimeData ////
S2F18_Parser(S2F18_Reply){
	local mReplyInfo;
	logn("*****    S2F18_DateandTimeData   *****");
	if(IsMessage(S2F18_Reply) && S2F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F18_Reply.text);
	logn("*****    Date/Time: ", mReplyInfo, "   *****");
}
//// ResetOrInitializeSend ////
S2F19_Request(){
	local mRequest, mReply;
	logn("*****    S2F19_ResetOrInitializeSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ResetAcknowledge ////
S2F20_Parser(S2F20_Reply){
	local mReplyInfo;
	logn("*****    S2F20_ResetAcknowledge   *****");
	if(IsMessage(S2F20_Reply) && S2F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F20_Reply.text);
}
//// RemoteCommandSend ////
S2F21_Request(){
	local mRequest, mReply;
	logn("*****    S2F21_RemoteCommandSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RemoteCommandAcknowledge ////
S2F22_Parser(S2F22_Reply){
	local mReplyInfo;
	logn("*****    S2F22_RemoteCommandAcknowledge   *****");
	if(IsMessage(S2F22_Reply) && S2F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F22_Reply.text);
}
//// TraceInitializeSend ////
//S2F23_Request(TRID, DSPER, TOTSMP, REPGSZ, VIDS){
S2F23_Request(mDataList){	
	local mRequest, mReply;
	logn("*****    S2F23_TraceInitializeSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = mDataList;
//	mRequest.text = S2_L(S2_U4(TRID), S2_A(DSPER), S2_U4(TOTSMP), S2_U4(REPGSZ), S2_L(VIDS));
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceInitializeAcknowledge ////
S2F24_Parser(S2F24_Reply){
	local mReplyInfo;
	logn("*****    S2F24_TraceInitializeAcknowledge   *****");
	if(IsMessage(S2F24_Reply) && S2F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F24_Reply.text);
}
//// LoopbackDiagnosticRequest ////
S2F25_Request(){
	local mRequest, mReply;
	logn("*****    S2F25_LoopbackDiagnosticRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LoopbackDiagnosticData ////
S2F26_Parser(S2F26_Reply){
	local mReplyInfo;
	logn("*****    S2F26_LoopbackDiagnosticData   *****");
	if(IsMessage(S2F26_Reply) && S2F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F26_Reply.text);
}
//// InitiateProcessingRequest ////
S2F27_Request(){
	local mRequest, mReply;
	logn("*****    S2F27_InitiateProcessingRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// InitiateProcessingAcknowledge ////
S2F28_Parser(S2F28_Reply){
	local mReplyInfo;
	logn("*****    S2F28_InitiateProcessingAcknowledge   *****");
	if(IsMessage(S2F28_Reply) && S2F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F28_Reply.text);
}
//// EquipmentConstantNamelistRequest ////
S2F29_Request(CEIDs){
	local mRequest, mReply;
	logn("*****    S2F29_EquipmentConstantNamelistRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = S2_L(CEIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EquipmentConstantNamelist ////
S2F30_Parser(S2F30_Reply){
	local i, mReplyInfo, mEcid, mEcidStruct, mId, mName, mECIDs_Dict;
	logn("*****    S2F30_EquipmentConstantNamelist   *****");
	if(IsMessage(S2F30_Reply) && S2F30_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F30_Reply.text);
	mECIDs_Dict = NewDictionary(ECID_STRUCT.ecid);

	for(i = GetCount(mReplyInfo) - 1;i >= 0;i = i - 1){
		mEcid = Decode(mReplyInfo[i]);
		mId = Smart_Decode(mEcid[0]);
		mName = Smart_Decode(mEcid[1]);
		mEcidStruct = NewStructured(ECID_STRUCT);
		mEcidStruct.ecid = mId;
		mEcidStruct.ecname = mName;
		DictionaryInsert(mEcidStruct, mECIDs_Dict);
	}
	return (mECIDs_Dict);
}
//// DateandTimeSetRequest ////
S2F31_Request(Time){
	local mRequest, mReply;
	logn("*****    S2F31_DateandTimeSetRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 31;
	mRequest.wbit = 1;
	mRequest.text = S2_A(Time);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DateandTimeSetAcknowledge ////
S2F32_Parser(S2F32_Reply){
	local mCmdAck;
	logn("*****    S2F32_DateandTimeSetAcknowledge   *****");
	if(IsMessage(S2F32_Reply) && S2F32_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S2F32_Reply.text);
	mCmdAck = S2_Decode(S2F32_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted Time&Date Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Not Done Time&Date Setting Request    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// DefineReport ////
//	{L:2 
// 		DATAID 
// 		{L:a 
// 			{L:2 
// 				RPTID 
// 				{L:b 
// 					VID 
// 				}
// 			}
// 		}
// 	}
// Input: Integer, List of String or Integer, List of String or Integer
S2F33_Request(DataId, ReportIds, VIDs){
	local i, ii, mRequest, mReply, mRID, mVIDs, mVID, mVIDList, mDataList;
	logn("*****    S2F33_DefineReport   *****");
	mDataList = NewList();

	if(!IsEmptyList(ReportIds)){
		for(i = 0;i < GetCount(ReportIds);i = i + 1){
			if(IsString(ReportIds[i])){
				mRID = AtoI(ReportIds[i]);
			}else{
				mRID = ReportIds[i];
			}
			
			if(!IsEmptyList(VIDs)){
				mVIDs = VIDs[i];
				for(ii = 0;ii < GetCount(mVIDs);ii = ii + 1){
					if(IsString(mVIDs[ii])){
						mVID = AtoI(mReports[ii]);
					}else{
						mVID = mVIDs[ii];
					}
					mVIDList = InsertFirst(S2_U4(mVID), mVIDList);
				}
				mVIDList = Reverse(mVIDList);
			}
			mDataList = InsertFirst(S2_L(S2_U4(mRID), S2_L(mVIDList)), mDataList);			
		}		
	}	
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 33;
	mRequest.wbit = 1;	
	mRequest.text = S2_L(S2_U4(DataId), S2_L(Reverse(mDataList)));
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}

S2F33_Parser(S2F33_Request){
	local i, ii, mDataList, mReportList, mReport, mVIDList, mVID;
	mDataList = Decode(S2F33_Request.text);
	mReportList = Decode(mDataList[1]);
	
	if(IsEmptyList(mReportList)){
		logn("*****    S2F33 Deletes all Reports and Event Links    *****");
	}else{
		for(i = 0;i < GetCount(mReportList);i = i + 1){
			mReport = Decode(mReportList[i]);
			mReportID = Smart_Decode(mReport[0]);
			mVIDList = Decode(mReport[1]);
			if(IsEmptyList(mVIDList)){
				logn("*****    S2F33 Deletes Event Links to Report: ", mReportID,"    *****");
			}else{
				logn("*****    S2F33 Defines new Report: ", mReportID,"    *****");
				for(ii = 0;ii < GetCount(mVIDList);ii = ii + 1){
					mVID = Smart_Decode(mVIDList[ii]);					
					logn("*****          VID: ", mVID, " (", GetVidName(mVID), ")");					
				}
				UpdateReportDictionary(mReport);
			}
		}
	}
}

//// DefineReportAcknowledge ////
S2F34_Parser(S2F34_Reply){
	local mCmdAck;
	logn("*****    S2F34_DefineReportAcknowledge   *****");
	if(IsMessage(S2F34_Reply) && S2F34_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S2F34_Reply.text);
	mCmdAck = S2_Decode(S2F34_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted Define Reports Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Out of space to perform S2F33 Request    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": Invalid Format in S2F33 Request    *****"); break;
		case 3: logn("*****    ", mCmdAck, ": S2F33 has one or more ReportId already defined    *****"); break;
		case 4: logn("*****    ", mCmdAck, ": S2F33 has one or more invalid VID    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// LinkEventReport ////
// {L:2 
//		DATAID 
// 		{L:a 
//			{L:2 
//				CEID 
// 				{L:b 
//					RPTID 
// 				}
// 			}
// 		}
// }
// Input : Integer, List of Strings or Integers, List of Strings or Integers
S2F35_Request(DataId, CeIds, ReportIds){
	local i, ii, mRequest, mReply, mCEID, mDataList, mReportList, mReport, mReports, mCeIdStruct;
	logn("*****    S2F35_LinkEventReport   *****");
	mDataList = NewList();
	
	if(!IsEmptyList(CeIds)){
		for(i = 0;i < GetCount(CeIds);i = i + 1){
			if(IsString(CeIds[i])){
				mCEID = AtoI(CeIds[i]);
			}else{
				mCEID = CeIds[i];
			}
			mCeIdStruct = NewStructured(CEID_STRUCT);
			mCeIdStruct.ceid = ToAscii(mCEID); //Needs string number for DictionaryLookup
			if(DictionaryLookup(mCeIdStruct, CEIDS_DICT)){	//status found
				logn("*****         CEID:", mCEID, " (", mCeIdStruct.name, ")");
			}
			
			if(!IsEmptyList(ReportIds)){
				mReports = ReportIds[i];
				for(ii = 0;ii < GetCount(mReports);ii = ii + 1){
					if(IsString(mReports[ii])){
						mReport = AtoI(mReports[ii]);
					}else{
						mReport = mReports[ii];
					}
					logn("*****              Report:", mReport);
					mReportList = InsertFirst(S2_U4(mReport), mReportList);
				}
				mReportList = Reverse(mReportList);
			}
			mDataList = InsertFirst(S2_L(S2_U4(mCEID), S2_L(mReportList)), mDataList);			
		}		
	}
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 35;
	mRequest.wbit = 1;	
	mRequest.text = S2_L(S2_U4(DataId), S2_L(Reverse(mDataList)));
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}

S2F35_Parser(S2F35_Request){
	local i, ii, mDataList, mEventReportList, mReportList, mCEID;
	mDataList = Decode(S2F35_Request.text);
	mDataList = Decode(mDataList[1]);

	if(IsEmptyList(mDataList)){
		logn("*****    S2F35 Requests to Unlink all Events to Reports    *****");
	}else{	
		for(i = 0;i < GetCount(mDataList);i = i + 1){
			mEventReportList = Decode(mDataList[i]);
			mCEID = Smart_Decode(mEventReportList[0]);
			mReportList = Decode(mEventReportList[1]);
			if(IsEmptyList(mReportList)){
				logn("*****    S2F35 Unlink CEID: ", mCEID, "(", GetCeidName(mCEID), ") to Reports");
			}else{
				logn("*****    S2F35 Links CEID: ", mCEID, "(", GetCeidName(mCEID), ") to Reports");
				for(ii = 0;ii < GetCount(mReportList);ii = ii + 1){
					logn("*****          Report: ", Smart_Decode(mReportList[ii]));
				}				
			}
		}
	}
}

//// LinkEventReportAcknowledge ////
S2F36_Parser(S2F36_Reply){
	local mCmdAck;
	logn("*****    S2F36_LinkEventReportAcknowledge   *****");
	if(IsMessage(S2F36_Reply) && S2F36_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S2F36_Reply.text);
	mCmdAck = S2_Decode(S2F36_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Accepted Define Reports Request    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Out of space to perform S2F35 Request    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": Invalid Format in S2F35 Request    *****"); break;
		case 3: logn("*****    ", mCmdAck, ": S2F35 has one or more CEID links already defined    *****"); break;
		case 4: logn("*****    ", mCmdAck, ": S2F35 has one or more invalid CEID    *****"); break;
		case 5: logn("*****    ", mCmdAck, ": S2F35 has one or more invalid RPID    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// EnableOrDisableEventReport ////
S2F37_Request(isEnabled, CeIds){
	local mRequest, mReply;
	logn("*****    S2F37_EnableOrDisableEventReport   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 37;
	mRequest.wbit = 1;
	mRequest.text = S2_L(S2_BOOLEAN(isEnabled), S2_L(CeIds));
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}

S2F37_Parser(S2F37_Request){
	local i, ii, mDataList, mReportList, mReport, mVIDList, mVID, mCEED;
	mDataList = Decode(S2F37_Request.text);
	mReportList = Decode(mDataList[1]);

	if(IsEmptyList(mReportList)){
		mCEED = Smart_Decode(mDataList[0]);
		if(mCEED == 0){
			mRequest = "Disable";
		}else{
			mRequest = "Enable";
		}
		logn("*****    S2F37 Requests to ", mRequest, " all Event Links    *****");
		
	}
}

//// EnableOrDisableEventReportAcknowledge ////
S2F38_Parser(S2F38_Reply){
	local mCmdAck;
	logn("*****    S2F38_EnableOrDisableEventReportAcknowledge   *****");
	if(IsMessage(S2F38_Reply) && S2F38_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S2F38_Reply.text);
	mCmdAck = S2_Decode(S2F38_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Enable/Disable Events    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Denied - S2F37 Enable/Disable Events    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// Multi-blockInquire ////
S2F39_Request(){
	local mRequest, mReply;
	logn("*****    S2F39_Multi-blockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 39;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Multi-blockGrant ////
S2F40_Parser(S2F40_Reply){
	local mReplyInfo;
	logn("*****    S2F40_Multi-blockGrant   *****");
	if(IsMessage(S2F40_Reply) && S2F40_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F40_Reply.text);
}
//// HostCommandSend ////
S2F41_Request(Cmd, CmdInfo){
	local mRequest, mReply;
	logn("*****    S2F41_HostCommandSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 41;
	mRequest.wbit = 1;
	mRequest.text = S2_L(Cmd, CmdInfo);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// HostCommandAcknowledge ////
S2F42_Parser(S2F42_Reply){
	local mReplyInfo, mCmdAck;
	logn("*****    S2F42_HostCommandAcknowledge   *****");
	if(IsMessage(S2F42_Reply) && S2F42_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F42_Reply.text);
	mCmdAck = S2_Decode(mReplyInfo[0]);
	ParseHCAckCode(mCmdAck);
}
//// ConfigureSpooling ////
S2F43_Request(Messages, Streams){
	local mRequest, mReply;
	logn("*****    S2F43_ConfigureSpooling   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 43;
	mRequest.wbit = 1;
	if(isEmptyList(Messages) && isEmptyList(Streams))
		mRequest.text = S2_L();
	else
		mRequest.text = S2_L(Messages, S2_L(Streams));

	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ConfigureSpoolingAcknowledge ////
S2F44_Parser(S2F44_Reply){
	local mCmdAck, mReplyInfo, mStreamList;
	logn("*****    S2F44_ConfigureSpoolingAcknowledge   *****");
	if(IsMessage(S2F44_Reply) && S2F44_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F44_Reply.text);
	mCmdAck = S2_Decode(mReplyInfo[0]);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Spooling Request Accepted    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Denied S2F43 Spooling Request    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// DefineVariableLimitAttributes ////
S2F45_Request(){
	local mRequest, mReply;
	logn("*****    S2F45_DefineVariableLimitAttributes   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 45;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DefineVariableLimitAttributesAcknowledge ////
S2F46_Parser(S2F46_Reply){
	local mReplyInfo;
	logn("*****    S2F46_DefineVariableLimitAttributesAcknowledge   *****");
	if(IsMessage(S2F46_Reply) && S2F46_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F46_Reply.text);
}
//// VariableLimitAttributeRequest ////
S2F47_Request(){
	local mRequest, mReply;
	logn("*****    S2F47_VariableLimitAttributeRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 47;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// VariableLimitAttributeSend ////
S2F48_Parser(S2F48_Reply){
	local mReplyInfo;
	logn("*****    S2F48_VariableLimitAttributeSend   *****");
	if(IsMessage(S2F48_Reply) && S2F48_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F48_Reply.text);
}
//// EnhancedRemoteCommand ////
S2F49_Request(DataId, ObjSpec, Rcmd, CmdData){
	local mRequest, mReply;
	logn("*****    S2F49_EnhancedRemoteCommand   *****");
	mRequest = NewMessage();
	mRequest.stream = 2;
	mRequest.function = 49;
	mRequest.wbit = 1;
	mRequest.text = S2_L(DataId, ObjSpec, Rcmd, CmdData);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EnhancedRemoteCommandAcknowledge ////
S2F50_Parser(S2F50_Reply){
	local mCmdAck, mReplyInfo, mAckInfo;
	logn("*****    S2F50_EnhancedRemoteCommandAcknowledge   *****");
	if(IsMessage(S2F50_Reply) && S2F50_Reply.text == "")
		return;
	mReplyInfo = Decode(S2F50_Reply.text);
	mCmdAck = S2_Decode(mReplyInfo[0]);
	mAckInfo = Decode(mReplyInfo[1]);
	ParseCAACK(mCmdAck);
	if(mCmdAck > 0){
		if(!IsEmptyList(mAckInfo)){
			mAckInfo = Decode(mAckInfo[0]);
			mAckInfo = Decode(mAckInfo[0]);		
			logn("*****    ", mAckInfo, "    *****");			
		}		
	}
}
//// MaterialStatusRequest ////
S3F1_Request(){
	local mRequest, mReply;
	logn("*****    S3F1_MaterialStatusRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MaterialStatusData ////
S3F2_Parser(S3F2_Reply){
	local mReplyInfo;
	logn("*****    S3F2_MaterialStatusData   *****");
	if(IsMessage(S3F2_Reply) && S3F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F2_Reply.text);
}
//// TimetoCompletionData ////
S3F3_Request(){
	local mRequest, mReply;
	logn("*****    S3F3_TimetoCompletionData   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TimetoCompletionData ////
S3F4_Parser(S3F4_Reply){
	local mReplyInfo;
	logn("*****    S3F4_TimetoCompletionData   *****");
	if(IsMessage(S3F4_Reply) && S3F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F4_Reply.text);
}
//// MaterialFoundSend ////
S3F5_Request(){
	local mRequest, mReply;
	logn("*****    S3F5_MaterialFoundSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MaterialFoundAcknowledge ////
S3F6_Parser(S3F6_Reply){
	local mReplyInfo;
	logn("*****    S3F6_MaterialFoundAcknowledge   *****");
	if(IsMessage(S3F6_Reply) && S3F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F6_Reply.text);
}
//// MaterialLostSend ////
S3F7_Request(){
	local mRequest, mReply;
	logn("*****    S3F7_MaterialLostSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MaterialLostAck ////
S3F8_Parser(S3F8_Reply){
	local mReplyInfo;
	logn("*****    S3F8_MaterialLostAck   *****");
	if(IsMessage(S3F8_Reply) && S3F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F8_Reply.text);
}
//// MatlIDEquateSend ////
S3F9_Request(){
	local mRequest, mReply;
	logn("*****    S3F9_MatlIDEquateSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlIDEquateAck ////
S3F10_Parser(S3F10_Reply){
	local mReplyInfo;
	logn("*****    S3F10_MatlIDEquateAck   *****");
	if(IsMessage(S3F10_Reply) && S3F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F10_Reply.text);
}
//// MatlIDRequest ////
S3F11_Request(PortId){
	local mRequest, mReply;
	logn("*****    S3F11_MatlIDRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = S2_U1(PortId);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlIDRequestAck ////
S3F12_Parser(S3F12_Reply){
	local mReplyInfo;
	logn("*****    S3F12_MatlIDRequestAck   *****");
	if(IsMessage(S3F12_Reply) && S3F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F12_Reply.text);
}
//// MatlIDSend ////
S3F13_Request(){
	local mRequest, mReply;
	logn("*****    S3F13_MatlIDSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlIDAck ////
S3F14_Parser(S3F14_Reply){
	local mReplyInfo;
	logn("*****    S3F14_MatlIDAck   *****");
	if(IsMessage(S3F14_Reply) && S3F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F14_Reply.text);
}
//// MatlsMulti-blockInquire ////
S3F15_Request(){
	local mRequest, mReply;
	logn("*****    S3F15_MatlsMulti-blockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlsMulti-blockGrant ////
S3F16_Parser(S3F16_Reply){
	local mReplyInfo;
	logn("*****    S3F16_MatlsMulti-blockGrant   *****");
	if(IsMessage(S3F16_Reply) && S3F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F16_Reply.text);
}
//// CarrierActionRequest ////
S3F17_Request(DataId, CarrierAction, CarrierId, PortId, CarrierAttributes){
	local mRequest, mReply;
	logn("*****    S3F17_CarrierActionRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = S2_L(DataId, CarrierAction, CarrierId, PortId, CarrierAttributes);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CarrierActionAck ////
S3F18_Parser(S3F18_Reply){
	local mCmdAck, mReplyInfo, mErrorInfo;
	logn("*****    S3F18_CarrierActionAck   *****");
	if(IsMessage(S3F18_Reply) && S3F18_Reply.text == "")
		return;

/* 	mReplyInfo = Decode(S3F18_Reply.text);
	mCmdAck = Smart_Decode(mReplyInfo[0]);
	ParseCAACK(mCmdAck);
	//logn("mCmdAck: ", mCmdAck);
	logn("mReplyInfo: ", mReplyInfo);
	logn("count: ", GetCount(mErrorInfo));
	if(mCmdAck > 0){
		mErrorInfo = Decode(mReplyInfo[1]);
		if(!IsEmptyList(mErrorInfo)){
			for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
				mEachError = Decode(mErrorInfo[i]);
				logn("each: ", mEachError);
				logn("countEach: ", GetCount(mEachError));
				mEachErrorCode = Smart_Decode(mEachError[0]);
				mEachErrorText = Smart_Decode(mEachError[1]);
				logn("*****    ", mEachErrorText);
				ParseErrorCode(mEachErrorCode);
			}
			return (-1);
		}
		return (0);
	} */

	mReplyInfo = Decode(S3F18_Reply.text);
	mCmdAck = Smart_Decode(mReplyInfo[0]);
	ParseCAACK(mCmdAck);
	//logn("mCmdAck: ", mCmdAck);
	//logn("mReplyInfo: ", mReplyInfo);
	
	if(mCmdAck > 0){
		mErrorInfo = Decode(mReplyInfo[1]);
		//logn("mErrorInfo: ", mErrorInfo);
		//logn("count: ", GetCount(mErrorInfo));
		if(!IsEmptyList(mErrorInfo)){
			for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
				mEachError = Decode(mErrorInfo[i]);
				//logn("each: ", mEachError);
				//logn("countEach: ", GetCount(mEachError));
				mEachErrorCode = Smart_Decode(mEachError[0]);
				mEachErrorText = Smart_Decode(mEachError[1]);
				logn("*****    ", mEachErrorText);
				ParseErrorCode(mEachErrorCode);
			}
			return (0);
		}
		return (0);
	}
	
	return (1);
}
//// CancelAllCarrierOutReq ////
S3F19_Request(){
	local mRequest, mReply;
	logn("*****    S3F19_CancelAllCarrierOutReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CancelAllCarrierOutAck ////
S3F20_Parser(S3F20_Reply){
	logn("*****    S3F20_CancelAllCarrierOutAck   *****");
	if(IsMessage(S3F20_Reply) && S3F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F20_Reply.text);
}
//// PortGroupDefn ////
S3F21_Request(){
	local mRequest, mReply;
	logn("*****    S3F21_PortGroupDefn   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PortGroupDefnAck ////
S3F22_Parser(S3F22_Reply){
	logn("*****    S3F22_PortGroupDefnAck   *****");
	if(IsMessage(S3F22_Reply) && S3F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F22_Reply.text);
}
//// PortGroupActionReq ////
S3F23_Request(){
	local mRequest, mReply;
	logn("*****    S3F23_PortGroupActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PortGroupActionAck ////
S3F24_Parser(S3F24_Reply){
	logn("*****    S3F24_PortGroupActionAck   *****");
	if(IsMessage(S3F24_Reply) && S3F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F24_Reply.text);
}
//// PortActionReq ////
S3F25_Request(PortAction, PortId, Attributes){
	local mRequest, mReply;
	logn("*****    S3F25_PortActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = S2_L(PortAction, PortId, Attributes);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PortActionAck ////
S3F26_Parser(S3F26_Reply){
	local mCmdAck, mReplyInfo, mErrorInfo;
	logn("*****    S3F26_PortActionAck   *****");
	if(IsMessage(S3F26_Reply) && S3F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F26_Reply.text);
	mCmdAck = S2_Decode(mReplyInfo[0]);
	mErrorInfo = Decode(mReplyInfo[1]);
	ParseCAACK(mCmdAck);

	if(!IsEmptyList(mErrorInfo)){
		for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
			mEachError = Decode(mErrorInfo[i]);
			mEachErrorCode = Smart_Decode(mEachError[0]);
			mEachErrorText = Smart_Decode(mEachError[1]);
			logn("*****    ", mEachErrorText);
			ParseErrorCode(mEachErrorCode);
		}
	}
}
//// ChangeAccess ////
S3F27_Request(AccessMode, PortId){
	local mRequest, mReply;
	logn("*****    S3F27_ChangeAccess   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = S2_L(AccessMode, PortId);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ChangeAccessAck ////
S3F28_Parser(S3F28_Reply){
	local mCmdAck, mReplyInfo, mErrorInfo, mPortID;
	logn("*****    S3F28_ChangeAccessAck   *****");
	if(IsMessage(S3F28_Reply) && S3F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F28_Reply.text);
	mCmdAck = S2_Decode(mReplyInfo[0]);
	mErrorInfo = Decode(mReplyInfo[1]);
	ParseCAACK(mCmdAck);

	if(!IsEmptyList(mErrorInfo)){
		for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
			mEachError = Decode(mErrorInfo[i]);
			mPortID = Smart_Decode(mEachError[0]);
			logn("*****    PortID: ", mPortID);
			mEachErrorCode = Smart_Decode(mEachError[1]);
			mEachErrorText = Smart_Decode(mEachError[2]);
			logn("*****    ", mEachErrorText);
			ParseErrorCode(mEachErrorCode);
		}
	}
}
//// CarrierTagReadReq ////
S3F29_Request(){
	local mRequest, mReply;
	logn("*****    S3F29_CarrierTagReadReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CarrierTagReadData ////
S3F30_Parser(S3F30_Reply){
	logn("*****    S3F30_CarrierTagReadData   *****");
	if(IsMessage(S3F30_Reply) && S3F30_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F30_Reply.text);
}
//// CarrierTagWriteData ////
S3F31_Request(){
	local mRequest, mReply;
	logn("*****    S3F31_CarrierTagWriteData   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 31;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CarrierTagWriteAck ////
S3F32_Parser(S3F32_Reply){
	logn("*****    S3F32_CarrierTagWriteAck   *****");
	if(IsMessage(S3F32_Reply) && S3F32_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F32_Reply.text);
}
//// CancelAllPodOutReq ////
S3F33_Request(){
	local mRequest, mReply;
	logn("*****    S3F33_CancelAllPodOutReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 33;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CancelAllPodOutAck ////
S3F34_Parser(S3F34_Reply){
	logn("*****    S3F34_CancelAllPodOutAck   *****");
	if(IsMessage(S3F34_Reply) && S3F34_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F34_Reply.text);
}
//// ReticleTransferJobReq ////
S3F35_Request(){
	local mRequest, mReply;
	logn("*****    S3F35_ReticleTransferJobReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 3;
	mRequest.function = 35;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReticleTransferJobAck ////
S3F36_Parser(S3F36_Reply){
	logn("*****    S3F36_ReticleTransferJobAck   *****");
	if(IsMessage(S3F36_Reply) && S3F36_Reply.text == "")
		return;
	mReplyInfo = Decode(S3F36_Reply.text);
}
//// ReadytoSendMaterials ////
S4F1_Request(){
	local mRequest, mReply;
	logn("*****    S4F1_ReadytoSendMaterials   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReadytoSendAck ////
S4F2_Parser(S4F2_Reply){
	logn("*****    S4F2_ReadytoSendAck   *****");
	if(IsMessage(S4F2_Reply) && S4F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F2_Reply.text);
}
//// RequesttoReceive ////
S4F17_Request(){
	local mRequest, mReply;
	logn("*****    S4F17_RequesttoReceive   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RequesttoReceiveAck ////
S4F18_Parser(S4F18_Reply){
	logn("*****    S4F18_RequesttoReceiveAck   *****");
	if(IsMessage(S4F18_Reply) && S4F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F18_Reply.text);
}
//// TransferJobCreate ////
S4F19_Request(){
	local mRequest, mReply;
	logn("*****    S4F19_TransferJobCreate   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TransferJobAcknowledge ////
S4F20_Parser(S4F20_Reply){
	logn("*****    S4F20_TransferJobAcknowledge   *****");
	if(IsMessage(S4F20_Reply) && S4F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F20_Reply.text);
}
//// TransferJobCommand ////
S4F21_Request(){
	local mRequest, mReply;
	logn("*****    S4F21_TransferJobCommand   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TransferJobCommandAck ////
S4F22_Parser(S4F22_Reply){
	logn("*****    S4F22_TransferJobCommandAck   *****");
	if(IsMessage(S4F22_Reply) && S4F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F22_Reply.text);
}
//// TransferCommandAlert ////
S4F23_Request(){
	local mRequest, mReply;
	logn("*****    S4F23_TransferCommandAlert   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TransferAlertAck ////
S4F24_Parser(S4F24_Reply){
	logn("*****    S4F24_TransferAlertAck   *****");
	if(IsMessage(S4F24_Reply) && S4F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F24_Reply.text);
}
//// Multi-blockInquire ////
S4F25_Request(){
	local mRequest, mReply;
	logn("*****    S4F25_Multi-blockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 4;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Multi-blockGrant ////
S4F26_Parser(S4F26_Reply){
	logn("*****    S4F26_Multi-blockGrant   *****");
	if(IsMessage(S4F26_Reply) && S4F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S4F26_Reply.text);
}
//// AlarmReportSend ////
S5F1_Request(){
	local mRequest, mReply;
	logn("*****    S5F1_AlarmReportSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AlarmReportAck ////
S5F2_Parser(S5F2_Reply){
	logn("*****    S5F2_AlarmReportAck   *****");
	if(IsMessage(S5F2_Reply) && S5F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F2_Reply.text);
}
//// EnableOrDisableAlarmSend ////
S5F3_Request(isEnabled, ALID){
	local mRequest, mReply;
	logn("*****    S5F3_EnableOrDisableAlarmSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = S2_L(isEnabled, ALID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EnableOrDisableAlarmAck ////
S5F4_Parser(S5F4_Reply){
	local mCmdAck;
	logn("*****    S5F4_EnableOrDisableAlarmAck   *****");
	if(IsMessage(S5F4_Reply) && S5F4_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S5F4_Reply.text);
	mCmdAck = S2_Decode(S5F4_Reply.text);
	switch(mCmdAck){
	case 0:
		logn("*****    ", mCmdAck, ": Ok - Enable/Disable Alarms    *****");
		break;
	default:
		logn("*****    ", mCmdAck, ": Unknown Issue!    *****");
		break;
	}
}
//// ListAlarmsRequest ////
S5F5_Request(ALIDs){
	local mRequest, mReply;
	logn("*****    S5F5_ListAlarmsRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = ALIDs;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ListAlarmData ////
S5F6_Parser(S5F6_Reply){
	logn("*****    S5F6_ListAlarmData   *****");
	if(IsMessage(S5F6_Reply) && S5F6_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S5F6_Reply.text);
	logn("*****    There're ", GetCount(Decode(S5F6_Reply.text)), " Alarms");
}
//// ListEnabledAlarmRequest ////
S5F7_Request(){
	local mRequest, mReply;
	logn("*****    S5F7_ListEnabledAlarmRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ListEnabledAlarmData ////
S5F8_Parser(S5F8_Reply){
	local mReplyInfo;
	logn("*****    S5F8_ListEnabledAlarmData   *****");
	if(IsMessage(S5F8_Reply) && S5F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F8_Reply.text);
	logn("*****    There're ", GetCount(Decode(mReplyInfo)), " Alarms");
}
//// ExceptionPostNotify ////
S5F9_Request(){
	local mRequest, mReply;
	logn("*****    S5F9_ExceptionPostNotify   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ExceptionPostConfirm ////
S5F10_Parser(S5F10_Reply){
	logn("*****    S5F10_ExceptionPostConfirm   *****");
	if(IsMessage(S5F10_Reply) && S5F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F10_Reply.text);
}
//// ExceptionClearNotify ////
S5F11_Request(){
	local mRequest, mReply;
	logn("*****    S5F11_ExceptionClearNotify   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ExceptionClearConfirm ////
S5F12_Parser(S5F12_Reply){
	logn("*****    S5F12_ExceptionClearConfirm   *****");
	if(IsMessage(S5F12_Reply) && S5F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F12_Reply.text);
}
//// ExceptionRecoverRequest ////
S5F13_Request(){
	local mRequest, mReply;
	logn("*****    S5F13_ExceptionRecoverRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ExceptionRecoverAcknowledge ////
S5F14_Parser(S5F14_Reply){
	logn("*****    S5F14_ExceptionRecoverAcknowledge   *****");
	if(IsMessage(S5F14_Reply) && S5F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F14_Reply.text);
}
//// ExceptionRecoveryCompleteNotify ////
S5F15_Request(){
	local mRequest, mReply;
	logn("*****    S5F15_ExceptionRecoveryCompleteNotify   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ExceptionRecoveryCompleteConfirm ////
S5F16_Parser(S5F16_Reply){
	logn("*****    S5F16_ExceptionRecoveryCompleteConfirm   *****");
	if(IsMessage(S5F16_Reply) && S5F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F16_Reply.text);
}
//// ExceptionRecoveryAbortRequest ////
S5F17_Request(){
	local mRequest, mReply;
	logn("*****    S5F17_ExceptionRecoveryAbortRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 5;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ExceptionRecoveryAbortAck ////
S5F18_Parser(S5F18_Reply){
	logn("*****    S5F18_ExceptionRecoveryAbortAck   *****");
	if(IsMessage(S5F18_Reply) && S5F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S5F18_Reply.text);
}
//// TraceDataSend ////
S6F1_Request(){
	local mRequest, mReply;
	logn("*****    S6F1_TraceDataSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceDataAck ////
S6F2_Parser(S6F2_Reply){
	logn("*****    S6F2_TraceDataAck   *****");
	if(IsMessage(S6F2_Reply) && S6F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F2_Reply.text);
}
//// DiscreteVariableDataSend ////
S6F3_Request(){
	local mRequest, mReply;
	logn("*****    S6F3_DiscreteVariableDataSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DiscreteVariableDataSendAck ////
S6F4_Parser(S6F4_Reply){
	logn("*****    S6F4_DiscreteVariableDataSendAck   *****");
	if(IsMessage(S6F4_Reply) && S6F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F4_Reply.text);
}
//// Multi-blockDataSendInquire ////
S6F5_Request(){
	local mRequest, mReply;
	logn("*****    S6F5_Multi-blockDataSendInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Multi-blockGrant ////
S6F6_Parser(S6F6_Reply){
	logn("*****    S6F6_Multi-blockGrant   *****");
	if(IsMessage(S6F6_Reply) && S6F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F6_Reply.text);
}
//// DataTransferRequest ////
S6F7_Request(){
	local mRequest, mReply;
	logn("*****    S6F7_DataTransferRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DataTransferData ////
S6F8_Parser(S6F8_Reply){
	logn("*****    S6F8_DataTransferData   *****");
	if(IsMessage(S6F8_Reply) && S6F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F8_Reply.text);
}
//// FormattedVariableSend ////
S6F9_Request(){
	local mRequest, mReply;
	logn("*****    S6F9_FormattedVariableSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// FormattedVariableAck ////
S6F10_Parser(S6F10_Reply){
	logn("*****    S6F10_FormattedVariableAck   *****");
	if(IsMessage(S6F10_Reply) && S6F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F10_Reply.text);
}
//// EventReportSend ////
S6F11_Request(){
	local mRequest, mReply;
	logn("*****    S6F11_EventReportSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EventReportAck ////
S6F12_Parser(S6F12_Reply){
	local mS6F11List, mEachReportList, mReportSize, mReportId, mEachValueList, mValueListSize, mValueData, mValue, mValueSize, mValueList;
	local i, i1, i2, ii, iii, mVid, mVidName, mVidValue, mStates, mConvertedValue, mSubValue, state, subStr, vidStructValue, mPossibleValue;
	local mCeIdStruct, mRptStruct, mVidStruct, mS6F11Struct, mRunObj, mVidSizeFromDict, RPTIDStruct, mOldVal, mNewVal, mOldValName, mNewValName;
	local mFound, mDash, mCJID, mFoundCJ, mDateTime, mReport, mData, mVidVal, mStatus; 				
	logn("*****   S6F12_EventReportAck   *****");	
	if(IsMessage(S6F12_Reply) && S6F12_Reply.text == "")
		return;
	
	if(RPTIDS_DICT && CEIDS_DICT && VIDS_DICT){
		mS6F11Struct = NewStructured(S6F11_STRUCT);
		mCeIdStruct = NewStructured(CEID_STRUCT);
		mRptStruct = NewStructured(RPTID_STRUCT);
		mVidStruct = NewStructured(VID_STRUCT);

		mS6F11List = Decode(S6F12_Reply.Text);
		mCeIdStruct.ceid = ToAscii(Smart_Decode(mS6F11List[1])); //Needs string number for DictionaryLookup

		if(DictionaryLookup(mCeIdStruct, CEIDS_DICT)){	//status found
			logn("*****     CeId:", mCeIdStruct.ceid, " (", DictionaryLookup(mCeIdStruct, CEIDS_DICT).name, ")");
		}else{
			logn("*****     CeId:", mCeIdStruct.ceid, " is Unknown   *****");
		}

		mS6F11Struct.dataId = S2_Decode(mS6F11List[0]);
		mS6F11Struct.CeId = Smart_Decode(mS6F11List[1]); //Actual integer CEID reported by Tool
		mS6F11Struct.reportList = Decode(mS6F11List[2]); //Actual List of Reports reported by Tool
		mReportSize = GetCount(mS6F11Struct.reportList); //How many reports?
		logn("*****   Number of Reports = ", mReportSize);

		for(i = 0;i < mReportSize;i = i + 1){ //Now digging the data in each report
			mEachReportList = Decode(mS6F11Struct.reportList[i]);
			mReportId = ToAscii(Smart_Decode(mEachReportList[0])); //Needs string number for DictionaryLookup
			mEachValueList = Decode(mEachReportList[1]);
			mValueListSize = GetCount(mEachValueList);
			mRptStruct.rptid = mReportId;
			mValueList = NewList();
			RPTIDStruct = DictionaryLookup(mRptStruct, RPTIDS_DICT);
			if(RPTIDStruct){	//Found the Report
				logn("*****     ReportId:", mReportId, " (", RPTIDStruct.rptname, ")");

				for(ii = 0;ii < mValueListSize;ii = ii + 1){
					mValueData = mEachValueList[ii]; //No decode this data to find whether its a B type to handle differently
					//logn("mValueData: ", mValueData);
					mVid = RPTIDStruct.vids[ii]; //Specific vid in its list
					//logn("mVid: ", mVid);
					mVidName = RPTIDStruct.vidnames[ii];
					//logn("mVidName: ", mVidName);
					mVidStruct.vid = mVid;
					mFound = DictionaryLookup(mVidStruct, VIDS_DICT);
					mVidValue = Smart_Decode(mValueData);
					if(mReportId == "180240"){
						mCJID = mVidValue;
					}
					
					//logn("mVidValue: ", mVidValue);
					if(mFound){ //If the VID is the pre-defined Value/Name VID then we'll try to decode the value  
						mVidName = mFound.name;
						mOldVal = mFound.value;
						mNewVal = mVidValue;
						//logn("mNewVal: ", mNewVal, " mOldVal: ", mOldVal);
						vidStructValue = mFound.valnames;
						if(vidStructValue != nil){//} && !isEmptyList(vidStructValue)){ //This VID has pre-defined ValueName pair
							mOldValName = mNewValName = "UNDEF";

							for(i2 = 0;i2 < GetCount(vidStructValue);i2 = i2 + 1){
								mPossibleValue = vidStructValue[i2];
								//logn("mPossibleValue: ", mPossibleValue);
								mDash = FindString(mPossibleValue, "=");
								//logn("mDash: ", mDash);
								if(mDash.Count > 0){
									subStr = Substring(mPossibleValue, 0, mDash.Start);
									//logn("subStr: ", subStr, " AND mOldVal: ", mOldVal, " AND mNewVal: ", mNewVal);
									if(mNewValName == "UNDEF"){
										if(subStr == mNewVal || AtoI(subStr) == mNewVal){
											mNewValName = mPossibleValue; // Get more detail for the new data to display
										}
									}
									if(mOldValName == "UNDEF"){
										if(subStr == mOldVal || AtoI(subStr) == mOldVal){
											mOldValName = mPossibleValue; // Get more detail for the old data to display
										}
									}
								}else{ // Something unexpected we handle it too 
									logn("*****      VIDy:", mVid, " (", mVidName, ")=<", mVidValue, ">");
									if(mOldVal != nil && mOldVal != mNewVal){
										logn("*****           OLD: (", mOldVal, ")", " NEW: (", mNewVal, ")");
									}									
								}
							}
							
							if (mNewValName != "UNDEF"){
								logn("*****      VID:", mVid, " (", mVidName, ")=<", mNewVal, ">", "(", mNewValName, ")");
							}else{
								logn("*****      VID:", mVid, " (", mVidName, ")=<", mNewVal, ">");
							}		
							
							//Other than first time we might have new data similar or different with old data
							if(mOldVal != nil && mOldVal != mNewVal){ 
								logn("*****          OLD: (", mOldValName, ")", " NEW: (", mNewValName, ")");
							}
						}else{ //This VID does not have pre-defined ValueName pair		
							   //logn("Count mValueData = ", GetCount(mValueData));
							if(GetCount(mValueData) > 1){ //B type in a list must have a special handle							
								//logn("Format: ", GetFormat(mValueData));
								if(GetFormat(mValueData) == "B"){
									mNewVal = S2_Decode(mValueData);
								}else if(GetFormat(mValueData) == "L"){
									mNewVal = Smart_Decode(mValueData);
								}
							}

							logn("*****      VID:", mVid, " (", mVidName, ")=<", mNewVal, ">");
							if(mOldVal != nil && mOldVal != mNewVal){ //First time saving value won't show this logging line
								logn("*****          OLD: (", mOldVal, ")", " NEW: (", mNewVal, ")");
							}						
						}
					
						mFound.value = mNewVal;
						DictionaryInsert(mFound, VIDS_DICT);
					}else{ //May be found the vid specified in ConvertedEventXp.txt but not in Vids.txt
						logn("*****      VIDx:", mVid, " (", mVidName, ")=<", mNewVal, ">"); //, " VID NOT in DBInfo.txt");
					}
				}
			}else
				logn("*****     ReportId:", mRptStruct.rptid, " is Unknown     *****");
		}

		if(!IsEmptyList(mS6F11Struct.reportList)){
			if(CUSRPT){
				logn("CUSRPT: ", CUSRPT);
				switch(mCeIdStruct.ceid){
					case "69648": //EquipmentOFF-LINE
					case "69664": //ControlStateLOCAL
					case "400000015": //Mecca Event	
						CTRLREMOTE = 0;
						break;
					case "69680":	//ControlStateREMOTE
					case "400000016": //Mecca Event	
						mReport 	= Decode(mS6F11Struct.reportList[1]);					
						mReportId 	= S2_Decode(mReport[0]);
						if(mReportId == 131104){
							mData 	= Decode(mReport[1])[0];
							mVidVal = S2_Decode(mData);
							mStatus = VerifyControlState(mVidVal);
							logn("*****************************************************");
							logn(mStatus);
							logn("*****************************************************");
						}
						CTRLREMOTE = 1;	
						DefaultEventSubscription();
						_CarrierLocationInfo();
						
						if(TOOLTYPE == "ALD"){
							SetPulsarHigLeakCheckTime(10);
							SetPulsarPumpTimeOut(60);								
						}
						if(UPDATERECDIR == 0){
							_UpdateRecipeDirectories();
							_UpdateProcessRecipeDir();
							UPDATERECDIR = 1;
						}	
						if(AreChambersReady()){
							INITIALIZE = 1;
						}						
						break;				
				}
			}else{
				logn("Run DefaultEventHandler now ...");
				run(DefaultEventHandler, NewList(mS6F11Struct));
			}			
		}else{ //Mecca
			logn("Mecca Events: ", mCeIdStruct.ceid);
			switch(mCeIdStruct.ceid){
				case "400000015": //Mecca Event	
					CTRLREMOTE = 0;
					break;
				case "400000016": //Mecca Event		
					CTRLREMOTE = 1;
					break;				
			}				
		}	
	}

	//wait(NewTimer(1));	//sleep for 1 sec
	if(S6F12_Reply.wbit == 1){
		S6F11WBIT = 1;
		SendReply(S6F12_Reply, S2_B(0));
	}else{
		logn("*****************************************************************");
		logn("*****    S6F11 W BIT is OFF. Host Not Replying with F6F12    ****");
		logn("*****************************************************************");
		S6F11WBIT = 0;
	}
}
//// AnnotatedEventReportSend ////
S6F13_Request(){
	local mRequest, mReply;
	logn("*****    S6F13_AnnotatedEventReportSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AnnotatedEventReportAck ////
S6F14_Parser(S6F14_Reply){
	logn("*****    S6F14_AnnotatedEventReportAck   *****");
	if(IsMessage(S6F14_Reply) && S6F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F14_Reply.text);
}
//// EventReportRequest ////
S6F15_Request(CEID){
	local mRequest, mReply;
	logn("*****    S6F15_EventReportRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = S2_U4(CEID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// EventReportData ////
S6F16_Parser(S6F16_Reply){
	local mReplyInfo, mReportList;
	logn("*****    S6F16_EventReportData   *****");
	if(IsMessage(S6F16_Reply) && S6F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F16_Reply.text);
	mReportList = Decode(mS6F16List[2]);
	logn("*****    There're ", GetCount(mReportList), " Reports");
}
//// AnnotatedEventReportRequest ////
S6F17_Request(){
	local mRequest, mReply;
	logn("*****    S6F17_AnnotatedEventReportRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AnnotatedEventReportData ////
S6F18_Parser(S6F18_Reply){
	local mReplyInfo;
	logn("*****    S6F18_AnnotatedEventReportData   *****");
	if(IsMessage(S6F18_Reply) && S6F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F18_Reply.text);
}
//// IndividualReportRequest ////
S6F19_Request(ReportId){
	local mRequest, mReply;
	logn("*****    S6F19_IndividualReportRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = S2_U4(ReportId);;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// IndividualReportData ////
S6F20_Parser(S6F20_Reply){
	local mReplyInfo;
	logn("*****    S6F20_IndividualReportData   *****");
	if(IsMessage(S6F20_Reply) && S6F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F20_Reply.text);
}
//// AnnotatedIndividualReportRequest ////
S6F21_Request(){
	local mRequest, mReply;
	logn("*****    S6F21_AnnotatedIndividualReportRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AnnotatedIndividualReportData ////
S6F22_Parser(S6F22_Reply){
	local mReplyInfo;
	logn("*****    S6F22_AnnotatedIndividualReportData   *****");
	if(IsMessage(S6F22_Reply) && S6F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F22_Reply.text);
}
//// RequestorPurgeSpooledData ////
S6F23_Request(RCode){
	local mRequest, mReply;
	logn("*****    S6F23_RequestorPurgeSpooledData   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = S2_U1(RCode);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RequestorPurgeSpooledDataAck ////
S6F24_Parser(S6F24_Reply){
	local mCmdAck;
	logn("*****    S6F24_RequestorPurgeSpooledDataAck   *****");
	if(IsMessage(S6F24_Reply) && S6F24_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S6F24_Reply.text);
	mCmdAck = S2_Decode(S6F24_Reply.text);
	switch(mCmdAck){
		case 0: logn("*****    ", mCmdAck, ": Ok - Request or Purge Spooled Data    *****"); break;
		case 1: logn("*****    ", mCmdAck, ": Tool is currently Busy    *****"); break;
		case 2: logn("*****    ", mCmdAck, ": No Spool Data    *****"); break;
		default: logn("*****    ", mCmdAck, ": Unknown Issue!    *****"); break;	
	}
}
//// NotificationReportSend ////
S6F25_Request(){
	local mRequest, mReply;
	logn("*****    S6F25_NotificationReportSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NotificationReportSendAck ////
S6F26_Parser(S6F26_Reply){
	local mReplyInfo;
	logn("*****    S6F26_NotificationReportSendAck   *****");
	if(IsMessage(S6F26_Reply) && S6F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F26_Reply.text);
}
//// TraceReportSend ////
S6F27_Request(){
	local mRequest, mReply;
	logn("*****    S6F27_TraceReportSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceReportSendAck ////
S6F28_Parser(S6F28_Reply){
	local mReplyInfo;
	logn("*****    S6F28_TraceReportSendAck   *****");
	if(IsMessage(S6F28_Reply) && S6F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F28_Reply.text);
}
//// TraceReportRequest ////
S6F29_Request(){
	local mRequest, mReply;
	logn("*****    S6F29_TraceReportRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 6;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceReportData ////
S6F30_Parser(S6F30_Reply){
	local mReplyInfo;
	logn("*****    S6F30_TraceReportData   *****");
	if(IsMessage(S6F30_Reply) && S6F30_Reply.text == "")
		return;
	mReplyInfo = Decode(S6F30_Reply.text);
}
//// ProcessProgramLoadInquire ////
S7F1_Request(PPID, Length){
	local mRequest, mReply;
	logn("*****    S7F1_ProcessProgramLoadInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = S2_L(PPID, Length);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramLoadGrant ////
S7F2_Parser(S7F2_Reply){
	local mPPGNTCode;
	logn("*****    S7F2_ProcessProgramLoadGrant   *****");
	if(IsMessage(S7F2_Reply) && S7F2_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F2_Reply.text);
	mPPGNTCode = Smart_Decode(S7F2_Reply.text);
	ParsePPGNT(mPPGNTCode);
}
//// ProcessProgramSend ////
S7F3_Request(SecsData){
	local mRequest, mReply;
	logn("*****    S7F3_ProcessProgramSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = SecsData;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramSendAcknowledge ////
S7F4_Parser(S7F4_Reply){
	local mCmdAck;
	logn("*****    S7F4_ProcessProgramSendAcknowledge   *****");
	if(IsMessage(S7F4_Reply) && S7F4_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F4_Reply.text);
	mCmdAck = S2_Decode(S7F4_Reply.text);
	ParseACKC7(mCmdAck);
}
//// ProcessProgramRequest ////
S7F5_Request(PPID){
	local mRequest, mReply;
	logn("*****    S7F5_ProcessProgramRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = S2_A(PPID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramData ////
S7F6_Parser(S7F6_Reply){
	local mS7F6List;
	logn("*****    S7F6_ProcessProgramData   *****");
	if(IsMessage(S7F6_Reply) && S7F6_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F6_Reply.text);
	mS7F6List = Decode(S7F6_Reply.Text);
	if(IsEmptyList(mS7F6List))
		logn("*****    ERROR: Empty Response! Check Recipe on the Tool    *****");
	else
		logn("*****    Your Unformatted Recipe was Uploaded Successfully    *****");
}
//// ProcessProgramIDRequest ////
S7F7_Request(MID){
	local mRequest, mReply;
	logn("*****    S7F7_ProcessProgramIDRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = S2_A(MID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramIDData ////
S7F8_Parser(S7F8_Reply){
	local mReplyInfo;
	logn("*****    S7F8_ProcessProgramIDData   *****");
	if(IsMessage(S7F8_Reply) && S7F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F8_Reply.text);
}
//// MatlOrProcessMatrixRequest ////
S7F9_Request(){
	local mRequest, mReply;
	logn("*****    S7F9_MatlOrProcessMatrixRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlOrProcessMatrixData ////
S7F10_Parser(S7F10_Reply){
	local mReplyInfo;
	logn("*****    S7F10_MatlOrProcessMatrixData   *****");
	if(IsMessage(S7F10_Reply) && S7F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F10_Reply.text);
}
//// MatlOrProcessMatrixUpdateSend ////
S7F11_Request(){
	local mRequest, mReply;
	logn("*****    S7F11_MatlOrProcessMatrixUpdateSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatlOrProcessMatrixUpdateAck ////
S7F12_Parser(S7F12_Reply){
	local mReplyInfo;
	logn("*****    S7F12_MatlOrProcessMatrixUpdateAck   *****");
	if(IsMessage(S7F12_Reply) && S7F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F12_Reply.text);
}
//// MatlOrProcessMatrixDeleteEntrySend ////
S7F13_Request(){
	local mRequest, mReply;
	logn("*****    S7F13_MatlOrProcessMatrixDeleteEntrySend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DeleteMatlOrProcessMatrixEntryAcknowledge ////
S7F14_Parser(S7F14_Reply){
	local mReplyInfo;
	logn("*****    S7F14_DeleteMatlOrProcessMatrixEntryAcknowledge   *****");
	if(IsMessage(S7F14_Reply) && S7F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F14_Reply.text);
}
//// MatrixModeSelectSend ////
S7F15_Request(){
	local mRequest, mReply;
	logn("*****    S7F15_MatrixModeSelectSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MatrixModeSelectAck ////
S7F16_Parser(S7F16_Reply){
	local mReplyInfo;
	logn("*****    S7F16_MatrixModeSelectAck   *****");
	if(IsMessage(S7F16_Reply) && S7F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F16_Reply.text);
}
//// DeleteProcessProgramSend ////
S7F17_Request(PPID){
	local mRequest, mReply;
	logn("*****    S7F17_DeleteProcessProgramSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = S2_L(PPID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DeleteProcessProgramAcknowledge ////
S7F18_Parser(S7F18_Reply){
	local mCmdAck;
	logn("*****    S7F18_DeleteProcessProgramAcknowledge   *****");
	if(IsMessage(S7F18_Reply) && S7F18_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F18_Reply.text);
	mCmdAck = S2_Decode(S7F18_Reply.text);
	ParseACKC7(mCmdAck);
}
//// CurrentProcessProgramDirRequest ////
S7F19_Request(){
	local mRequest, mReply;
	logn("*****    S7F19_CurrentProcessProgramDirRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CurrentProcessProgramData ////
S7F20_Parser(S7F20_Reply){
	logn("*****    S7F20_CurrentProcessProgramData   *****");
	if(IsMessage(S7F20_Reply) && S7F20_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F20_Reply.text);
	logn("*****    There're ", GetCount(Decode(S7F20_Reply.text)), " Recipes");
}
//// ProcessCapabilitiesRequest ////
S7F21_Request(){
	local mRequest, mReply;
	logn("*****    S7F21_ProcessCapabilitiesRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessCapabilitiesData ////
S7F22_Parser(S7F22_Reply){
	local mReplyInfo;
	logn("*****    S7F22_ProcessCapabilitiesData   *****");
	if(IsMessage(S7F22_Reply) && S7F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F22_Reply.text);
}
//// FormattedProcessProgramSend ////
S7F23_Request(SecsData){
	local mRequest, mReply;
	logn("*****    S7F23_FormattedProcessProgramSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = SecsData;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// FormattedProcessProgramAcknowledge ////
S7F24_Parser(S7F24_Reply){
	local mCmdAck;
	logn("*****    S7F24_FormattedProcessProgramAcknowledge   *****");
	if(IsMessage(S7F24_Reply) && S7F24_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F24_Reply.text);
	mCmdAck = S2_Decode(S7F24_Reply.text);
	ParseACKC7(mCmdAck);
}
//// FormattedProcessProgramRequest ////
S7F25_Request(PPID){
	local mRequest, mReply;
	logn("*****    S7F25_FormattedProcessProgramRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = S2_A(PPID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// FormattedProcessProgramData ////
S7F26_Parser(S7F26_Reply){
	local mReplyInfo;
	logn("*****    S7F26_FormattedProcessProgramData   *****");
	if(IsMessage(S7F26_Reply) && S7F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F26_Reply.text);
	if(IsEmptyList(mReplyInfo)){
		logn("*****    ERROR: Empty Response! Check Recipe on the Tool    *****");
	}else{
		logn("*****    Your Formatted Recipe was Uploaded Successfully    *****");
	}
}
//// ProcessProgramVerification Only Tool is the Sender and Host is the Receiver ////
S7F27_Parser(S7F27_Received){
	local mReplyInfo, mRecipe, mInfo, mStatusList, mStatus;
	logn("*****    S7F27_ProcessProgramVerification   *****");
	if(IsMessage(S7F27_Received) && S7F27_Received.text == "")
		return;
	mReplyInfo = Decode(S7F27_Received.text);
	mRecipe = Smart_Decode(mReplyInfo[0]);
	mInfo = Decode(mReplyInfo[1]);
	
	if(!mRecipe){
		mStatusList = Decode(mInfo[0]);
		mStatus = Smart_Decode(mStatusList[2]);		
		//logn("*****    Recommend to verify content of Recipe!    *****");
	}else{
		logn("*****    Verified Recipe: ", mRecipe, "    *****");
		
		if(GetCount(mInfo) == 0){
			mStatus = "Great! Verification Success!";
		}
	}
	
	logn("*****    Status: ", mStatus, "    *****");
}
//// ProcessProgramVerificationAck Only Host is the Sender and Tool is the Receiver ////
S7F28_Reply(S7F27_Received){
	local mReply;
	logn("*****    S7F28_ProcessProgramVerificationAck   *****");
	mReply = NewMessage();
	mReply.stream = 7;
	mReply.function = 28;
	mReply.wbit = 0;
	SendReply(S7F27_Received, mReply);
}
//// ProcessProgramVerificationInquire ////
S7F29_Request(Length){
	local mRequest, mReply;
	logn("*****    S7F29_ProcessProgramVerificationInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = S2_U4(Length);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramVerificationGrant ////
S7F30_Parser(S7F30_Reply){
	local mDataLength, mPPGNTCode;
	logn("*****    S7F30_ProcessProgramVerificationGrant   *****");
	if(IsMessage(S7F30_Reply) && S7F30_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F30_Reply.text);
	mDataLength = S2_Decode(S7F30_Reply.text);
	logn("*****    Process Program Inquired: ", mDataLength, " bytes    *****");
	mPPGNTCode = Smart_Decode(S7F30_Reply.text);
	ParsePPGNT(mPPGNTCode);
}
//// VerificationRequestSend ////
S7F31_Request(){
	local mRequest, mReply;
	logn("*****    S7F31_VerificationRequestSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 31;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// VerificationRequestAcknowledge ////
S7F32_Parser(S7F32_Reply){
	local mReplyInfo;
	logn("*****    S7F32_VerificationRequestAcknowledge   *****");
	if(IsMessage(S7F32_Reply) && S7F32_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F32_Reply.text);
}
//// ProcessProgramAvailableRequest ////
S7F33_Request(){
	local mRequest, mReply;
	logn("*****    S7F33_ProcessProgramAvailableRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 33;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramAvailabilityData ////
S7F34_Parser(S7F34_Reply){
	local mReplyInfo;
	logn("*****    S7F34_ProcessProgramAvailabilityData   *****");
	if(IsMessage(S7F34_Reply) && S7F34_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F34_Reply.text);
}
//// ProcessProgramforMIDRequest ////
S7F35_Request(){
	local mRequest, mReply;
	logn("*****    S7F35_ProcessProgramforMIDRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 35;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessProgramforMIDData ////
S7F36_Parser(S7F36_Reply){
	local mReplyInfo;
	logn("*****    S7F36_ProcessProgramforMIDData   *****");
	if(IsMessage(S7F36_Reply) && S7F36_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F36_Reply.text);
}
//// LargePPSend ////
S7F37_Request(){
	local mRequest, mReply;
	logn("*****    S7F37_LargePPSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 37;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargePPSendAck ////
S7F38_Parser(S7F38_Reply){
	local mReplyInfo;
	logn("*****    S7F38_LargePPSendAck   *****");
	if(IsMessage(S7F38_Reply) && S7F38_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F38_Reply.text);
}
//// LargeFormattedPPSend ////
S7F39_Request(){
	local mRequest, mReply;
	logn("*****    S7F39_LargeFormattedPPSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 39;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargeFormattedPPAck ////
S7F40_Parser(S7F40_Reply){
	local mReplyInfo;
	logn("*****    S7F40_LargeFormattedPPAck   *****");
	if(IsMessage(S7F40_Reply) && S7F40_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F40_Reply.text);
}
//// LargePPReq ////
S7F41_Request(){
	local mRequest, mReply;
	logn("*****    S7F41_LargePPReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 41;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargePPReqAck ////
S7F42_Parser(S7F42_Reply){
	local mReplyInfo;
	logn("*****    S7F42_LargePPReqAck   *****");
	if(IsMessage(S7F42_Reply) && S7F42_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F42_Reply.text);
}
//// LargeFormattedPPReq ////
S7F43_Request(){
	local mRequest, mReply;
	logn("*****    S7F43_LargeFormattedPPReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 43;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargeFormattedPPReqAck ////
S7F44_Parser(S7F44_Reply){
	local mReplyInfo;
	logn("*****    S7F44_LargeFormattedPPReqAck   *****");
	if(IsMessage(S7F44_Reply) && S7F44_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F44_Reply.text);
}
//// CurrentProcessRecipesDirectoryRequest ////
S7F71_Request(){
	local mRequest, mReply;
	logn("*****    S7F71_CurrentProcessRecipesDirectoryRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 71;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CurrentProcessRecipesDirectoryReply ////
S7F72_Parser(S7F72_Reply){
	logn("*****    S7F72_CurrentProcessRecipesDirectoryResponse   *****");
	if(IsMessage(S7F72_Reply) && S7F72_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F72_Reply.text);
	logn("*****    Recipes are in ", GetCount(Decode(S7F72_Reply.text)), " Groups");
}
//// NonRouteFormattedRecipeSend ////
S7F73_Request(SecsData){
	local mRequest, mReply;
	logn("*****    S7F73_NonRouteFormattedRecipeSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 73;
	mRequest.wbit = 1;
	mRequest.text = SecsData;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NonRouteFormattedRecipeAck ////
S7F74_Parser(S7F74_Reply){
	logn("*****    S7F74_NonRouteFormattedRecipeAck   *****");
	if(IsMessage(S7F74_Reply) && S7F74_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F74_Reply.text);
	logn("*****    Recipes are in ", GetCount(Decode(S7F74_Reply.text)), " Groups");
}
//// NonRouteFormattedRecipeRequest ////
S7F75_Request(PPID){
	local mRequest, mReply;
	logn("*****    S7F75_NonRouteFormattedRecipeRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 75;
	mRequest.wbit = 1;
	mRequest.text = S2_L(PPID);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NonRouteFormattedRecipeReply ////
S7F76_Parser(S7F76_Reply){
	logn("*****    S7F76_NonRouteFormattedRecipeResponse   *****");
	if(IsMessage(S7F76_Reply) && S7F76_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F76_Reply.text);
	logn("*****    Recipes are in ", GetCount(Decode(S7F76_Reply.text)), " Groups");
}
//// NameValueFormattedProcessProgramDownloadRequest ////
S7F83_Request(){
	local mRequest, mReply;
	logn("*****    S7F83_NameValueFormattedProcessProgramDownloadRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 83;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NameValueFormattedProcessProgramDownloadResponse ////
S7F84_Parser(S7F84_Reply){
	local mCmdAck;
	logn("*****    S7F84_NameValueFormattedProcessProgramDownloadResponse   *****");
	if(IsMessage(S7F84_Reply) && S7F84_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S7F84_Reply.text);
	mCmdAck = S2_Decode(S7F84_Reply.text);
	ParseACKC7(mCmdAck);
}
//// NameValueFormattedProcessProgramUploadRequest ////
S7F85_Request(){
	local mRequest, mReply;
	logn("*****    S7F85_NameValueFormattedProcessProgramUploadRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 7;
	mRequest.function = 85;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// NameValueFormattedProcessProgramDownloadResponse ////
S7F86_Parser(S7F86_Reply){
	local mReplyInfo;
	logn("*****    S7F86_NameValueFormattedProcessProgramUploadResponse   *****");
	if(IsMessage(S7F86_Reply) && S7F86_Reply.text == "")
		return;
	mReplyInfo = Decode(S7F86_Reply.text);
	if(IsEmptyList(mReplyInfo)){
		logn("*****    ERROR: Empty Response! Check Recipe on the Tool    *****");
	}else{
		logn("*****    Your Formatted Recipe was Uploaded Successfully    *****");
	}
}
//// TerminalRequest ////
S10F1_Request(){
	local mRequest, mReply;
	logn("*****    S10F1_TerminalRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 10;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TerminalRequestAcknowledge ////
S10F2_Parser(S10F2_Reply){
	local mReplyInfo;
	logn("*****    S10F2_TerminalRequestAcknowledge   *****");
	if(IsMessage(S10F2_Reply) && S10F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S10F2_Reply.text);
}
//// Single ////
S10F3_Request(Message){
	local mRequest, mReply;
	logn("*****    S10F3_Single   *****");
	mRequest = NewMessage();
	mRequest.stream = 10;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = Message;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SingleAcknowledge ////
S10F4_Parser(S10F4_Reply){
	local mReplyInfo;
	logn("*****    S10F4_SingleAcknowledge   *****");
	if(IsMessage(S10F4_Reply) && S10F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S10F4_Reply.text);
}
//// Multi-Block ////
S10F5_Request(){
	local mRequest, mReply;
	logn("*****    S10F5_Multi-Block   *****");
	mRequest = NewMessage();
	mRequest.stream = 10;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Multi-BlockAcknowledge ////
S10F6_Parser(S10F6_Reply){
	local mReplyInfo;
	logn("*****    S10F6_Multi-BlockAcknowledge   *****");
	if(IsMessage(S10F6_Reply) && S10F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S10F6_Reply.text);
}
//// Broadcast ////
S10F9_Request(){
	local mRequest, mReply;
	logn("*****    S10F9_Broadcast   *****");
	mRequest = NewMessage();
	mRequest.stream = 10;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// BroadcastAcknowledge ////
S10F10_Parser(S10F10_Reply){
	local mReplyInfo;
	logn("*****    S10F10_BroadcastAcknowledge   *****");
	if(IsMessage(S10F10_Reply) && S10F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S10F10_Reply.text);
}
//// MapSetupDataSend ////
S12F1_Request(){
	local mRequest, mReply;
	logn("*****    S12F1_MapSetupDataSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapSetupDataAcknowledge ////
S12F2_Parser(S12F2_Reply){
	local mReplyInfo;
	logn("*****    S12F2_MapSetupDataAcknowledge   *****");
	if(IsMessage(S12F2_Reply) && S12F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F2_Reply.text);
}
//// MapSetupDataRequest ////
S12F3_Request(){
	local mRequest, mReply;
	logn("*****    S12F3_MapSetupDataRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapSetupData ////
S12F4_Parser(S12F4_Reply){
	local mReplyInfo;
	logn("*****    S12F4_MapSetupData   *****");
	if(IsMessage(S12F4_Reply) && S12F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F4_Reply.text);
}
//// MapTransmitInquire ////
S12F5_Request(){
	local mRequest, mReply;
	logn("*****    S12F5_MapTransmitInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapTransmitGrant ////
S12F6_Parser(S12F6_Reply){
	local mReplyInfo;
	logn("*****    S12F6_MapTransmitGrant   *****");
	if(IsMessage(S12F6_Reply) && S12F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F6_Reply.text);
}
//// MapDataSendType1 ////
S12F7_Request(){
	local mRequest, mReply;
	logn("*****    S12F7_MapDataSendType1   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataAckType1 ////
S12F8_Parser(S12F8_Reply){
	local mReplyInfo;
	logn("*****    S12F8_MapDataAckType1   *****");
	if(IsMessage(S12F8_Reply) && S12F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F8_Reply.text);
}
//// MapDataSendType2 ////
S12F9_Request(){
	local mRequest, mReply;
	logn("*****    S12F9_MapDataSendType2   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataAckType2 ////
S12F10_Parser(S12F10_Reply){
	local mReplyInfo;
	logn("*****    S12F10_MapDataAckType2   *****");
	if(IsMessage(S12F10_Reply) && S12F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F10_Reply.text);
}
//// MapDataSendType3 ////
S12F11_Request(){
	local mRequest, mReply;
	logn("*****    S12F11_MapDataSendType3   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataAckType3 ////
S12F12_Parser(S12F12_Reply){
	local mReplyInfo;
	logn("*****    S12F12_MapDataAckType3   *****");
	if(IsMessage(S12F12_Reply) && S12F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F12_Reply.text);
}
//// MapDataRequestType1 ////
S12F13_Request(){
	local mRequest, mReply;
	logn("*****    S12F13_MapDataRequestType1   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataType1 ////
S12F14_Parser(S12F14_Reply){
	logn("*****    S12F14_MapDataType1   *****");
	if(IsMessage(S12F14_Reply) && S12F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F14_Reply.text);
}
//// MapDataRequestType2 ////
S12F15_Request(){
	local mRequest, mReply;
	logn("*****    S12F15_MapDataRequestType2   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataType2 ////
S12F16_Parser(S12F16_Reply){
	logn("*****    S12F16_MapDataType2   *****");
	if(IsMessage(S12F16_Reply) && S12F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F16_Reply.text);
}
//// MapDataRequestType3 ////
S12F17_Request(){
	local mRequest, mReply;
	logn("*****    S12F17_MapDataRequestType3   *****");
	mRequest = NewMessage();
	mRequest.stream = 12;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// MapDataType3 ////
S12F18_Parser(S12F18_Reply){
	local mReplyInfo;
	logn("*****    S12F18_MapDataType3   *****");
	if(IsMessage(S12F18_Reply) && S12F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S12F18_Reply.text);
}
//// SendDataSetSend ////
S13F1_Request(){
	local mRequest, mReply;
	logn("*****    S13F1_SendDataSetSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SendDataSetAck ////
S13F2_Parser(S13F2_Reply){
	local mReplyInfo;
	logn("*****    S13F2_SendDataSetAck   *****");
	if(IsMessage(S13F2_Reply) && S13F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F2_Reply.text);
}
//// OpenDataSetRequest ////
S13F3_Request(){
	local mRequest, mReply;
	logn("*****    S13F3_OpenDataSetRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// OpenDataSetData ////
S13F4_Parser(S13F4_Reply){
	local mReplyInfo;
	logn("*****    S13F4_OpenDataSetData   *****");
	if(IsMessage(S13F4_Reply) && S13F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F4_Reply.text);
}
//// ReadDataSetRequest ////
S13F5_Request(){
	local mRequest, mReply;
	logn("*****    S13F5_ReadDataSetRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReadDataSetData ////
S13F6_Parser(S13F6_Reply){
	local mReplyInfo;
	logn("*****    S13F6_ReadDataSetData   *****");
	if(IsMessage(S13F6_Reply) && S13F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F6_Reply.text);
}
//// CloseDataSetSend ////
S13F7_Request(){
	local mRequest, mReply;
	logn("*****    S13F7_CloseDataSetSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CloseDataSetAck ////
S13F8_Parser(S13F8_Reply){
	local mReplyInfo;
	logn("*****    S13F8_CloseDataSetAck   *****");
	if(IsMessage(S13F8_Reply) && S13F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F8_Reply.text);
}
//// ResetDataSetSend ////
S13F9_Request(){
	local mRequest, mReply;
	logn("*****    S13F9_ResetDataSetSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ResetDataSetAck ////
S13F10_Parser(S13F10_Reply){
	local mReplyInfo;
	logn("*****    S13F10_ResetDataSetAck   *****");
	if(IsMessage(S13F10_Reply) && S13F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F10_Reply.text);
}
//// DataSetObjMulti-BlockInquire ////
S13F11_Request(){
	local mRequest, mReply;
	logn("*****    S13F11_DataSetObjMulti-BlockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DataSetObjMulti-BlockGrant ////
S13F12_Parser(S13F12_Reply){
	local mReplyInfo;
	logn("*****    S13F12_DataSetObjMulti-BlockGrant   *****");
	if(IsMessage(S13F12_Reply) && S13F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F12_Reply.text);
}
//// TableDataSend ////
S13F13_Request(){
	local mRequest, mReply;
	logn("*****    S13F13_TableDataSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TableDataAck ////
S13F14_Parser(S13F14_Reply){
	local mReplyInfo;
	logn("*****    S13F14_TableDataAck   *****");
	if(IsMessage(S13F14_Reply) && S13F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F14_Reply.text);
}
//// TableDataRequest ////
S13F15_Request(){
	local mRequest, mReply;
	logn("*****    S13F15_TableDataRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 13;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TableData ////
S13F16_Parser(S13F16_Reply){
	local mReplyInfo;
	logn("*****    S13F16_TableData   *****");
	if(IsMessage(S13F16_Reply) && S13F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S13F16_Reply.text);
}
//// GetAttributesRequest ////
S14F1_Request(ObjSpec, ObjType, ObjIds, AttrData, AttrIds){
	local mRequest, mReply;
	logn("*****    S14F1_GetAttributesRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = S2_L(ObjSpec, ObjType, ObjIds, AttrData, AttrIds);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AttributeData ////
S14F2_Parser(S14F2_Reply){
	local mReplyInfo, mObjIdInfo, mObjAckInfo, mAttrData, mAttrId, mAttrVal, mmObjId, mObjAck;
	logn("*****    S14F2_AttributeData   *****");
	if(IsMessage(S14F2_Reply) && S14F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F2_Reply.text);
	mObjIdInfo = Decode(mReplyInfo[0]);
	mObjAckInfo = Decode(mReplyInfo[1]);
	mObjId = S2_Decode(Decode(mObjIdInfo[0])[0]);
	mAttrData = Decode(Decode(mObjIdInfo[0])[1]);
	mAttrId = Smart_Decode(Decode(mAttrData[0])[0]);
	mAttrVal = S2_Decode(Decode(mAttrData[0])[1]);
	mObjAck = Smart_Decode(mObjAckInfo[0]);
	switch(mObjAck){
	case 0:
		logn("*****    ", mObjAck, ": Ok - S14F1 Get Attributes    *****");
		logn("*****    mObjId: ", mObjId);
		logn("*****    mAttrId: ", mAttrId);
		logn("*****    mAttrVal: ", mAttrVal);
		break;
	case 1:
		logn("*****    ", mObjAck, ": Error - S14F1 Get Attributes    *****");
		break;
	default:
		logn("*****    ", mObjAck, ": Unknown Issue!    *****");
		break;
	}
}
//// SetAttributes ////
S14F3_Request(){
	local mRequest, mReply;
	logn("*****    S14F3_SetAttributes   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SetAttributesReply ////
S14F4_Parser(S14F4_Reply){
	local mReplyInfo;
	logn("*****    S14F4_SetAttributesReply   *****");
	if(IsMessage(S14F4_Reply) && S14F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F4_Reply.text);
}
//// GetTypeData ////
S14F5_Request(){
	local mRequest, mReply;
	logn("*****    S14F5_GetTypeData   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TypeData ////
S14F6_Parser(S14F6_Reply){
	local mReplyInfo;
	logn("*****    S14F6_TypeData   *****");
	if(IsMessage(S14F6_Reply) && S14F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F6_Reply.text);
}
//// GetAttributeNamesforthetypes ////
S14F7_Request(){
	local mRequest, mReply;
	logn("*****    S14F7_GetAttributeNamesforthetypes   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AttributeNamesoftheobjecttypes ////
S14F8_Parser(S14F8_Reply){
	local mReplyInfo;
	logn("*****    S14F8_AttributeNamesoftheobjecttypes   *****");
	if(IsMessage(S14F8_Reply) && S14F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F8_Reply.text);
}
//// CreateObjRequest ////
S14F9_Request(ObjSpec, ObjType, AttrData){
	local mRequest, mReply;
	logn("*****    S14F9_CreateObjRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = S2_L(ObjSpec, ObjType, AttrData);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CreateObjAck ////
S14F10_Parser(S14F10_Reply){
	local i, mReplyInfo, mCjId, mObjAckInfo, mObjAck, mErrorInfo, mError, mErrorCode, mErrorText;
	local mObjAttrInfo, mAttr, mAttrId, mAttrData;

	logn("*****    S14F10_CreateObjAck   *****");
	if(IsMessage(S14F10_Reply) && S14F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F10_Reply.text);
	mCjId = Smart_Decode(mReplyInfo[0]);
	logn("mCjId: <", mCjId, ">");

	if(mCjId != ""){
		mObjAttrInfo = Decode(mReplyInfo[1]);
		mObjAckInfo = Decode(mReplyInfo[2]);
		mObjAck = Smart_Decode(mObjAckInfo[0]);
		mErrorInfo = Decode(mObjAckInfo[1]);

		if(mObjAck == 0){
			logn("*****    ", mCjId, " Created Successfully    *****");
			for(i = 0;i < GetCount(INTRO);i = i + 1){
				//logn(i, ": ", INTRO[i].cjid);
				if(INTRO[i].cjid == mCjId){
					logn("Update: ", mCjId, " CJstate -1");
					INTRO[i].CJstate = -1;
				}
			}
		}else{
			for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
				mError = Decode(mErrorInfo[i]);
				mErrorCode = S2_Decode(mError[0]);
				ParseErrorCode(mErrorCode);
				mErrorText = Smart_Decode(mError[1]);
				logn("*****    CJID: ", mCjId, " with ErrCode:", mErrorCode, " and ErrTxt: ", mErrorText);
			}
		}
	}else
		logn("*****    ALERT !!! CJ Blank !!!    *****");

	logn("*****    S14F10_Parser Done!    *****");
}
//// DeleteObjRequest ////
S14F11_Request(){
	local mRequest, mReply;
	logn("*****    S14F11_DeleteObjRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DeleteObjAck ////
S14F12_Parser(S14F12_Reply){
	local mReplyInfo;
	logn("*****    S14F12_DeleteObjAck   *****");
	if(IsMessage(S14F12_Reply) && S14F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F12_Reply.text);
}
//// ObjectAttachRequest ////
S14F13_Request(){
	local mRequest, mReply;
	logn("*****    S14F13_ObjectAttachRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ObjectAttachAck ////
S14F14_Parser(S14F14_Reply){
	local mReplyInfo;
	logn("*****    S14F14_ObjectAttachAck   *****");
	if(IsMessage(S14F14_Reply) && S14F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F14_Reply.text);
}
////  ////
S14F15_Request(){
	local mRequest, mReply;
	logn("*****    S14F15_   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// AttachedObjActionAck ////
S14F16_Parser(S14F16_Reply){
	local mReplyInfo;
	logn("*****    S14F16_AttachedObjActionAck   *****");
	if(IsMessage(S14F16_Reply) && S14F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F16_Reply.text);
}
//// SupervisedObjActionReq ////
S14F17_Request(){
	local mRequest, mReply;
	logn("*****    S14F17_SupervisedObjActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SupervisedObjActionAck ////
S14F18_Parser(S14F18_Reply){
	local mReplyInfo;
	logn("*****    S14F18_SupervisedObjActionAck   *****");
	if(IsMessage(S14F18_Reply) && S14F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F18_Reply.text);
}
//// GenericServiceReq ////
S14F19_Request(){
	local mRequest, mReply;
	logn("*****    S14F19_GenericServiceReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// GenericServiceAck ////
S14F20_Parser(S14F20_Reply){
	local mReplyInfo;
	logn("*****    S14F20_GenericServiceAck   *****");
	if(IsMessage(S14F20_Reply) && S14F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F20_Reply.text);
}
//// GenericServiceCompletion ////
S14F21_Request(){
	local mRequest, mReply;
	logn("*****    S14F21_GenericServiceCompletion   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// GenericServiceCompAck ////
S14F22_Parser(S14F22_Reply){
	local mReplyInfo;
	logn("*****    S14F22_GenericServiceCompAck   *****");
	if(IsMessage(S14F22_Reply) && S14F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F22_Reply.text);
}
//// Multi-blockGenericServiceInquire ////
S14F23_Request(){
	local mRequest, mReply;
	logn("*****    S14F23_Multi-blockGenericServiceInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Multi-blockGenericServiceGrant ////
S14F24_Parser(S14F24_Reply){
	local mReplyInfo;
	logn("*****    S14F24_Multi-blockGenericServiceGrant   *****");
	if(IsMessage(S14F24_Reply) && S14F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F24_Reply.text);
}
//// ServiceNameRequest ////
S14F25_Request(){
	local mRequest, mReply;
	logn("*****    S14F25_ServiceNameRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ServiceNameData ////
S14F26_Parser(S14F26_Reply){
	local mReplyInfo;
	logn("*****    S14F26_ServiceNameData   *****");
	if(IsMessage(S14F26_Reply) && S14F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F26_Reply.text);
}
//// ServiceParameterNameReq ////
S14F27_Request(){
	local mRequest, mReply;
	logn("*****    S14F27_ServiceParameterNameReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 14;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ServiceParameterNameData ////
S14F28_Parser(S14F28_Reply){
	local mReplyInfo;
	logn("*****    S14F28_ServiceParameterNameData   *****");
	if(IsMessage(S14F28_Reply) && S14F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S14F28_Reply.text);
}
//// RecipeManagementMulti-BlockInquire ////
S15F1_Request(){
	local mRequest, mReply;
	logn("*****    S15F1_RecipeManagementMulti-BlockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeManagementMulti-blockGrant ////
S15F2_Parser(S15F2_Reply){
	local mReplyInfo;
	logn("*****    S15F2_RecipeManagementMulti-blockGrant   *****");
	if(IsMessage(S15F2_Reply) && S15F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F2_Reply.text);
}
//// RecipeNamespaceActionReq ////
S15F3_Request(){
	local mRequest, mReply;
	logn("*****    S15F3_RecipeNamespaceActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeNamespaceAction ////
S15F4_Parser(S15F4_Reply){
	local mReplyInfo;
	logn("*****    S15F4_RecipeNamespaceAction   *****");
	if(IsMessage(S15F4_Reply) && S15F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F4_Reply.text);
}
//// RecipeNamespaceRenameReq ////
S15F5_Request(){
	local mRequest, mReply;
	logn("*****    S15F5_RecipeNamespaceRenameReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeNamespaceRenameAck ////
S15F6_Parser(S15F6_Reply){
	local mReplyInfo;
	logn("*****    S15F6_RecipeNamespaceRenameAck   *****");
	if(IsMessage(S15F6_Reply) && S15F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F6_Reply.text);
}
//// RecipeSpaceReq ////
S15F7_Request(){
	local mRequest, mReply;
	logn("*****    S15F7_RecipeSpaceReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeSpaceData ////
S15F8_Parser(S15F8_Reply){
	local mReplyInfo;
	logn("*****    S15F8_RecipeSpaceData   *****");
	if(IsMessage(S15F8_Reply) && S15F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F8_Reply.text);
}
//// RecipeStatusRequest ////
S15F9_Request(){
	local mRequest, mReply;
	logn("*****    S15F9_RecipeStatusRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeStatusData ////
S15F10_Parser(S15F10_Reply){
	local mReplyInfo;
	logn("*****    S15F10_RecipeStatusData   *****");
	if(IsMessage(S15F10_Reply) && S15F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F10_Reply.text);
}
//// RecipeVersionRequest ////
S15F11_Request(){
	local mRequest, mReply;
	logn("*****    S15F11_RecipeVersionRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeVersionData ////
S15F12_Parser(S15F12_Reply){
	local mReplyInfo;
	logn("*****    S15F12_RecipeVersionData   *****");
	if(IsMessage(S15F12_Reply) && S15F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F12_Reply.text);
}
//// RecipeCreateReq ////
S15F13_Request(){
	local mRequest, mReply;
	logn("*****    S15F13_RecipeCreateReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeCreateAck ////
S15F14_Parser(S15F14_Reply){
	local mReplyInfo;
	logn("*****    S15F14_RecipeCreateAck   *****");
	if(IsMessage(S15F14_Reply) && S15F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F14_Reply.text);
}
//// RecipeStoreReq ////
S15F15_Request(){
	local mRequest, mReply;
	logn("*****    S15F15_RecipeStoreReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeStoreAck ////
S15F16_Parser(S15F16_Reply){
	local mReplyInfo;
	logn("*****    S15F16_RecipeStoreAck   *****");
	if(IsMessage(S15F16_Reply) && S15F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F16_Reply.text);
}
//// RecipeRetrieveReq ////
S15F17_Request(){
	local mRequest, mReply;
	logn("*****    S15F17_RecipeRetrieveReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeRetrieveData ////
S15F18_Parser(S15F18_Reply){
	local mReplyInfo;
	logn("*****    S15F18_RecipeRetrieveData   *****");
	if(IsMessage(S15F18_Reply) && S15F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F18_Reply.text);
}
//// RecipeRenameReq ////
S15F19_Request(){
	local mRequest, mReply;
	logn("*****    S15F19_RecipeRenameReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeRenameAck ////
S15F20_Parser(S15F20_Reply){
	local mReplyInfo;
	logn("*****    S15F20_RecipeRenameAck   *****");
	if(IsMessage(S15F20_Reply) && S15F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F20_Reply.text);
}
//// RecipeActionReq ////
S15F21_Request(){
	local mRequest, mReply;
	logn("*****    S15F21_RecipeActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeActionAck ////
S15F22_Parser(S15F22_Reply){
	local mReplyInfo;
	logn("*****    S15F22_RecipeActionAck   *****");
	if(IsMessage(S15F22_Reply) && S15F22_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F22_Reply.text);
}
//// RecipeDescriptorReq ////
S15F23_Request(){
	local mRequest, mReply;
	logn("*****    S15F23_RecipeDescriptorReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeDescriptorData ////
S15F24_Parser(S15F24_Reply){
	local mReplyInfo;
	logn("*****    S15F24_RecipeDescriptorData   *****");
	if(IsMessage(S15F24_Reply) && S15F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F24_Reply.text);
}
//// RecipeParameterUpdateReq ////
S15F25_Request(){
	local mRequest, mReply;
	logn("*****    S15F25_RecipeParameterUpdateReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeParameterUpdateAck ////
S15F26_Parser(S15F26_Reply){
	local mReplyInfo;
	logn("*****    S15F26_RecipeParameterUpdateAck   *****");
	if(IsMessage(S15F26_Reply) && S15F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F26_Reply.text);
}
//// RecipeDownloadReq ////
S15F27_Request(){
	local mRequest, mReply;
	logn("*****    S15F27_RecipeDownloadReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeDownloadAck ////
S15F28_Parser(S15F28_Reply){
	local mReplyInfo;
	logn("*****    S15F28_RecipeDownloadAck   *****");
	if(IsMessage(S15F28_Reply) && S15F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F28_Reply.text);
}
//// RecipeVerifyReq ////
S15F29_Request(){
	local mRequest, mReply;
	logn("*****    S15F29_RecipeVerifyReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeVerifyAck ////
S15F30_Parser(S15F30_Reply){
	local mReplyInfo;
	logn("*****    S15F30_RecipeVerifyAck   *****");
	if(IsMessage(S15F30_Reply) && S15F30_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F30_Reply.text);
}
//// RecipeUnloadReq ////
S15F31_Request(){
	local mRequest, mReply;
	logn("*****    S15F31_RecipeUnloadReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 31;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeUnloadData ////
S15F32_Parser(S15F32_Reply){
	local mReplyInfo;
	logn("*****    S15F32_RecipeUnloadData   *****");
	if(IsMessage(S15F32_Reply) && S15F32_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F32_Reply.text);
}
//// RecipeSelectReq ////
S15F33_Request(){
	local mRequest, mReply;
	logn("*****    S15F33_RecipeSelectReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 33;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeSelectAck ////
S15F34_Parser(S15F34_Reply){
	local mReplyInfo;
	logn("*****    S15F34_RecipeSelectAck   *****");
	if(IsMessage(S15F34_Reply) && S15F34_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F34_Reply.text);
}
//// RecipeDeleteReq ////
S15F35_Request(){
	local mRequest, mReply;
	logn("*****    S15F35_RecipeDeleteReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 35;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeDeleteAck ////
S15F36_Parser(S15F36_Reply){
	local mReplyInfo;
	logn("*****    S15F36_RecipeDeleteAck   *****");
	if(IsMessage(S15F36_Reply) && S15F36_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F36_Reply.text);
}
//// DRNSSegmentApproveActionReq ////
S15F37_Request(){
	local mRequest, mReply;
	logn("*****    S15F37_DRNSSegmentApproveActionReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 37;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSSegmentApproveActionAck ////
S15F38_Parser(S15F38_Reply){
	local mReplyInfo;
	logn("*****    S15F38_DRNSSegmentApproveActionAck   *****");
	if(IsMessage(S15F38_Reply) && S15F38_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F38_Reply.text);
}
//// DRNSRecorderSegReq ////
S15F39_Request(){
	local mRequest, mReply;
	logn("*****    S15F39_DRNSRecorderSegReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 39;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSRecorderSegAck ////
S15F40_Parser(S15F40_Reply){
	local mReplyInfo;
	logn("*****    S15F40_DRNSRecorderSegAck   *****");
	if(IsMessage(S15F40_Reply) && S15F40_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F40_Reply.text);
}
//// DRNSRecorderModReq ////
S15F41_Request(){
	local mRequest, mReply;
	logn("*****    S15F41_DRNSRecorderModReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 41;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSRecorderModAck ////
S15F42_Parser(S15F42_Reply){
	local mReplyInfo;
	logn("*****    S15F42_DRNSRecorderModAck   *****");
	if(IsMessage(S15F42_Reply) && S15F42_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F42_Reply.text);
}
//// DRNSGetChangeReq ////
S15F43_Request(){
	local mRequest, mReply;
	logn("*****    S15F43_DRNSGetChangeReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 43;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSGetChangeAck ////
S15F44_Parser(S15F44_Reply){
	local mReplyInfo;
	logn("*****    S15F44_DRNSGetChangeAck   *****");
	if(IsMessage(S15F44_Reply) && S15F44_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F44_Reply.text);
}
//// DRNSMgrSegAprvlReq ////
S15F45_Request(){
	local mRequest, mReply;
	logn("*****    S15F45_DRNSMgrSegAprvlReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 45;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSMgrSegAprvlAck ////
S15F46_Parser(S15F46_Reply){
	local mReplyInfo;
	logn("*****    S15F46_DRNSMgrSegAprvlAck   *****");
	if(IsMessage(S15F46_Reply) && S15F46_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F46_Reply.text);
}
//// DRNSMgrRebuildReq ////
S15F47_Request(){
	local mRequest, mReply;
	logn("*****    S15F47_DRNSMgrRebuildReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 47;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DRNSMgrRebuildAck ////
S15F48_Parser(S15F48_Reply){
	local mReplyInfo;
	logn("*****    S15F48_DRNSMgrRebuildAck   *****");
	if(IsMessage(S15F48_Reply) && S15F48_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F48_Reply.text);
}
//// LargeRecipeDownloadReq ////
S15F49_Request(){
	local mRequest, mReply;
	logn("*****    S15F49_LargeRecipeDownloadReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 49;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargeRecipeDownloadAck ////
S15F50_Parser(S15F50_Reply){
	local mReplyInfo;
	logn("*****    S15F50_LargeRecipeDownloadAck   *****");
	if(IsMessage(S15F50_Reply) && S15F50_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F50_Reply.text);
}
//// LargeRecipeUploadReq ////
S15F51_Request(){
	local mRequest, mReply;
	logn("*****    S15F51_LargeRecipeUploadReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 51;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// LargeRecipeUploadAck ////
S15F52_Parser(S15F52_Reply){
	local mReplyInfo;
	logn("*****    S15F52_LargeRecipeUploadAck   *****");
	if(IsMessage(S15F52_Reply) && S15F52_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F52_Reply.text);
}
//// RecipeVerificationSend ////
S15F53_Request(){
	local mRequest, mReply;
	logn("*****    S15F53_RecipeVerificationSend   *****");
	mRequest = NewMessage();
	mRequest.stream = 15;
	mRequest.function = 53;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// RecipeVerificationAck ////
S15F54_Parser(S15F54_Reply){
	local mReplyInfo;
	logn("*****    S15F54_RecipeVerificationAck   *****");
	if(IsMessage(S15F54_Reply) && S15F54_Reply.text == "")
		return;
	mReplyInfo = Decode(S15F54_Reply.text);
}
//// ProcessJobDataMBI ////
S16F1_Request(){
	local mRequest, mReply;
	logn("*****    S16F1_ProcessJobDataMBI   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PJDMBIGrant ////
S16F2_Parser(S16F2_Reply){
	local mReplyInfo;
	logn("*****    S16F2_PJDMBIGrant   *****");
	if(IsMessage(S16F2_Reply) && S16F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F2_Reply.text);
}
//// ProcessJobCreateReq ////
S16F3_Request(){
	local mRequest, mReply;
	logn("*****    S16F3_ProcessJobCreateReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessJobCreateAck ////
S16F4_Parser(S16F4_Reply){
	local mReplyInfo;
	logn("*****    S16F4_ProcessJobCreateAck   *****");
	if(IsMessage(S16F4_Reply) && S16F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F4_Reply.text);
}
//// ProcessJobCmdReq ////
S16F5_Request(DataId, Pjid, PjCmd, Data){
	local mRequest, mReply;
	logn("*****    S16F5_ProcessJobCmdReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = S2_L(DataId, Pjid, PjCmd, Data);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessJobCmdAck ////
S16F6_Parser(S16F6_Reply){
	local mReplyInfo, mPjId, mAckInfo, mPJAck;
	logn("*****    S16F6_ProcessJobCmdAck   *****");
	if(IsMessage(S16F6_Reply) && S16F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F6_Reply.text);
	mPjId = Smart_Decode(mReplyInfo[0]);
	mAckInfo = Decode(mReplyInfo[1]);
	mPJAck = S2_Decode(mAckInfo[0]);

	if(mPJAck == 1){
		logn("*****    PJCmd Executed for PjId: <", mPjId, "> Successfully    *****");
	}else{
		mErrorInfo = Decode(mAckInfo[1]);
		for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
			mError = Decode(mErrorInfo[i]);
			mErrorCode = S2_Decode(mError[0]);
			ParseErrorCode(mErrorCode);
			mErrorText = Smart_Decode(mError[1]);
			logn("*****    mPjId: ", mPjId, " with ErrCode:", mErrorCode, " and ErrTxt: ", mErrorText);
		}
	}
}
//// ProcessJobAlertNotify ////
S16F7_Request(){
	local mRequest, mReply;
	logn("*****    S16F7_ProcessJobAlertNotify   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessJobAlertAck ////
S16F8_Parser(S16F8_Reply){
	local mReplyInfo;
	logn("*****    S16F8_ProcessJobAlertAck   *****");
	if(IsMessage(S16F8_Reply) && S16F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F8_Reply.text);
}
//// ProcessJobEventNotify ////
S16F9_Request(){
	local mRequest, mReply;
	logn("*****    S16F9_ProcessJobEventNotify   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ProcessJobEventAck ////
S16F10_Parser(S16F10_Reply){
	local mReplyInfo;
	logn("*****    S16F10_ProcessJobEventAck   *****");
	if(IsMessage(S16F10_Reply) && S16F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F10_Reply.text);
}
//// PRJobCreateEnh ////
S16F11_Request(DataId, PjId, MatFormat, CarrierInfo, RecInfo, StartMethod, PauseEvent){
	local mRequest, mReply;
	logn("*****    S16F11_PRJobCreateEnh   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = S2_L(DataId, PjId, MatFormat, CarrierInfo, RecInfo, StartMethod, PauseEvent);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobCreateEnhAck ////
S16F12_Parser(S16F12_Reply){
	local i, mPJAck, mReplyInfo, mErrorInfo, mAckInfo, mPjId, mError, mErrorCode, mErrorText;
	logn("*****    S16F12_PRJobCreateEnhAck   *****");
	if(IsMessage(S16F12_Reply) && S16F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F12_Reply.text);
	mPjId = Smart_Decode(mReplyInfo[0]);
	mAckInfo = Decode(mReplyInfo[1]);
	mPJAck = S2_Decode(mAckInfo[0]);

	if(mPJAck == 1){
		logn("*****    mPjId: ", mPjId, " created successfully    *****");
		return (1);
	}else{
		mErrorInfo = Decode(mAckInfo[1]);
		for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
			mError = Decode(mErrorInfo[i]);
			mErrorCode = S2_Decode(mError[0]);
			ParseErrorCode(mErrorCode);
			mErrorText = Smart_Decode(mError[1]);
			logn("*****    mPjId: ", mPjId, " with ErrCode:", mErrorCode, " and ErrTxt: ", mErrorText);
		}
		return (0);
	}
}
//// PRJobMultiCreate ////
S16F15_Request(DataId, PJs){
	local mRequest, mReply;
	logn("*****    S16F15_PRJobMultiCreate   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = S2_L(DataId, PJs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobMultiCreateAck ////
S16F16_Parser(S16F16_Reply){
	local i, mPJAck, mReplyInfo, mErrorInfo, mPJInfo, mAckInfo, mPjId, mError, mErrorCode, mErrorText, mNumPJs;
	logn("*****    S16F16_PRJobMultiCreateAck   *****");
	if(IsMessage(S16F16_Reply) && S16F16_Reply.text == "")
		return;

	mReplyInfo = Decode(S16F16_Reply.text);
	mPJInfo = Decode(mReplyInfo[0]);
	mNumPJs = GetCount(mPJInfo);
	//logn("mPJInfo: ", mPJInfo);
	mAckInfo = Decode(mReplyInfo[1]);
	mPJAck = Smart_Decode(mAckInfo[0]);
	logn("mPJAck: ", mPJAck);

	for(i = 0;i < mNumPJs;i = i + 1){
		mPjId = InsertFirst(Smart_Decode(mPJInfo[i]), mPjId);
	}

	if(mPJAck == 1){
		logn("*****    PJ: ", mPjId, " created successfully    *****");
		return (1);
	}else if(mPJAck == 0){
		logn("*************************** BAD NEWS ***************************");
		logn("*****    PJ: ", mPjId, " created NOT successfully    *****");
		logn("****************************************************************");

		//logn("ERROR: ", mAckInfo[1]);

		mErrorInfo = Decode(mAckInfo[1]);

		for(i = 0;i < GetCount(mErrorInfo);i = i + 1){
			mError = Decode(mErrorInfo[i]);
			mErrorCode = S2_Decode(mError[0]);
			ParseErrorCode(mErrorCode);
			mErrorText = Smart_Decode(mError[1]);
			logn("*****    mPjId: ", mPjId, " with ErrCode:", mErrorCode, " and ErrTxt: ", mErrorText);
		}
		return (0);
	}else
		logn("*****    PJ: ", mPjId, " creation status UNKNOWN    *****");

	return (1);
}
//// PRJobDequeue ////
S16F17_Request(PJIDs){
	local mRequest, mReply;
	logn("*****    S16F17_PRJobDequeue   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = S2_L(PJIDs);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobDequeueAck ////
S16F18_Parser(S16F18_Reply){
	local mReplyInfo, mProcessJobs, mAckInfo, mACKA;
	logn("*****    S16F18_PRJobDequeueAck   *****");
	if(IsMessage(S16F18_Reply) && S16F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F18_Reply.text);
	mAckInfo = Decode(mReplyInfo[1]);
	mACKA = S2_Decode(mAckInfo[0]);
	if(mACKA == 0){
		logn("*****    Dequeue Request Denied !");
	}else if(mACKA == 1){
		logn("*****    Dequeue Request Accepted !");
	}else{
		logn("*****    Dequeue Request Unknown Status !");
	}
}
//// PRJobListReq ////
S16F19_Request(){
	local mRequest, mReply;
	logn("*****    S16F19_PRJobListReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobListData ////
S16F20_Parser(S16F20_Reply){
	logn("*****    S16F20_PRJobListData   *****");
	if(IsMessage(S16F20_Reply) && S16F20_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S16F20_Reply.text);
	logn("*****    There're ", GetCount(Decode(S16F20_Reply.text)), " PJs    *****");
}
//// PRJobCreateLimitReq ////
S16F21_Request(){
	local mRequest, mReply;
	logn("*****    S16F21_PRJobCreateLimitReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 21;
	mRequest.wbit = 1;
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobCreateLimitData ////
S16F22_Parser(S16F22_Reply){
	local mPJLimit;
	logn("*****    S16F22_PRJobCreateLimitData   *****");
	if(IsMessage(S16F22_Reply) && S16F22_Reply.text == "")
		return;
	//mReplyInfo	= Decode(S16F22_Reply.text);
	mPJLimit = S2_Decode(S16F22_Reply.text);
	logn("*****    PJ create limit ", mPJLimit, " PJs    *****");
}
//// PRJobRecipeVariableSet ////
S16F23_Request(){
	local mRequest, mReply;
	logn("*****    S16F23_PRJobRecipeVariableSet   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 23;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobRecipeVariableAck ////
S16F24_Parser(S16F24_Reply){
	local mReplyInfo;
	logn("*****    S16F24_PRJobRecipeVariableAck   *****");
	if(IsMessage(S16F24_Reply) && S16F24_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F24_Reply.text);
}
//// PRJobStartMethodSet ////
S16F25_Request(){
	local mRequest, mReply;
	logn("*****    S16F25_PRJobStartMethodSet   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 25;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRJobStartMethodAck ////
S16F26_Parser(S16F26_Reply){
	local mReplyInfo;
	logn("*****    S16F26_PRJobStartMethodAck   *****");
	if(IsMessage(S16F26_Reply) && S16F26_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F26_Reply.text);
}
//// ControlJobCommand ////
S16F27_Request(CjId, CjCmd, ParaInfo){
	local mRequest, mReply;
	logn("*****    S16F27_ControlJobCommand   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 27;
	mRequest.wbit = 1;
	mRequest.text = S2_L(CjId, CjCmd, ParaInfo);
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ControlJobCommandAck ////
S16F28_Parser(S16F28_Reply){
	local mCJAck, mAckInfo, mReplyInfo;
	logn("*****    S16F28_ControlJobCommandAck   *****");
	if(IsMessage(S16F28_Reply) && S16F28_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F28_Reply.text);
	mCJAck = S2_Decode(mReplyInfo[0]);
	mAckInfo = Decode(mReplyInfo[1]);
	if(mCJAck == 1)
		logn("*****    ", mCJAck, ": CJ Cmd Acknowledged    *****");
	else
		logn("*****    ", mCJAck, ": CJ Cmd Denied    *****");
}
//// PRSetMtrlOrder ////
S16F29_Request(){
	local mRequest, mReply;
	logn("*****    S16F29_PRSetMtrlOrder   *****");
	mRequest = NewMessage();
	mRequest.stream = 16;
	mRequest.function = 29;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PRSetMtrlOrderAck ////
S16F30_Parser(S16F30_Reply){
	local mReplyInfo;
	logn("*****    S16F30_PRSetMtrlOrderAck   *****");
	if(IsMessage(S16F30_Reply) && S16F30_Reply.text == "")
		return;
	mReplyInfo = Decode(S16F30_Reply.text);
}
//// DataReportCreateReq ////
S17F1_Request(){
	local mRequest, mReply;
	logn("*****    S17F1_DataReportCreateReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DataReportCreateAck ////
S17F2_Parser(S17F2_Reply){
	local mReplyInfo;
	logn("*****    S17F2_DataReportCreateAck   *****");
	if(IsMessage(S17F2_Reply) && S17F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F2_Reply.text);
}
//// DataReportDeleteReq ////
S17F3_Request(){
	local mRequest, mReply;
	logn("*****    S17F3_DataReportDeleteReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// DataReportDelAck ////
S17F4_Parser(S17F4_Reply){
	local mReplyInfo;
	logn("*****    S17F4_DataReportDelAck   *****");
	if(IsMessage(S17F4_Reply) && S17F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F4_Reply.text);
}
//// TraceCreateReq ////
S17F5_Request(){
	local mRequest, mReply;
	logn("*****    S17F5_TraceCreateReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceCreateAck ////
S17F6_Parser(S17F6_Reply){
	local mReplyInfo;
	logn("*****    S17F6_TraceCreateAck   *****");
	if(IsMessage(S17F6_Reply) && S17F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F6_Reply.text);
}
//// TraceDeleteReq ////
S17F7_Request(){
	local mRequest, mReply;
	logn("*****    S17F7_TraceDeleteReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceDeleteAck ////
S17F8_Parser(S17F8_Reply){
	local mReplyInfo;
	logn("*****    S17F8_TraceDeleteAck   *****");
	if(IsMessage(S17F8_Reply) && S17F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F8_Reply.text);
}
//// CollectionEventLinkReq ////
S17F9_Request(){
	local mRequest, mReply;
	logn("*****    S17F9_CollectionEventLinkReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CollectionEventLinkAck ////
S17F10_Parser(S17F10_Reply){
	local mReplyInfo;
	logn("*****    S17F10_CollectionEventLinkAck   *****");
	if(IsMessage(S17F10_Reply) && S17F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F10_Reply.text);
}
//// CollectionEventUnlink ////
S17F11_Request(){
	local mRequest, mReply;
	logn("*****    S17F11_CollectionEventUnlink   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// CollectionEventUnlinkAck ////
S17F12_Parser(S17F12_Reply){
	local mReplyInfo;
	logn("*****    S17F12_CollectionEventUnlinkAck   *****");
	if(IsMessage(S17F12_Reply) && S17F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F12_Reply.text);
}
//// TraceResetReq ////
S17F13_Request(){
	local mRequest, mReply;
	logn("*****    S17F13_TraceResetReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 17;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TraceResetAck ////
S17F14_Parser(S17F14_Reply){
	local mReplyInfo;
	logn("*****    S17F14_TraceResetAck   *****");
	if(IsMessage(S17F14_Reply) && S17F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S17F14_Reply.text);
}
//// ReadAttributeReq ////
S18F1_Request(){
	local mRequest, mReply;
	logn("*****    S18F1_ReadAttributeReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReadAttributeData ////
S18F2_Parser(S18F2_Reply){
	local mReplyInfo;
	logn("*****    S18F2_ReadAttributeData   *****");
	if(IsMessage(S18F2_Reply) && S18F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F2_Reply.text);
}
//// WriteAttributeReq ////
S18F3_Request(){
	local mRequest, mReply;
	logn("*****    S18F3_WriteAttributeReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// WriteAttributeAck ////
S18F4_Parser(S18F4_Reply){
	local mReplyInfo;
	logn("*****    S18F4_WriteAttributeAck   *****");
	if(IsMessage(S18F4_Reply) && S18F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F4_Reply.text);
}
//// ReadRequest ////
S18F5_Request(){
	local mRequest, mReply;
	logn("*****    S18F5_ReadRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReadData ////
S18F6_Parser(S18F6_Reply){
	logn("*****    S18F6_ReadData   *****");
	if(IsMessage(S18F6_Reply) && S18F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F6_Reply.text);
}
//// WriteDataRequest ////
S18F7_Request(){
	local mRequest, mReply;
	logn("*****    S18F7_WriteDataRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// WriteDataAck ////
S18F8_Parser(S18F8_Reply){
	logn("*****    S18F8_WriteDataAck   *****");
	if(IsMessage(S18F8_Reply) && S18F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F8_Reply.text);
}
//// ReadIDReq ////
S18F9_Request(){
	local mRequest, mReply;
	logn("*****    S18F9_ReadIDReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// ReadIDData ////
S18F10_Parser(S18F10_Reply){
	logn("*****    S18F10_ReadIDData   *****");
	if(IsMessage(S18F10_Reply) && S18F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F10_Reply.text);
}
//// WriteIDReq ////
S18F11_Request(){
	local mRequest, mReply;
	logn("*****    S18F11_WriteIDReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// WriteIDAck ////
S18F12_Parser(S18F12_Reply){
	logn("*****    S18F12_WriteIDAck   *****");
	if(IsMessage(S18F12_Reply) && S18F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F12_Reply.text);
}
//// SubsystemCommand ////
S18F13_Request(){
	local mRequest, mReply;
	logn("*****    S18F13_SubsystemCommand   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SubsystemCommandAck ////
S18F14_Parser(S18F14_Reply){
	logn("*****    S18F14_SubsystemCommandAck   *****");
	if(IsMessage(S18F14_Reply) && S18F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F14_Reply.text);
}
//// Read2DCodeCondReq ////
S18F15_Request(){
	local mRequest, mReply;
	logn("*****    S18F15_Read2DCodeCondReq   *****");
	mRequest = NewMessage();
	mRequest.stream = 18;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// Read2DCodeCondData ////
S18F16_Parser(S18F16_Reply){
	logn("*****    S18F16_Read2DCodeCondData   *****");
	if(IsMessage(S18F16_Reply) && S18F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S18F16_Reply.text);
}
//// Directory ////
S19F1_Request(){
	local mRequest, mReply;
	logn("*****    S19F1_Directory   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 1;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDEDirectoryData ////
S19F2_Parser(S19F2_Reply){
	logn("*****    S19F2_PDEDirectoryData   *****");
	if(IsMessage(S19F2_Reply) && S19F2_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F2_Reply.text);
}
//// PDEDeleteRequest ////
S19F3_Request(){
	local mRequest, mReply;
	logn("*****    S19F3_PDEDeleteRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 3;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDEDeleteAcknowledge ////
S19F4_Parser(S19F4_Reply){
	logn("*****    S19F4_PDEDeleteAcknowledge   *****");
	if(IsMessage(S19F4_Reply) && S19F4_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F4_Reply.text);
}
//// PDEHeaderDataRequest ////
S19F5_Request(){
	local mRequest, mReply;
	logn("*****    S19F5_PDEHeaderDataRequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 5;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDEHeaderDataReply ////
S19F6_Parser(S19F6_Reply){
	logn("*****    S19F6_PDEHeaderDataReply   *****");
	if(IsMessage(S19F6_Reply) && S19F6_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F6_Reply.text);
}
////  ////
S19F7_Request(){
	local mRequest, mReply;
	logn("*****    S19F7_   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 7;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDETransferReply ////
S19F8_Parser(S19F8_Reply){
	logn("*****    S19F8_PDETransferReply   *****");
	if(IsMessage(S19F8_Reply) && S19F8_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F8_Reply.text);
}
//// RequesttoSendPDE ////
S19F9_Request(){
	local mRequest, mReply;
	logn("*****    S19F9_RequesttoSendPDE   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 9;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// InitiatePDEtransferReply ////
S19F10_Parser(S19F10_Reply){
	logn("*****    S19F10_InitiatePDEtransferReply   *****");
	if(IsMessage(S19F10_Reply) && S19F10_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F10_Reply.text);
}
//// SendPDE ////
S19F11_Request(){
	local mRequest, mReply;
	logn("*****    S19F11_SendPDE   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 11;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// SendPDEAcknowledge ////
S19F12_Parser(S19F12_Reply){
	logn("*****    S19F12_SendPDEAcknowledge   *****");
	if(IsMessage(S19F12_Reply) && S19F12_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F12_Reply.text);
}
//// TransferContainerReport ////
S19F13_Request(){
	local mRequest, mReply;
	logn("*****    S19F13_TransferContainerReport   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 13;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// TransferContainerReportAck ////
S19F14_Parser(S19F14_Reply){
	logn("*****    S19F14_TransferContainerReportAck   *****");
	if(IsMessage(S19F14_Reply) && S19F14_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F14_Reply.text);
}
//// RequestPDEResolution ////
S19F15_Request(){
	local mRequest, mReply;
	logn("*****    S19F15_RequestPDEResolution   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 15;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDEResolutionData ////
S19F16_Parser(S19F16_Reply){
	logn("*****    S19F16_PDEResolutionData   *****");
	if(IsMessage(S19F16_Reply) && S19F16_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F16_Reply.text);
}
//// VerifyPDERequest ////
S19F17_Request(){
	local mRequest, mReply;
	logn("*****    S19F17_VerifyPDERequest   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 17;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// PDEVerificationResult ////
S19F18_Parser(S19F18_Reply){
	logn("*****    S19F18_PDEVerificationResult   *****");
	if(IsMessage(S19F18_Reply) && S19F18_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F18_Reply.text);
}
//// S19Multi-blockInquire ////
S19F19_Request(){
	local mRequest, mReply;
	logn("*****    S19F19_S19Multi-blockInquire   *****");
	mRequest = NewMessage();
	mRequest.stream = 19;
	mRequest.function = 19;
	mRequest.wbit = 1;
	mRequest.text = "";
	mReply = wait(SendPrimary(mRequest, TARGET));
	wait(NewTimer(1));	//sleep for 1 sec
	return (mReply);
}
//// S19Multi-blockGrant ////
S19F20_Parser(S19F20_Reply){
	logn("*****    S19F20_S19Multi-blockGrant   *****");
	if(IsMessage(S19F20_Reply) && S19F20_Reply.text == "")
		return;
	mReplyInfo = Decode(S19F20_Reply.text);
}

ParseCAACK(CAACKCode){
	switch(CAACKCode){
		case 0: logn("*****    ", CAACKCode, ": Ok    *****"); break;
		case 1: logn("*****    ", CAACKCode, ": Invalid Command    *****"); break;
		case 2: logn("*****    ", CAACKCode, ": Can't Perform Now    *****"); break;
		case 3: logn("*****    ", CAACKCode, ": Invalid Data or Argument    *****"); break;
		case 4: logn("*****    ", CAACKCode, ": Initiated For Asynchronous Completion    *****"); break;
		case 5: logn("*****    ", CAACKCode, ": Rejected - Invalid State    *****"); break;
		case 6: logn("*****    ", CAACKCode, ": Command Performed with Error    *****"); break;
		default: logn("*****    ", CAACKCode, ": Unknown Issue!    *****"); break;	
	}
}

ParsePPGNT(PPGNTCode){
	switch(PPGNTCode){
		case 0: logn("*****    ", PPGNTCode, ": Ok    *****"); break;
		case 1: logn("*****    ", PPGNTCode, ": Already Have    *****"); break;
		case 2: logn("*****    ", PPGNTCode, ": No Space    *****"); break;
		case 3: logn("*****    ", PPGNTCode, ": Invalid PPID    *****"); break;
		case 4: logn("*****    ", PPGNTCode, ": Busy, Try Later    *****"); break;
		case 5: logn("*****    ", PPGNTCode, ": Will Not Accept    *****"); break;
		case 6: logn("*****    ", PPGNTCode, ": Other Error    *****"); break;
		default: logn("*****    ", PPGNTCode, ": Unknown Issue!    *****"); break;	
	}
}

ParseACKC7(ACKCCode){
	switch(ACKCCode){
		case 0: logn("*****    ", ACKCCode, ": Accepted    *****"); break;
		case 1: logn("*****    ", ACKCCode, ": Permission Not Granted    *****"); break;
		case 2: logn("*****    ", ACKCCode, ": Length Error    *****"); break;
		case 3: logn("*****    ", ACKCCode, ": Matrix Overflow    *****"); break;
		case 4: logn("*****    ", ACKCCode, ": PPID Not Found    *****"); break;
		case 5: logn("*****    ", ACKCCode, ": Unsupported Mode    *****"); break;
		case 6: logn("*****    ", ACKCCode, ": Other Error    *****"); break;
		default: logn("*****    ", ACKCCode, ": Unknown Issue!    *****"); break;
	}
}

ParseHCAckCode(HcAckCode){
	switch(HcAckCode){
		case 0: logn("*****    ", HcAckCode, ": Ok - Command Completed    *****"); break;
		case 1: logn("*****    ", HcAckCode, ": Invalid Command    *****"); break;
		case 2: logn("*****    ", HcAckCode, ": Can not Perform Request Now    *****"); break;
		case 3: logn("*****    ", HcAckCode, ": Has invalid data or argument    *****"); break;
		case 4: logn("*****    ", HcAckCode, ": Tool Initiated for Asynchronous Completion    *****"); break;
		case 5: logn("*****    ", HcAckCode, ": Request was Rejected - Invalid State    *****"); break;
		case 6: logn("*****    ", HcAckCode, ": Invalid Object - Performed with errors    *****"); break;
		default: logn("*****    ", HcAckCode, ": Unknown Issue!    *****"); break;	
	}
}

ParseErrorCode(ErrCode){
	switch(ErrCode){
		case 0: logn("*****    ", ErrCode, ": Ok    *****");break;
		case 1: logn("*****    ", ErrCode, ": Unknown Object    *****");break;
		case 2: logn("*****    ", ErrCode, ": Unknown Class    *****");break;
		case 3: logn("*****    ", ErrCode, ": Unknown Object Instance    *****");break;
		case 4: logn("*****    ", ErrCode, ": Unknown Attribute Type    *****");break;
		case 5: logn("*****    ", ErrCode, ": Read-only Attribute    *****");break;
		case 6: logn("*****    ", ErrCode, ": Unknown Class    *****");break;
		case 7: logn("*****    ", ErrCode, ": Invalid Attribute Value    *****");break;
		case 8: logn("*****    ", ErrCode, ": Syntax Error    *****");break;
		case 9: logn("*****    ", ErrCode, ": Verification Error    *****");break;
		case 10: logn("*****    ", ErrCode, ": Validation Error    *****");break;
		case 11: logn("*****    ", ErrCode, ": Object ID in Use    *****");break;
		case 12: logn("*****    ", ErrCode, ": Improper Parameters    *****");break;
		case 13: logn("*****    ", ErrCode, ": Missing Parameters    *****");break;
		case 14: logn("*****    ", ErrCode, ": Unsupported Option Requested    *****");break;
		case 15: logn("*****    ", ErrCode, ": Busy    *****");break;
		case 16: logn("*****    ", ErrCode, ": Unavailable    *****");break;
		case 17: logn("*****    ", ErrCode, ": Command Not Valid in Current State    *****");break;
		case 18: logn("*****    ", ErrCode, ": No Material Altered    *****");break;
		case 19: logn("*****    ", ErrCode, ": Partially Processed    *****");break;
		case 20: logn("*****    ", ErrCode, ": All Material Processed    *****");break;
		case 21: logn("*****    ", ErrCode, ": Recipe Specification Error    *****");break;
		case 22: logn("*****    ", ErrCode, ": Failure When Processing    *****");break;
		case 23: logn("*****    ", ErrCode, ": Failure When not Processing    *****");break;
		case 24: logn("*****    ", ErrCode, ": Lack of Material    *****");break;
		case 25: logn("*****    ", ErrCode, ": Job Aborted    *****");break;
		case 26: logn("*****    ", ErrCode, ": Job Stopped    *****");break;
		case 27: logn("*****    ", ErrCode, ": Job Canceled    *****");break;
		case 28: logn("*****    ", ErrCode, ": Cannot Change Selected Recipe    *****");break;
		case 29: logn("*****    ", ErrCode, ": Unknown Event    *****");break;
		case 30: logn("*****    ", ErrCode, ": Duplicate Report ID    *****");break;
		case 31: logn("*****    ", ErrCode, ": Unknown Data Report    *****");break;
		case 32: logn("*****    ", ErrCode, ": Data Report not Linked    *****");break;
		case 33: logn("*****    ", ErrCode, ": Unknown Trace Report    *****");break;
		case 34: logn("*****    ", ErrCode, ": Duplicate Trace ID    *****");break;
		case 35: logn("*****    ", ErrCode, ": Too Many Reports    *****");break;
		case 36: logn("*****    ", ErrCode, ": Invalid Sample Period    *****");break;
		case 37: logn("*****    ", ErrCode, ": Group Size Too Large    *****");break;
		case 38: logn("*****    ", ErrCode, ": Recovery Action Invalid    *****");break;
		case 39: logn("*****    ", ErrCode, ": Busy With Previous Recovery    *****");break;
		case 40: logn("*****    ", ErrCode, ": No Active Recovery    *****");break;
		case 41: logn("*****    ", ErrCode, ": Recovery Failed    *****");break;
		case 42: logn("*****    ", ErrCode, ": Recovery Aborted    *****");break;
		case 43: logn("*****    ", ErrCode, ": Invalid Table Element    *****");break;
		case 44: logn("*****    ", ErrCode, ": Unknown Table Element    *****");break;
		case 45: logn("*****    ", ErrCode, ": Cannot Delete Predefined    *****");break;
		case 46: logn("*****    ", ErrCode, ": Invalid Token    *****");break;
		case 47: logn("*****    ", ErrCode, ": Invalid Parameter    *****");break;
		default: logn("*****    ", ErrCode, ": Unknown Issue!    *****");break;		
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////// ALL Stream Functionalities Posted below /////////////////////////////

public S1_F1_AreYouThere(){
	local mS1F2_Reply;
	logn(">>>>>> S1F1_AreYouThere <<<<<<<");
	mS1F2_Reply = S1F1_Request();
	S1F2_Parser(mS1F2_Reply);
}

////////////////////////////////////////////////////////
// Sending S1F3 to the tool with the VIDs user provided
////////////////////////////////////////////////////////
public S1_F3_GetVids(Vids){
	local i, mVid, mCount, mText, mStatus, mSecsVidList, mS1F4_Reply, mValues;
	if(!IsEmptyList(Vids)){
		S1F3VIDS = Vids;
	}else{
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all VIDs?\n";
		do{
			mVid = GuiGetString("Request VIDs info. Please enter Single or Multiple VIDs with comma separator.");
			mStatus = GuiMsgBox("Request Vids Info", CatString(mText, mVid), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			S1F3VIDS = MakeListFromString(mVid);
		}else{
			logn("Terminated per user's request");
		}
	}

	for(i = 0;i < GetCount(S1F3VIDS);i = i + 1){
		mVid = AtoI(S1F3VIDS[i]);
		mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
	}
	mS1F4_Reply = S1F3_Request(mSecsVidList);
	mValues = S1F4_Parser(mS1F4_Reply, mSecsVidList);
	//LookUpDict(mSecsVidList, mValues);			
}

//////////////////////////////////////////////////////////////////////////////////
// Sending S1F3 to verify whether tool is ready for the Host to take over control
//////////////////////////////////////////////////////////////////////////////////
S1_F3_GetSingleVid(Vid){
	local mVids, mS1F4_Reply, mValue;
	mVids = NewList(Vid);
	mS1F4_Reply = S1F3_Request(mVids);
	mValue = S1F4_Parser(mS1F4_Reply, NewList(mVids));
	return (mValue);
}

//////////////////////////////////////////////////////////////////////////////////
// Sending S1F3 to verify whether tool is ready for the Host to take over control
//////////////////////////////////////////////////////////////////////////////////
public S1_F3_IsToolOnlineRemote(){
	local mVids, mS1F4_Reply, mValues;
	logn(">>>>>> S1F3_IsToolOnlineRemote <<<<<<<");
	mVids = InsertFirst(S2_U4(33882384), mVids);
	mVids = InsertFirst(S2_U4(33554448), mVids);
	mS1F4_Reply = S1F3_Request(mVids);
	mValues = S1F4_Parser(mS1F4_Reply, mVids);
	if(mValues[0] == 5 && mValues[1] == 1){
		return(1);
	}else{
		return(0);
	}	
	//LookUpDict(mVids, mValues);
}

//////////////////////////////////////////////////////////////////////////////////
// Sending S1F3 to verify whether tool is ready for the Host to take over control
//////////////////////////////////////////////////////////////////////////////////
public S1_F3_IsRCReady(vid){
	local mVids, mS1F4_Reply, mValues;
	logn(">>>>>> S1_F3_IsRCReady <<<<<<<");
	mVids = InsertFirst(S2_U4(vid), mVids);
	mS1F4_Reply = S1F3_Request(mVids);
	mValues = S1F4_Parser(mS1F4_Reply, mVids);
	if(IsEmptyList(mValues)){
		return (0);
	}else if(mValues[0] == "RCReady" || mValues[0] == "Sample" || mValues[0] == 6){
		return (1);
	}
}

public _GetAllVIDsFromTool(){
	logn(">>>>>> _GetAllVIDsFromTool <<<<<<<");
	S1_F11_GetSVidNameList("ALL");
	S1_F21_GetDVidNameList("ALL");	
}

////////////////////////////////////////////////////////
// Sending S1F11 to the tool with the VIDs user provided
////////////////////////////////////////////////////////
public S1_F11_GetSVidNameList(VIDs){
	local i, mVid, mVids, mText, mStatus, mSecsVidList, mS1F12_Reply, mVIDs_Dict;
	logn(">>>>>> S1_F11_GetSVidNameList <<<<<<<");
	
	if(VIDs == ""){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all VIDs?\n";
		do{
			mVid = GuiGetString("Request VIDs info. Please enter Single or Multiple VIDs with comma separator or nothing for all VIDs");
			mStatus = GuiMsgBox("Request VIDs Info", CatString(mText, mVid), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			if(mVid != ""){
				mVids = MakeListFromString(mVid);
				for(i = 0;i < GetCount(mVids);i = i + 1){
					mVid = AtoI(mVids[i]);
					mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
				}
			}			
		}else{
			logn("Terminated per user's request");
		}	
	}
	
	mS1F12_Reply = S1F11_Request(mSecsVidList);
	mVIDs_Dict = S1F12_Parser(mS1F12_Reply);
	logn("There are: ", GetCount(mVIDs_Dict));
	//LookUpDict(mSecsVidList, mValues);
			
	// mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all VIDs?\n";
	// do{
		// mVid = GuiGetString("Request VIDs info. Please enter Single or Multiple VIDs with comma separator or nothing for all VIDs");
		// mStatus = GuiMsgBox("Request VIDs Info", CatString(mText, mVid), 3);
	// }while(mStatus == 7);

	// if(mStatus == 6){
		// if(mVid != ""){
			// mVids = MakeListFromString(mVid);
			// for(i = 0;i < GetCount(mVids);i = i + 1){
				// mVid = AtoI(mVids[i]);
				// mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
			// }
		// }

		// mS1F12_Reply = S1F11_Request(mSecsVidList);
		// mVIDs_Dict = S1F12_Parser(mS1F12_Reply);
		// logn("There are: ", GetCount(mVIDs_Dict));
		// //LookUpDict(mSecsVidList, mValues);			
	// }else{
		// logn("Terminated per user's request");
	// }
}

////////////////////////////////////////////////////////
// Sending S1F11 to the tool with the VIDs user provided
////////////////////////////////////////////////////////
public S1_F11_ForSpecificVIDsInFile(iFile){
	local mSecsVidList, mS1F12_Reply;

	mSecsVidList = GetVIDsInFile(iFile);
	mS1F12_Reply = S1F11_Request(mSecsVidList);
	mVIDs_Dict = S1F12_Parser(mS1F12_Reply);
	logn("There are: ", GetCount(mVIDs_Dict));			
}

////////////////////////////////////////////////////////
// Get VIDs from a file
////////////////////////////////////////////////////////
public GetVIDsInFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS1F12_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\VIDS.txt";
		logn("**** Select VIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains VIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;		
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		return (Reverse(mSecsVidList));		
	}
}
////////////////////////////////////////////////////////////////////////////////
// Sending S1F13 to verify whether tool is ready for the Host to take over control
////////////////////////////////////////////////////////////////////////////////
public S1_F13_EstablishCommunicationsRequest()
{
	local mS1F14_Reply, mS1F14List, mToolInfoList, mSoftRev, mCmdAck;
	logn(">>>>>> S1F13_EstablishCommunicationsRequest <<<<<<<");
	mS1F14_Reply	= S1F13_Request();
	mS1F14List		= Decode(mS1F14_Reply.Text);
	mCmdAck			= S2_Decode(mS1F14List[0]);
	mToolInfoList	= Decode(mS1F14List[1]);
	if(mCmdAck == 0){
		if(GetCount(mToolInfoList) == 2){
			TOOLTYPE	= Smart_Decode(mToolInfoList[0]);
			mSoftRev	= Smart_Decode(mToolInfoList[1]);
			logn("*****    TOOLTYPE: ", TOOLTYPE);
			logn("*****    mSoftRev: ", mSoftRev);

			if(TOOLTYPE == "EagleX" && AtoI(Substring(mSoftRev, 0, 4)) > 3.0)
				TOOLTYPE = "EPI";
		}
	}else if(mCmdAck == 1){
		logn("*****    Tool Denied S1F13 Request    *****");
	}else{
		logn("*****    Unknown Issue!    *****");
	}
}

//////////////////////////////////////////////////////////////
// Sending S1F15 to the tool to request Tool Offline
//////////////////////////////////////////////////////////////
public S1_F15_RequestToolOffline(){
	local mS1F16_Reply;
	logn(">>>>>> S1F15_RequestToolOffline <<<<<<<");
	mS1F16_Reply = S1F15_Request();
	S1F16_Parser(mS1F16_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S1F17 to the tool to request Tool Online
//////////////////////////////////////////////////////////////
public S1_F17_RequestToolOnline(){
	local mS1F18_Reply;
	logn(">>>>>> S1F17_RequestToolOnline <<<<<<<");
	mS1F18_Reply = S1F17_Request();
	S1F18_Parser(mS1F18_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S1F21 to the tool to request all DVIDs
//////////////////////////////////////////////////////////////
public S1_F21_GetDVidNameList(VIDs){
	local i, mVid, mVids, mCount, mText, mStatus, mSecsVidList, mS1F22_Reply, mVIDs_Dict;
	logn(">>>>>> S1_F21_GetDVidNameList <<<<<<<");
	
	if(VIDs == ""){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all DVIDs?\n";
		do{
			mVid = GuiGetString("Request DVIDs info. Please enter Single or Multiple DVIDs with comma separator or nothing for all DVIDs");
			mStatus = GuiMsgBox("Request DVIDs Info", CatString(mText, mVid), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			if(mVid != ""){
				mVids = MakeListFromString(mVid);
				for(i = 0;i < GetCount(mVids);i = i + 1){
					mVid = AtoI(mVids[i]);
					mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
				}
			}			
		}else{
			logn("Terminated per user's request");
		}	
	}
	
	mS1F22_Reply = S1F21_Request(mSecsVidList);
	mVIDs_Dict = S1F22_Parser(mS1F22_Reply);
	logn("There are: ", GetCount(mVIDs_Dict));
	//LookUpDict(mSecsVidList, mValues);
			
	// mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all DVIDs?\n";
	// do{
		// mVid = GuiGetString("Request DVIDs info. Please enter Single or Multiple DVIDs with comma separator or nothing for all DVIDs");
		// mStatus = GuiMsgBox("Request DVIDs Info", CatString(mText, mVid), 3);
	// }while(mStatus == 7);

	// if(mStatus == 6){
		// if(mVid != ""){
			// mVids = MakeListFromString(mVid);
			// for(i = 0;i < GetCount(mVids);i = i + 1){
				// mVid = AtoI(mVids[i]);
				// mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
			// }
		// }

		// mS1F22_Reply = S1F21_Request(mSecsVidList);
		// mVIDs_Dict = S1F22_Parser(mS1F22_Reply);
		// logn("There are: ", GetCount(mVIDs_Dict));
		// //LookUpDict(mSecsVidList, mValues);			
	// }else{
		// logn("Terminated per user's request");
	// }
}

//////////////////////////////////////////////////////////////
// Sending S1F23 to the tool to request all CEIDs
//////////////////////////////////////////////////////////////
public S1_F23_RequestAllCEIDs(){
	local mS1F24_Reply;
	logn(">>>>>> S1_F23_RequestAllCEIDs <<<<<<<");
	mS1F24_Reply = S1F23_Request();
	//S1F24_Parser(mS1F24_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S1F65 to the tool to request Tool OnlineLocal
//////////////////////////////////////////////////////////////
public S1_F65_RequestToolOnlineLocal(){
	local mS1F66_Reply;
	logn(">>>>>> S1F65_RequestToolOnlineLocal <<<<<<<");
	mS1F66_Reply = S1F65_Request();
	S1F66_Parser(mS1F66_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S1F67 to the tool to request Tool OnlineRemote
//////////////////////////////////////////////////////////////
public S1_F67_RequestToolOnlineRemote(){
	local mS1F68_Reply;
	logn(">>>>>> S1F67_RequestToolOnlineRemote <<<<<<<");
	mS1F68_Reply = S1F67_Request();
	S1F68_Parser(mS1F68_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F13 to the tool to request CEID list
//////////////////////////////////////////////////////////////
public S2_F13_GetAllEcidValues(){
	local mS2F14_Reply;
	logn(">>>>>> S2F13_GetAllECIDs <<<<<<<");
	mS2F14_Reply = S2F13_Request();
	S2F14_Parser(mS2F14_Reply);
}

////////////////////////////////////////////////////////
// Sending S2F13 to the tool with the ECIDs user provided
////////////////////////////////////////////////////////
public S2_F13_GetSomeEcidValues(){
	local i, mEcId, mEcIds, mCount, mText, mStatus, mSecsEcIdList, mS1F4_Reply, mValues;
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all ECIDs?\n";
	do{
		mEcId = GuiGetString("Request ECIDs info. Please enter Single or Multiple ECIDs with comma separator.");
		mStatus = GuiMsgBox("Request ECIDs Info", CatString(mText, mEcId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mEcIds = MakeListFromString(mEcId);
		for(i = 0;i < GetCount(mEcIds);i = i + 1){
			mEcId = AtoI(mEcIds[i]);
			mSecsEcIdList = InsertFirst(S2_U4(mEcId), mSecsEcIdList);
		}
		mS2F14_Reply = S2F13_Request(mSecsEcIdList);
		mValues = S2F14_Parser(mS2F14_Reply, mSecsEcIdList);
		logn("mValues: ", mValues);
		//LookUpDict(mSecsEcIdList, mValues);			
	}else{
		logn("Terminated per user's request");
	}
}

////////////////////////////////////////////////////////
// Sending S2F13 to the tool with the ECIDs user provided
////////////////////////////////////////////////////////
public S2_F13_ForECIDsInFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS2F14_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\ECIDS.txt";
		logn("**** Select ECIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains ECIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;				
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		mSecsVidList = Reverse(mSecsVidList);
		mS2F14_Reply = S2F13_Request(mSecsVidList);
		mValues = S2F14_Parser(mS2F14_Reply, mSecsVidList);	
	}
}
////////////////////////////////////////////////////////
// Sending S2F15 to the tool with the ECIDs user provided
////////////////////////////////////////////////////////
public S2_F15_SetEquipmentConstants(ECIDsSetting){
	local i, mEcId, mEcIds, mCount, mText, mStatus, mSecsEcIdList, mS1F6_Reply, mValues, mValue;
	local mObjFound, mNameValuePair, mS2F14_Reply, mFormat;
	logn(">>>>>> S2_F15_SetEquipmentConstants <<<<<<<");
	if (IsEmptyList(ECIDsSetting)){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all ECIDs?\n";
		do{
			mEcId = GuiGetString("Setting ECIDs. Enter one or many pairs ECIDs=Values with comma separator. Eg, 1234=12, 5678=12.12, 2345=1(1:true,0:false)");
			mStatus = GuiMsgBox("Setting ECIDs Values", CatString(mText, mEcId), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			mEcIds = MakeListFromString(mEcId);
		}else{
			logn("Terminated per user's request");
			return;
		}	
		
		for(i = 0;i < GetCount(mEcIds);i = i + 1){
			mNameValuePair = NewList();
			mEcIdAndValue = mEcIds[i];
			mObjFound = FindString(mEcIdAndValue, "=", 0);

			if(mObjFound.Count == 0){
				mStatus = GuiMsgBox("Your Setting ECIDs Values Invalid", "Format should be Ecid1=Val1, Ecid2=Val2", 0);
				return;
			}
			mEcId = AtoI(SubString(mEcIdAndValue, 0, mObjFound.Start)); //SubString from begin to "="		
			

			mValue = SubString(mEcIdAndValue, mObjFound.Start + 1); //SubString from "=" to end			
			mSecsEcIdList = InsertFirst(S2_U4(mEcId), mSecsEcIdList);		
			mS2F14_Reply = S2F13_Request(mSecsEcIdList);
			
			if(IsMessage(mS2F14_Reply) && mS2F14_Reply.text == ""){
				logn("INVALID mS2F14_Reply: ", mS2F14_Reply.text);
				return;
			}				
			
			mReplyInfo = Decode(mS2F14_Reply.text);
			mFormat = GetFormat(mReplyInfo[0]);			
			
			if(mFormat == "F4" || mFormat == "F8"){
				mValue = AToR(mValue);
			}else if(mFormat == "BOOLEAN"){
				mValue = AtoI(mValue);
			}
	
			mSecsEcIdList = NewList();
			mNameValuePair = InsertFirst(CatString("S2_", mFormat) (mValue), mNameValuePair);		
			mNameValuePair = InsertFirst(S2_U4(mEcId), mNameValuePair); //U2:0->65353, U4: 0->4,294,967,295	
			mSecsEcIdList = InsertFirst(S2_L(mNameValuePair), mSecsEcIdList);
		}
	}else{
		mSecsEcIdList = ECIDsSetting;
	}
		
	mS2F16_Reply = S2F15_Request(mSecsEcIdList);
	S2F16_Parser(mS2F16_Reply);
}

Public S2_F15_SetMaxDummyWafersForLP(PortID, Max){
	local mWID, mPID, mNameValuePair, mSecsEcIdList, mS2F16_Reply, mMax;
	logn("**** S2F15_SetDummyWafersForLP: ", PortID, " ****");
	if(TOOLTYPE == "SYN"){
		logn("**** Currently this feature is not for others except Synergis! ");
		return;
	}else if(PortID){
		mPID = PortID;
	}else{
		do{
			mPID = GuiGetInteger(CatString("SetDummyWafersForLP:", PortID, "\nPlease enter PID(1-4): (Default is 4)"));
			if(!mPID){
				mPID = 4; //Default value
			}
		}while(mPID < 1 && mPID > 4);
	}

	if(Max){
		mMax = Max;
	}else{
		mMax = 255;
	}

	for(mWID = 1;mWID < 26;mWID = mWID + 1){
		mNameValuePair = NewList();
		mECID = 17432544 + (16 * mWID) + mPID;
		mNameValuePair = InsertFirst(S2_U1(mMax), mNameValuePair); //Enter Value
		mNameValuePair = InsertFirst(S2_U4(mEcId), mNameValuePair); //Enter ECID U4: 0 to 4,294,967,295	
		mSecsEcIdList = InsertFirst(S2_L(mNameValuePair), mSecsEcIdList); //Enter Each Name/Value pair	

		mNameValuePair = NewList();
		mECID = 17431648 + (16 * mWID) + mPID;
		mNameValuePair = InsertFirst(S2_A("Dummy"), mNameValuePair); //Enter Value
		mNameValuePair = InsertFirst(S2_U4(mEcId), mNameValuePair); //Enter ECID U4: 0 to 4,294,967,295	
		mSecsEcIdList = InsertFirst(S2_L(mNameValuePair), mSecsEcIdList); //Enter Each Name/Value pair			
	}
	mS2F16_Reply = S2F15_Request(mSecsEcIdList);
	S2F16_Parser(mS2F16_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F17 to the tool to get Time&Date
//////////////////////////////////////////////////////////////
public S2_F17_GetDateTime(){
	local mS2F18_Reply;
	logn(">>>>>> S2F17_GetDateTime <<<<<<<");
	mS2F18_Reply = S2F17_Request();
	S2F18_Parser(mS2F18_Reply);
	return (Decode(mS2F18_Reply.text));
}

////////////////////////////////////////////////////////
// Sending S2F29 to the tool with the ECIDs user provided
////////////////////////////////////////////////////////
public S2_F29_GetEcidNameList(){
	local i, mEcId, mEcIds, mCount, mText, mStatus, mSecsEcIdList, mS2F30_Reply, mECIDs_Dict;
	logn(">>>>>> S2_F29_GetEcidNameList <<<<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all ECIDs?\n";
	do{
		mEcId = GuiGetString("Request ECIDs info. Please enter Single or Multiple ECIDs with comma separator or nothing for all ECIDs");
		mStatus = GuiMsgBox("Request ECIDs Info", CatString(mText, mEcId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		if(mEcId != ""){
			mEcIds = MakeListFromString(mEcId);
			for(i = 0;i < GetCount(mEcIds);i = i + 1){
				mEcId = AtoI(mEcIds[i]);
				mSecsEcIdList = InsertFirst(S2_U4(mEcId), mSecsEcIdList);
			}
		}

		mS2F30_Reply = S2F29_Request(mSecsEcIdList);
		mECIDs_Dict = S2F30_Parser(mS2F30_Reply);
		logn("There are: ", GetCount(mECIDs_Dict));
		//LookUpDict(mSecsEcIdList, mValues);			
	}else{
		logn("Terminated per user's request");
	}
}

////////////////////////////////////////////////////////
// Sending S2F29 to the tool with ECIDs specified in a file
////////////////////////////////////////////////////////
public S2_F29_ForSpecificECIDsInFile(iFile){
	local i, mFStatus, mVIDList, mVid, mSecsVidList, mS2F30_Reply, mValues, mGuiStrct, mStatus;
	if(!IsString(iFile)){
		//iFile = "C:\\ASM-Host\\Data\\ECIDS.txt";
		logn("**** Select ECIDs File ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains ECIDs";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		iFile = mGuiStrct.FileTitle;				
	}
		
	mFStatus = FindFile(iFile,"", FF_FILETITLEONLY);
	if (IsEmptyList(mFStatus)){
		logn("Thinh - ", iFile, " Currently does not exist!");
		return ;			
	}
	else{
		mVIDList = GetNumbers(iFile);
		for (i = 0; i < GetCount(mVIDList); i = i + 1){
			mVid = mVIDList[i];
			//logn("mVid: ", mVid);
			mSecsVidList = InsertFirst(S2_U4(mVid), mSecsVidList);
		}
		mSecsVidList = Reverse(mSecsVidList);
		mS2F30_Reply = S2F29_Request(mSecsVidList);
		mECIDs_Dict = S2F30_Parser(mS2F30_Reply);
		logn("There are: ", GetCount(mECIDs_Dict));
		//LookUpDict(mSecsEcIdList, mValues);			
	}
}

//////////////////////////////////////////////////////////////
// Sending S2F31 to the tool to set specific format DateTime
//////////////////////////////////////////////////////////////
public S2_F31_SetDateTime(DateTime){
	local mS2F32_Reply, mS2F18_Reply, mDTime, sPrompt;
	if(DateTime){
		mDTime = DateTime;
	}else{
		mS2F18_Reply = S2F17_Request();
		mDTime = Decode(mS2F18_Reply.text);

		mPrompt = CatString("Please enter Date Time:\n(Eg. ", mDTime, ")");
		do{
			mDTime = GuiGetString(mPrompt);
		}while(!mDTime);
	}
	logn(">>>>>> S2F31_SetDateTime: ", mDTime, " <<<<<<<");
	mS2F32_Reply = S2F31_Request(mDTime);
	S2F32_Parser(mS2F32_Reply);
}

public _SynchronizeTimeWithHost(){
	local mS2F18_Reply, mToolDTime, mHostDTime;
	logn(">>>>>> SynchronizeTimeWithHost <<<<<<<");
	mToolDTime = S2_F17_GetDateTime();
	logn("*****    mToolDTime: ", mToolDTime, "   *****");
	mHostDTime = GetDateTime();
	logn("*****    mHostDTime: ", mHostDTime, "   *****");
	if(mToolDTime != mHostDTime){
		logn("They are at different time!");
		S2_F31_SetDateTime(mHostDTime);		
	}else{
		logn("They are at the same time!");
	}
}

//////////////////////////////////////////////////////////////
// Sending S2F37 to the tool to delete all existing reports
//////////////////////////////////////////////////////////////
public S2_F33_DeleteAllExistingReports(){
	local mS2F34_Reply;
	logn(">>>>>> S2F33_DeleteAllExistingReports <<<<<<<");
	mS2F34_Reply = S2F33_Request(0);
	S2F34_Parser(mS2F34_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F35 to the tool to Disassociate all Events linked to Reports
//////////////////////////////////////////////////////////////
public S2_F35_DisassociateAllEventsReports(){
	local mS2F36_Reply;
	logn(">>>>>> S2F35_DisassociateAllEventsReports <<<<<<<");
	mS2F36_Reply = S2F35_Request(0);
	S2F36_Parser(mS2F36_Reply);
}

/////////////////////////////////////////////////////////////////////////////
// Sending S2F35 to the tool to Disassociate an Event with all linked Reports 
/////////////////////////////////////////////////////////////////////////////
public S2_F35_DisassociateSpecificEventsReports(){
	local i, mCeId, mCeIds, mText, mStatus, mS2F36_Reply;
	logn(">>>>>> S2F35_DisassociateEventWithReports <<<<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all CeIds ?\n";
	do{
		mCeId = GuiGetString("Request to Disassociate Events with Reports. Please enter Single or Multiple CeIds with comma separator.");
		mStatus = GuiMsgBox("Disassociate Events With All Linked Reports on Tool", CatString(mText, mCeId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mCeIds = MakeListFromString(mCeId);
		mS2F36_Reply = S2F35_Request(111, mCeIds);
		S2F36_Parser(mS2F36_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S2F37 to the tool to enable all CeIds the tool has
//////////////////////////////////////////////////////////////
public S2_F37_EnableAllEvents(){
	local mS2F38_Reply;
	logn(">>>>>> S2F37_EnableAllEvents <<<<<<<");
	mS2F38_Reply = S2F37_Request(1);
	S2F38_Parser(mS2F38_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F37 to the tool to disable all CeIds the tool has
//////////////////////////////////////////////////////////////
public S2_F37_DisableAllEvents(){
	local mS2F38_Reply;
	logn(">>>>>> S2F37_DisableAllEvents <<<<<<<");
	mS2F38_Reply = S2F37_Request(0);
	S2F38_Parser(mS2F38_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F37 to the tool to enable the CeIds user provided
//////////////////////////////////////////////////////////////
public S2_F37_EnableSomeEvents(){
	local i, mCeId, mCeIds, mText, mStatus, mSecsVidList, mS2F38_Reply;
	logn(">>>>>> S2F37_EnableSomeEvents <<<<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered all CeIds ?\n";
	do{
		mCeId = GuiGetString("Request to enable Events\nPlease enter Single or Multiple CeIds with comma separator.");
		mStatus = GuiMsgBox("Enable Events on Tool", CatString(mText, mCeId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mCeIds = MakeListFromString(mCeId);
		for(i = 0;i < GetCount(mCeIds);i = i + 1){
			mCeId = AtoI(mCeIds[i]);
			mSecsVidList = InsertFirst(S2_U4(mCeId), mSecsVidList);
		}
		mS2F38_Reply = S2F37_Request(1, mSecsVidList);
		S2F38_Parser(mS2F38_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//public S2_F41_ChangeCM1ModuleStateToProd(){S2_F41_ChangeModuleState("CM1", "Production");}
//////////////////////////////////////////////////////////////
// Sending S2F41 to the tool to change Module State
//////////////////////////////////////////////////////////////
S2_F41_ChangeModuleState(Module, State){
	local mS2F42_Reply;
	logn(">>>>>> S2F41_ChangeModuleState <<<<<<<");
	mS2F42_Reply = S2F41_Request(
									S2_A("CHANGEMODULESTATE"), 
									S2_L(
										S2_L(
											S2_A("MODULE"),
											S2_A(Module)
										),
										S2_L(
											S2_A("STATE"),
											S2_A("Operation")
										),
										S2_L(
											S2_A("REQUEST"),
											S2_A(State)
										)										
									)
								);
	S2F42_Parser(mS2F42_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F43 to the tool to turn off all streams
//////////////////////////////////////////////////////////////
public S2_F43_TurnOffAllStreamSpooling(){
	local mS2F38_Reply;
	logn(">>>>>> S2F43_TurnOffAllStreamSpooling <<<<<<<");
	mS2F44_Reply = S2F43_Request();
	S2F44_Parser(mS2F44_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F49 to the tool's LP1 with a specific command
//////////////////////////////////////////////////////////////
public S2_F49_SendEnhancedRemoteCommand(ObjSpec, RCmd, Settings){
	local mCommand, mText, mStatus, mS2F50_Reply, mObjSpec, mRemoteCmd, mRemCmd, mList;
	logn(">>>>>> S2F49_SendEnhancedRemoteCommand_LP1 <<<<<<<");

	if(ObjSpec && RCmd){
		mObjSpec = ObjSpec;
		mRemoteCmd = RCmd;
	}else{
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct Command ?\n";
		do{
			mRemCmd = GuiGetString("Request to send an Enhanced Remote Command. Please enter correct Command in the format: <ObjSpec, RCmd> (Eg. TM:LP1, LPOut)");
			mStatus = GuiMsgBox("Send Enhanced Remote Command <ObjSpec, RCmd> your specified as ==> ", CatString(mText, mRemoteCmd), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			mList = ConvertStringToList(mRemCmd);
			if(IsEmptyList(mList)){
				logn("******** INVALID ENTRY ********");
				return;
			}else{
				mObjSpec = mList[0];
				mRemoteCmd = mList[1];
			}
		}else{
			logn("Terminated per user's request");
			return;
		}
	}

	mS2F50_Reply = S2F49_Request(S2_U4(1), S2_A(mObjSpec), S2_A(mRemoteCmd), S2_L(Settings));
	S2F50_Parser(mS2F50_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S2F49 to the tool to request LP1 CIDIDRead
//////////////////////////////////////////////////////////////
public S2_F49_SETCONTROLMODE_Request(){
	logn(">>>>>> S2_F49_SETCONTROLMODE_Request <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:LP1", "LPChangeHost", S2_L(S2_A("HostMode"), S2_U4(1))); //0:Remote, 1:Local
}

//////////////////////////////////////////////////////////////
// Sending S2F49 to the tool to Initialize Reactors
//////////////////////////////////////////////////////////////
S2_F49_ReactorsInitialize_Request(){
	logn(">>>>>> S2_F49_ReactorsInitialize_Request <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:ALL", "TMAlarmReset");
	S2_F49_SendEnhancedRemoteCommand("PM1:ALL", "PMAlarmReset");
	S2_F49_SendEnhancedRemoteCommand("PM2:ALL", "PMAlarmReset");
	S2_F49_SendEnhancedRemoteCommand("PM3:ALL", "PMAlarmReset");
	S2_F49_SendEnhancedRemoteCommand("TM:FERB", "MTRInitialize");
	S2_F49_SendEnhancedRemoteCommand("TM:BERB", "MTRInitialize");
	S2_F49_SendEnhancedRemoteCommand("TM:ALN", "ALNInitialize");
}

S2_F49_SendRemoteCommandToLP(PortID, Command){
	logn(">>>>>> S2F49_SendRemoteCommandToLP", PortID, " : ", Command, " <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(PortID)), Command);
}

S2_F49_LP1_UIOSignalOFF_Request(){
	logn(">>>>>> S2F49_LP1_UIOSignalOFF_Request <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:UIO", "UIOSignalOFF");
}

S2_F49_LP2_UIOSignalOFF_Request(){
	logn(">>>>>> S2F49_LP2_UIOSignalOFF_Request <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:UIO", "UIOSignalOFF");
}

public S2_F49_LL1_BackFillRequest(){
	logn(">>>>>> S2F49_LLC1_BackFillRequest <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:LLC1", "LLCBackFill");
}

public S2_F49_LL2_BackFillRequest(){
	logn(">>>>>> S2F49_LLC1_BackFillRequest <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:LLC2", "LLCBackFill");
}

public S2_F49_LL1_PumpDownRequest(){
	logn(">>>>>> S2F49_LLC1_PumpDownRequest <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:LLC1", "LLCPumpDown");
}

public S2_F49_LL2_PumpDownRequest(){
	logn(">>>>>> S2F49_LLC1_PumpDownRequest <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:LLC2", "LLCPumpDown");
}

public S2_F49_ChangeRCModeToMaintenance(Pm){
	local mProcessModule, mDataList, mGuiStrct;
	if(!Pm){
		do{
			Pm = GuiGetInteger("Default is PM1\nIf not PM1 then please enter PM#: (Eg. 2 or 3 or 4)");
			if(!Pm)
				Pm = 1; //Default if not enter PM#
		}while(Pm < 1 && Pm > 4);
	}
	if(IsInteger(Pm)){
		Pm = ToAscii(Pm);
	}
	logn(">>>>>> S2F49_PM", Pm, "_ChangeRCModeToMaintenance <<<<<<<");
	mProcessModule = CatString("PM", Pm, ":RC");
	//mDataList = S2_L(S2_A("MODE"), S2_U1(1));
	mDataList = InsertFirst(S2_L(S2_A("MODE"), S2_U1(1)), mDataList);
	//mDataList = InsertFirst(S2_L(S2_A("UNIT"), S2_U1(29)), mDataList);
	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "RCModeChange", mDataList);
}

public S2_F49_ChangeRCModeToNormal(Pm){
	local mProcessModule, mDataList, mGuiStrct;
	if(!Pm){
		do{
			Pm = GuiGetInteger("Default is PM1\nIf not PM1 then please enter PM#: (Eg. 2 or 3 or 4)");
			if(!Pm)
				Pm = 1; //Default if not enter PM#
		}while(Pm < 1 && Pm > 4);
	}
	if(IsInteger(Pm)){
		Pm = ToAscii(Pm);
	}
	logn(">>>>>> S2F49_PM", Pm, "_ChangeRCModeToNormal <<<<<<<");
	mProcessModule = CatString("PM", Pm, ":RC");
	//mDataList = S2_L(S2_A("MODE"), S2_U1(1));
	mDataList = InsertFirst(S2_L(S2_A("MODE"), S2_U1(0)), mDataList);
	//mDataList = InsertFirst(S2_L(S2_A("UNIT"), S2_U1(29)), mDataList);
	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "RCModeChange", mDataList);
}

public S2_F49_PM_AlarmReset(Pm){
	local mProcessModule;
	if(!Pm){
		do{
			Pm = GuiGetInteger("Default is PM1\nIf not PM1 then please enter PM#: (Eg. 2 or 3 or 4)");
			if(!Pm)
				Pm = 1; //Default if not enter PM#
		}while(Pm < 1 && Pm > 4);
	}
	if(IsInteger(Pm)){
		Pm = ToAscii(Pm);
	}
	logn(">>>>>> S2F49_PM", Pm, "_Alarm_Reset <<<<<<<");
	mProcessModule = CatString("PM", Pm, ":ALL");
	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "PMAlarmReset");
}

public S2_F49_TM_AlarmReset(){
	logn(">>>>>> S2F49_TM_Alarm_Reset <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand("TM:ALL", "TMAlarmReset");
}

public S2_F49_TM_UIOSignalOFF(){
	local mProcessModule, mDataList;
	logn(">>>>>> S2F49_TM_UIOSignalOFF <<<<<<<");
	mProcessModule = CatString("TM:UIO");
	mDataList = InsertFirst(S2_L(S2_A("KIND"), S2_U1(1)), mDataList);
	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "UIOSignalOFF", mDataList);
}

public S2_F49_StartPMScript(Pm){
	local mProcessModule, mDataList, mGuiStrct, mPMScript;
	if(!Pm){
		do{
			Pm = GuiGetInteger("Default is PM1\nIf not PM1 then please enter PM#: (Eg. 2 or 3 or 4)");
			if(!Pm)
				Pm = 1; //Default if not enter PM#
		}while(Pm < 1 && Pm > 4);
	}
	if(IsInteger(Pm)){
		mDataList = InsertFirst(S2_L(S2_A("RCNo"), S2_U1(Pm)), mDataList);
		Pm = ToAscii(Pm);
	}
	logn(">>>>>> S2F49_PM", Pm, "_StartPMScript <<<<<<<");
	mProcessModule = CatString("PM", Pm, ":RC");
	mGuiStrct = NewStructured(GuiGFNB);
	mGuiStrct.WinTitle = "Select PMScript Recipe";
	mGuiStrct.FilePath = CatString(SCRTREC_DIR, "\PS", Pm);
	mStatus = GuiGetFileName(mGuiStrct);

	if(mStatus == 0){
		logn("Operation cancelled per user's request");
		return;
	}

	logn("PMScript: ", mGuiStrct.FileTitle);
	mPMScript = RemoveFileExtenstion(mGuiStrct.FileTitle);
	
	mDataList = InsertFirst(S2_L(S2_A("PMScriptName"), S2_A(mPMScript)), mDataList);
	
	mProcessModule = CatString("PM", Pm, ":RC");
	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "RCPMScriptStart", Reverse(mDataList));
}

public S2_F49_StartProcessRecipe(Pm){
	local mProcessModule, mDataList, mGuiStrct;
	if(!Pm){
		do{
			PortID = GuiGetInteger("Default is PM1\nIf not PM1 then please enter PM#: (Eg. 2 or 3 or 4)");
			if(!Pm)
				Pm = 1; //Default if not enter PM#
		}while(Pm < 1 && Pm > 4);
	}
	if(IsInteger(Pm)){
		//mDataList = InsertFirst(S2_L(S2_A("RCNo"), S2_U1(Pm)), mDataList);
		Pm = ToAscii(Pm);
	}
	logn(">>>>>> S2F49_PM", Pm, "_StartProcessRecipe <<<<<<<");
	mProcessModule = CatString("PM", Pm, ":RC");
	mGuiStrct = NewStructured(GuiGFNB);
	mGuiStrct.WinTitle = "Select Process Recipe";
	mStatus = GuiGetFileName(mGuiStrct);

	if(mStatus == 0){
		logn("Operation cancelled per user's request");
		return;
	}

	logn("Process Recipe: ", mGuiStrct.FileTitle);	
	
	mDataList = InsertFirst(S2_L(S2_A("RCPNAME"), S2_A(mGuiStrct.FileTitle)), mDataList);
	mDataList = InsertFirst(S2_L(S2_A("RCPNO"), S2_U1(1)), mDataList);
	mDataList = InsertFirst(S2_L(S2_A("COUNT"), S2_U1(1)), mDataList);
	//mDataList = InsertFirst(S2_L(S2_A("TIME"), S2_L(S2_A("1"))), mDataList); //This is optional
	//mDataList = InsertFirst(S2_L(S2_A("CYC"), S2_L(S2_A("1"))), mDataList); //This is optional

	S2_F49_SendEnhancedRemoteCommand(mProcessModule, "RCStart", Reverse(mDataList));
}

//////////////////////////////////////////////////////////////
// Sending S2F49 to the tool to request CIDIDRead @LP
//////////////////////////////////////////////////////////////
public S2_F49_CIDIDRead_Request(Cid){
	local mCID;
	if(Cid){
		mCID = Cid;
	}else{
		do{
			mCID = GuiGetString("Request to CIDIDRead for a FOUP. Please enter CID#: (Eg. 1");
		}while(mCID < 1 && mCID > 4);
	}
	logn(">>>>>> S2_F49_CID", mCID, "_CIDIDRead_Request <<<<<<<");
	S2_F49_SendEnhancedRemoteCommand(CatString("TM:CID", mCID), "CIDIDRead");
}
// S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", mLP), "LPMap", S2_L(S2_A("PURGE"), S2_U4(0)));
public S2_F49_LPMap_Request(PortID)		{Send_S2_F49_Request(PortID, "LPMap");}// Sending S2F49 to the tool to request LPMap for LP
public S2_F49_LPUnClamp_Request(PortID)	{Send_S2_F49_Request(PortID, "LPUnClamp");}// Sending S2F49 to the tool to request LPUnClamp for LP
public S2_F49_LPClamp_Request(PortID)	{Send_S2_F49_Request(PortID, "LPClamp");}// Sending S2F49 to the tool to request LPClamp for LP
public S2_F49_ABORG_Request(PortID)		{Send_S2_F49_Request(PortID, "ABORG");}// Sending S2F49 to the tool to request ABORG for LP
public S2_F49_LPLoad_Request(PortID)	{Send_S2_F49_Request(PortID, "LPLoadRequest");}// Sending S2F49 to the tool to request LPLoad for LP
public S2_F49_LPUnLoad_Request(PortID)	{Send_S2_F49_Request(PortID, "LPUnLoadRequest");}// Sending S2F49 to the tool to request LPUnLoad for LP
public S2_F49_LPIn_Request(PortID)		{Send_S2_F49_Request(PortID, "LPIn");}// Sending S2F49 to the tool to request LPIn for LP
public S2_F49_LPOut_Request(PortID)		{Send_S2_F49_Request(PortID, "LPOut");}// Sending S2F49 to the tool to request LPOut for LP
public S2_F49_UNDOCK_Request(PortID)	{Send_S2_F49_Request(PortID, "LPUnDock");}// Sending S2F49 to the tool to request UNDOCK a FOUP @LP
public S2_F49_DOCK_Request(PortID)		{Send_S2_F49_Request(PortID, "LPDock");}// Sending S2F49 to the tool to request DOCK a FOUP @LP
public S2_F49_NozzlePurge_Request(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "OHVNozzlePurge");}
public S2_F49_PreProcessPurge_Request(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "PurgeExecute");}
public S2_F49_NozzleUp_Request(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "LPN2Nozzle", 1);}
public S2_F49_NozzleDown_Request(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "LPN2Nozzle", 0);}
public S2_F49_LPPurgeMode_Enable(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "LPPurgeMode", 1);}
public S2_F49_LPPurgeMode_Disable(PortID)		{N2PURGE = 1; Send_S2_F49_Request(PortID, "LPPurgeMode", 0);}

Send_S2_F49_Request(PortID, Cmd, option){
	local mLP, sPrompt, mProcessModule, mSetting, mPurgeCmdList, mS2F50_Reply;
	
	if(PortID){
		mLP = PortID;
	}else{
		do{
			mLP = GuiGetInteger(CatString("Request ", Cmd, "\nPlease enter PID(1-4): (Default is 1)"));
			if(!mLP){
				mLP = 1; //Default value
			}
		}while(mLP < 1 && mLP > 4);
	}
	
	logn(">>>>>> S2F49_LP", ToAscii(mLP), "_", Cmd, "_Request <<<<<<<");
	logn("N2PURGE: ", N2PURGE);
	
	if(N2PURGE == 1){
		mProcessModule = "";
		mSetting = S2_L(S2_A("PortID"), S2_U1(mLP));
		
		if(Cmd == "PurgeExecute"){
			mPurgeCmdList = S2_L(S2_A("PurgeCmd"), S2_U1(1));			
			mS2F50_Reply = S2F49_Request(S2_U4(1), S2_A(mProcessModule), S2_A(Cmd), S2_L(mSetting, mPurgeCmdList));		
			S2F50_Parser(mS2F50_Reply);				
		}else if(Cmd == "LPN2Nozzle"){						
			mSetting = S2_L(S2_A("UPDOWN"), S2_U1(option));			
			S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(mLP)), Cmd, mSetting);			
		}else if(Cmd == "LPPurgeMode"){						
			mSetting = S2_L(S2_A("MODE"), S2_U1(option));			
			S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(mLP)), Cmd, mSetting);				
		}else{						
			mS2F50_Reply = S2F49_Request(S2_U4(1), S2_A(mProcessModule), S2_A(Cmd), S2_L(mSetting));
			S2F50_Parser(mS2F50_Reply);			
		}	
	}else{
		S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(mLP)), Cmd);
		// if(Cmd == "LPOut"){						
			// mSetting = S2_L(S2_A("PURGE"), S2_B(0));				
			// S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(mLP)), Cmd, mSetting);
		// }else{			
			// S2_F49_SendEnhancedRemoteCommand(CatString("TM:LP", ToAscii(mLP)), Cmd);
		// }
	}	
}

//////////////////////////////////////////////////////////////
// Sending S3F1 to the tool to request Material Status Info
//////////////////////////////////////////////////////////////
public S3_F1_MaterialStatusRequest(){
	local mS3F2_Reply;
	logn(">>>>>> S3F1_MaterialStatus_Request <<<<<<<");
	mS3F2_Reply = S3F1_Request();
	S3F2_Parser(mS3F2_Reply);
}

public S3_F11_MaterialInfo_Request(PortID){
	Send_S3_F11_MaterialInfo_Request(PortID);
} // Sending S3F11 to the tool to request MaterialInfo for LP

Send_S3_F11_MaterialInfo_Request(PortID){
	local mLP, sPrompt;
	if(PortID){
		mLP = PortID;
	}else{
		mPrompt = CatString("Request ", Cmd, " for LP. Please enter LP#: (Eg. any 1 to 4");
		do{
			mLP = GuiGetInteger(mPrompt);
		}while(mLP < 1 && mLP > 4);
	}
	logn(">>>>>> S3F11_LP", mLP, "_MaterialInfo_Request <<<<<<<");
	mS3F12_Reply = S3F11_Request(mLP);
	//S3F12_Parser(mS3F12_Reply);	
}

//////////////////////////////////////////////////////////////
// Sending S3F17 Carrier Action Request
//////////////////////////////////////////////////////////////
public S3_F17_CarrierActionRequest(CarrierAction, CarrierID, PortID, CAttribute){
	local mS3F18_Reply, mPortCID, mStatus;
	logn("->S3_F17_CarrierActionRequest()");
	if(CarrierID){
		mPortCID = CarrierID;
		CID = CarrierID;
	}else{
		CID = GetCIDAtLP(PortID);
	}
	logn(">>>>>> S3F17_", CarrierAction, " Carrier:", mPortCID, " LP:", PortID, " <<<<<<<");
	mStatus = 0;

	if(CAttribute == "")
		CAttribute = S2_L();
	else
		CAttribute = S2_L(CAttribute);

	if(N2PURGE == 1 && PURGEMODE == 1 && CarrierAction == "ProceedWithCarrier"){
		CAttribute = S2_L(S2_L(S2_A("PurgeMode"), S2_U1(1)));
		logn("Running with N2PURGE: ", CAttribute);
		//N2PURGE = 0;
	}
	
	if(mPortCID){
		mS3F18_Reply = S3F17_Request(S2_U4(0), S2_A(CarrierAction), S2_A(mPortCID), S2_U1(PortID), CAttribute);
		mStatus = S3F18_Parser(mS3F18_Reply);
	}else
		logn("There's no Carrier at LP", PortID);

	return (mStatus);
}

public S3_F17_ReserveAtPort(CarrierID, PortID) 				{Send_S3_F17_CarrierActionRequest("ReserveAtPort", CarrierID, PortID);}
public S3_F17_CarrierOut(CarrierID, PortID) 				{Send_S3_F17_CarrierActionRequest("CarrierOut", CarrierID, PortID);}
public S3_F17_CarrierReCreate(CarrierID, PortID) 			{Send_S3_F17_CarrierActionRequest("CarrierReCreate", CarrierID, PortID);}
public S3_F17_CancelCarrier(CarrierID, PortID) 				{Send_S3_F17_CarrierActionRequest("CancelCarrier", CarrierID, PortID);}
public S3_F17_CancelCarrierNotification(CarrierID, PortID) 	{Send_S3_F17_CarrierActionRequest("CancelCarrierNotification", CarrierID, PortID);}
public S3_F17_CancelCarrierAtPort(CarrierID, PortID) 		{Send_S3_F17_CarrierActionRequest("CancelCarrierAtPort", CarrierID, PortID);}
public S3_F17_CancelBind(CarrierID, PortID) 				{Send_S3_F17_CarrierActionRequest("CancelBind", CarrierID, PortID);}
public S3_F17_ProceedWithCarrier(CarrierID, PortID) 		{Send_S3_F17_CarrierActionRequest("ProceedWithCarrier", CarrierID, PortID);}
public S3_F17_CarrierRelease(CarrierID, PortID) 			{Send_S3_F17_CarrierActionRequest("CarrierRelease", CarrierID, PortID);}

public S3_F17_ProceedWithCarrier_PurgeEnabled(CarrierID, PortID) 		{N2PURGE =1; PURGEMODE = 1; Send_S3_F17_CarrierActionRequest("ProceedWithCarrier", CarrierID, PortID);}

Send_S3_F17_CarrierActionRequest(Cmd, CarrierID, PortID){
	local mCID, mPID, mStatus;
	//logn(Cmd, CarrierID, PortID);

	if(PortID){
		mPID = PortID;
	}else{
		do{
			mPID = GuiGetInteger(CatString("Request ", Cmd, "\nPlease enter PID(1-4): (Default is 1)"));
			if(!mPID){
				mPID = 1; //Default value
			}
		}while(mPID < 1 && mPID > 4);
	}

	if(CarrierID){
		mCID = CarrierID;
	}else{
		mCID = GetCIDAtLP(mPID);
	}

	logn(">>>>>> S3_F17_", Cmd, "_CID", mCID, "_LP", mPID, "_Request <<<<<<<");
	mStatus = S3_F17_CarrierActionRequest(Cmd, mCID, mPID);
	if (Cmd == "ProceedWithCarrier"){
		if(mStatus){
			N2PURGE = 0;
			logn("Sucessful with N2Purge. Reset N2PURGE to ", N2PURGE);
		}
	}
}

//////////////////////////////////////////////////////////////
// Sending S3F17 with Bind Service Request For LoadPort1
//////////////////////////////////////////////////////////////
public S3_F17_BindServiceRequest_LP1(BindInfo){
	local i, mLotIdAndWaferIds, mLotID, mWaferID, mText, mStatus, mS3F18_Reply, mBindInfo, mFirstEntry, mSlotMap, mContentMap;
	logn(">>>>>> S3_F17_BindServiceRequest_LP1 <<<<<<<");

	if(IsString(BindInfo)){
		mLotIdAndWaferIds = BindInfo;
		mStatus = 6;
	}else{
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct Bind Info ?\n";
		do{
			mLotIdAndWaferIds = GuiGetString("Request to send Bind cmd on LP1\nPlease enter your LotId and WaferIds.\nEg. LotABC: WaferA, WaferB, WaferC, ...");
			mStatus = GuiMsgBox("Binding on LP1", CatString(mText, mLotIdAndWaferIds), 3);
		}while(mStatus == 7);
	}

	if(mStatus == 6){
		mBindInfo = MakeListFromString(mLotIdAndWaferIds);
		mFirstEntry = mBindInfo[0];

		mObjFound = FindString(mFirstEntry, ":", 0);
		if(mObjFound.Count == 0){
			mStatus = GuiMsgBox("Provided Bind Info is Invalid", "Format must be LotABC: WaferA, WaferB, WaferC, ...", 0);
			return;
		}

		mLotID = SubString(mFirstEntry, 0, mObjFound.Start);
		mWaferID = SubString(mFirstEntry, mObjFound.Start + 1);
		mWaferInfo = InsertFirst(S2_A(mWaferID), mWaferInfo);
		mWaferInfo = InsertFirst(S2_A(mLotID), mWaferInfo);
		mContentMap = InsertFirst(S2_L(mWaferInfo), mContentMap);
		mSlotMap = InsertFirst(S2_U1(3), mSlotMap);
		LP1_CID = mLotID;

		for(i = 1;i < GetCount(mBindInfo);i = i + 1){
			mWaferInfo = NewList();
			mWaferID = mBindInfo[i];
			mWaferInfo = InsertFirst(S2_A(mWaferID), mWaferInfo);
			mWaferInfo = InsertFirst(S2_A(mLotID), mWaferInfo);
			mContentMap = InsertFirst(S2_L(mWaferInfo), mContentMap);
			mSlotMap = InsertFirst(S2_U1(3), mSlotMap);
		}

		for(i = GetCount(mContentMap);i < 25;i = i + 1){
			mContentMap = InsertFirst(S2_L(S2_A(""), S2_A("")), mContentMap);
			mSlotMap = InsertFirst(S2_U1(3), mSlotMap);
		}

		mS3F18_Reply = S3F17_Request(
										S2_U4(0), 
										S2_A("Bind"), 
										S2_A(mLotID), 
										S2_U1(1), 
										S2_L(
											S2_L(
												S2_A("Capacity"), 
												S2_U1(25)
											),
											S2_L(
												S2_A("ContentMap"),
												S2_L(Reverse(mContentMap))
											),
											S2_L(
												S2_A("SlotMap"),
												S2_L(Reverse(mSlotMap))
											),
											S2_L(
												S2_A("SubstrateCount"),
												S2_U1(GetCount(mBindInfo))
											),
											S2_L(
												S2_A("Usage"),
												S2_A("PRODUCT")
											)
										)
									);
		mStatus = S3F18_Parser(mS3F18_Reply);
	}else{
		mStatus = -1;
		logn("Terminated per user's request");
	}

	return (mStatus);
}

//////////////////////////////////////////////////////////////
// Sending S3F17 'ProceedWithCarrier' Action For LoadPort1
//////////////////////////////////////////////////////////////
public S3_F17_PWC_With_SlotMap(cid){
	local mCarrierId, mText, mStatus, mS3F18_Reply;
	mCarrierID = cid;
	logn(">>>>>> S3F17_LP1_ProceedWithCarrier_SlotMap <<<<<<<");
	if(mCarrierID == ""){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
		do{
			mCarrierId = GuiGetString("Request to send ProceedWithCarrier on LP1\nPlease enter correct CarrierId");
			mStatus = GuiMsgBox("ProceedWithCarrier on LP1", CatString(mText, mCarrierId), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			if(mCarrierID == "")
				mCarrierID = "1";
		}else{
			logn("Terminated per user's request");
			return;
		}	
	}
		
	mS3F18_Reply = S3F17_Request(
								S2_U4(0), 
								S2_A("ProceedWithCarrier"), 
								S2_A(mCarrierId), 
								S2_U1(1), 
								S2_L(
									S2_A("SlotMap"),
									S2_L(
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3),
										S2_U1(3)
										)
									)
								);
	S3F18_Parser(mS3F18_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F17 'ProceedWithCarrier' Action For LoadPort1
//////////////////////////////////////////////////////////////
public S3_F17_PWC_With_ContentMap(cid){
	local mCarrierId, mText, mStatus, mS3F18_Reply;
	mCarrierID = cid;
	logn(">>>>>> S3F17_LP1_ProceedWithCarrier_SlotMap <<<<<<<");
	if(mCarrierID == ""){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
		do{
			mCarrierId = GuiGetString("Request to send ProceedWithCarrier on LP1\nPlease enter correct CarrierId");
			mStatus = GuiMsgBox("ProceedWithCarrier on LP1", CatString(mText, mCarrierId), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			if(mCarrierID == "")
				mCarrierID = "1";
		}else{
			logn("Terminated per user's request");
			return;
		}	
	}
		
	mS3F18_Reply = S3F17_Request(
								S2_U4(0), 
								S2_A("ProceedWithCarrier"), 
								S2_A(mCarrierId), 
								S2_U1(1), 
								S2_L(
									S2_A("ContentMap"),
									S2_L(
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".1"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".2"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".3"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".4"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".5"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".6"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".7"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".8"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".9"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".10"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".11"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".12"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".13"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".14"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".15"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".16"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".17"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".18"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".19"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".20"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".21"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".22"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".23"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".24"))										
											),
										S2_L(
											S2_A(mCarrierId), 
											S2_A(CatString(mCarrierId, ".25"))										
											)
										)
									)
								);
	S3F18_Parser(mS3F18_Reply);	
}

//////////////////////////////////////////////////////////////
// Sending S3F25 to the tool to change LP's Status
//////////////////////////////////////////////////////////////
S3_F25_ChangeService_LP(portID, service){
	local mS3F26_Reply;
	logn(">>>>>> S3F25_ChangeService_LP", portID, " <<<<<<<");

	if(TOOLTYPE == "Mecca"){
		mS3F26_Reply = S3F25_Request(S2_A("IN SERVICE"), //PortAction
		S2_U1(portID), //PortID
		S2_L());
	}else{
		mS3F26_Reply = S3F25_Request(S2_A("ChangeServiceStatus"), //PortAction
		S2_U1(portID), //PortID
		S2_L(S2_L(S2_A("ServiceStatus"), S2_U1(service) //0: OUT OF SERVICE, 1:IN SERVICE
		)));
	}

	S3F26_Parser(mS3F26_Reply);
}

public S3_F25_ChangeToInService_LP1() {S3_F25_ChangeService_LP(1, 1);}
public S3_F25_ChangeToOutService_LP1() {S3_F25_ChangeService_LP(1, 0);}
public S3_F25_ChangeToInService_LP2() {S3_F25_ChangeService_LP(2, 1);}
public S3_F25_ChangeToOutService_LP2() {S3_F25_ChangeService_LP(2, 0);}

//////////////////////////////////////////////////////////////
// Sending S3F25 to the tool to make Reservation LP1
//////////////////////////////////////////////////////////////
public S3_F25_ChangeToReservation_LP1(){
	local mS3F26_Reply;
	logn(">>>>>> S3F25_ChangeToReservation_LP1 <<<<<<<");
	mS3F26_Reply = S3F25_Request(S2_A("ReservationAtPort"), //PortAction
	S2_U1(1), //PortID
	S2_L(S2_L(S2_A("ServiceStatus"), S2_U1(1) //0: OUT OF SERVICE, 1:IN SERVICE
	)));
	S3F26_Parser(mS3F26_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F27 to the tool to change LP1 to MANUAL Mode
//////////////////////////////////////////////////////////////
public S3_F27_ChangeToManualMode_LP1(){
	local mS3F28_Reply;
	logn(">>>>>  S3F27_ChangeToManualMode_LP1  <<<<<");
	mS3F28_Reply = S3F27_Request(S2_U1(0), S2_L(S2_U1(1)));
	S3F28_Parser(mS3F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F27 to the tool to change LP2 to MANUAL Mode
//////////////////////////////////////////////////////////////
public S3_F27_ChangeToManualMode_LP2(){
	local mS3F28_Reply;
	logn(">>>>>  S3F27_ChangeToManualMode_LP2  <<<<<");
	mS3F28_Reply = S3F27_Request(S2_U1(0), S2_L(S2_U1(2)));
	S3F28_Parser(mS3F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F27 to the tool to change LP1 to AUTO Mode
//////////////////////////////////////////////////////////////
public S3_F27_ChangeToAutoMode_LP1(){
	local mS3F28_Reply;
	logn(">>>>>  S3F27_ChangeToAutoMode_LP1  <<<<<");
	mS3F28_Reply = S3F27_Request(S2_U1(1), S2_L(S2_U1(1)));
	S3F28_Parser(mS3F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F27 to the tool to change LP2 to AUTO Mode
//////////////////////////////////////////////////////////////
public S3_F27_ChangeToAutoMode_LP2(){
	local mS3F28_Reply;
	logn(">>>>>  S3F27_ChangeToAutoMode_LP2  <<<<<");
	mS3F28_Reply = S3F27_Request(S2_U1(1), S2_L(S2_U1(2)));
	S3F28_Parser(mS3F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S3F27 to the tool to change to AUTO Mode all 3 LPs
//////////////////////////////////////////////////////////////
public S3_F27_ChangeToAutoMode_3LP(){
	local mS3F28_Reply;
	logn(">>>>>  S3F27_ChangeToAutoMode_3LP  <<<<<");
	mS3F28_Reply = S3F27_Request(S2_U1(1), S2_L(S2_U1(1), S2_U1(2), S2_U1(3)));
	S3F28_Parser(mS3F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S5F3 to the tool to Enable All Alarms
//////////////////////////////////////////////////////////////
public S5_F3_EnableAllAlarms(){
	local mS5F4_Reply;
	logn(">>>>>  S5F3_EnableAllAlarms  <<<<<");
	mS5F4_Reply = S5F3_Request(S2_B(128), S2_U4());
	S5F4_Parser(mS5F4_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S5F3 to the tool to Disable All Alarms
//////////////////////////////////////////////////////////////
public S5_F3_DisableAllAlarms(){
	local mS5F4_Reply;
	logn(">>>>>  S5F3_DisableAllAlarms  <<<<<");
	mS5F4_Reply = S5F3_Request(S2_B(0), S2_U4());
	S5F4_Parser(mS5F4_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S5F3 to the tool to Enable an Alarm
//////////////////////////////////////////////////////////////
public S5_F3_EnableSingleAlarm(){
	local mALID, mText, mStatus, mS5F4_Reply;
	logn(">>>>>  S5F3_EnableAlarm  <<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct ALID ?\n";
	do{
		mALID = GuiGetString("Request to Enable an Alarm\nPlease enter correct ALID");
		mStatus = GuiMsgBox("Enable an Alarm on Tool", CatString(mText, mALID), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS5F4_Reply = S5F3_Request(S2_B(128), S2_U4(AtoI(mALID)));
		S5F4_Parser(mS5F4_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S5F3 to the tool to disable an Alarm
//////////////////////////////////////////////////////////////
public S5_F3_DisableSingleAlarm(){
	local mALID, mText, mStatus, mS5F4_Reply;
	logn(">>>>>> S5F3_DisableAlarm <<<<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct ALID ?\n";
	do{
		mALID = GuiGetString("Request to Disable an Alarm\nPlease enter correct ALID");
		mStatus = GuiMsgBox("Disable an Alarm on Tool", CatString(mText, mALID), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS5F4_Reply = S5F3_Request(S2_B(0), S2_U4(AtoI(mALID)));
		S5F4_Parser(mS5F4_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S5F5 to the tool to Request the List of All Alarms
//////////////////////////////////////////////////////////////
public S5_F5_RequestListOfAllAlarms(){
	local mS5F6_Reply;
	logn(">>>>>  S5F5_RequestListOfAllAlarms  <<<<<");
	mS5F6_Reply = S5F5_Request(S2_U4());
	S5F6_Parser(mS5F6_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S5F7 to the tool to Request the List of Enabled Alarms
//////////////////////////////////////////////////////////////
public S5_F7_RequestListOfEnabledAlarms(){
	local mS5F8_Reply;
	logn(">>>>>  S5F7_RequestListOfEnabledAlarms  <<<<<");
	mS5F8_Reply = S5F7_Request();
	S5F8_Parser(mS5F8_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S6F15 to the tool to request Event Report
//////////////////////////////////////////////////////////////
public S6_F15_RequestEventsReport(){
	local mCeId, mText, mStatus, mS6F16_Reply;
	logn(">>>>>> S6F15_RequestEventsReport <<<<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CEID ?\n";
	do{
		mCeId = GuiGetString("Request an Event Report\nPlease enter correct CEID");
		mStatus = GuiMsgBox("Request Events Report", CatString(mText, mCeId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS6F16_Reply = S6F15_Request(AtoI(mCeId));
		S6F16_Parser(mS6F16_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S6F19 to the tool to request specific report's info
//////////////////////////////////////////////////////////////
public S6_F19_RequestReportVIDs(ReportIDs){
	local i, mRptID, mRptIds, mStringIds, mText, mStatus;
	logn(">>>>>> S6F19_RequestSpecificReportInfo <<<<<<<");	
    mRptIds = ReportIDs;
	
	if(IsEmptyList(mRptIds)){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct RPID ?\n";
		do{
			mStringIds = GuiGetString("Request Report Info. Please enter Single or Multiple RPTIDs with comma separator.");
			mStatus = GuiMsgBox("Request Report Info!", CatString(mText, mStringIds), 3);
		}while(mStatus == 7);

		if(mStatus == 6){
			mRptIds = MakeListFromString(mStringIds);
		}else{
			logn("Terminated per user's request");
		}
	}
	for(i = 0;i < GetCount(mRptIds);i = i + 1){
		mRptID = AtoI(mRptIds[i]);
		S6F19_Request(mRptID);
	}	
}


//////////////////////////////////////////////////////////////
// Sending S6F23 to the tool to request Purge Spooled Data
//////////////////////////////////////////////////////////////
public S6_F23_PurgeSpooledData(){
	local mS6F24_Reply;
	logn(">>>>>  S6F23_PurgeSpooledData  <<<<<");
	mS6F24_Reply = S6F23_Request(1);
	S6F24_Parser(mS6F24_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S7F3 to Send Process Program to the Tool
//////////////////////////////////////////////////////////////
public S7_F3_DownloadProcessProgramToTool(RecipeName){
	local mS7F4_Reply, mReplyInfo, mRecipeName, mGuiStrct, mFullPathFile, mText;
	logn(">>>>>  S7F3_DownloadProcessProgramToTool  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Download to the Tool";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mRecipeName = mGuiStrct.FileTitle;
			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, mRecipeName);
		}
	}else{
		mRecipeName = RecipeName;
		mFullPathFile = _AddLeaf(".\\", mRecipeName);
	}

	logn("mFullPathFile: ", mFullPathFile);
	mText = FileRead(mFullPathFile);
	mText = CheckSECSFormat(mText); //way to convert it back to secs object	
	mS7F4_Reply = S7F3_Request(mText);
	wait(NewTimer(2));	//sleep for 2 secs
	S7F4_Parser(mS7F4_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S7F5 to request uploaded Recipe in Binary by Tool
//////////////////////////////////////////////////////////////
public S7_F5_UploadUNFormattedRecipeToHost(RecipeName){
	local mS7F6_Reply, mReplyInfo, mRecipeName, mGuiStrct, mLeaf, mFullPathFile, mExt, mRecNameNoExt;
	logn(">>>>>  S7F5_UploadUNFormattedRecipeToHost  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Upload to the Host";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			mRecNameNoExt = RemoveFileExtenstion(mGuiStrct.FileTitle);
			if(mLeaf == "PJRecipe"){
				mRecipeName = mRecNameNoExt;
				mExt = ".pjr";
			}else{
				mRecipeName = CatString(mLeaf, "|", mRecNameNoExt);

				if(mLeaf == PM1){
					mExt = ".r1r";
				}else if(mLeaf == PM2){
					mExt = ".r2r";
				}else if(mLeaf == PM3){
					mExt = ".r3r";
				}else if(mLeaf == PM4){
					mExt = ".r4r";
				}else if(mLeaf == "SEQ"){
					mExt = ".pjr";
				}
			}

			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, CatString(mRecNameNoExt, mExt));
		}
	}else{
		mRecipeName = CatString(RecipeName, ".pjr");
		mFullPathFile = _AddLeaf(".\\", mRecipeName);
	}
	mS7F6_Reply = S7F5_Request(mRecipeName);
	S7F6_Parser(mS7F6_Reply);

	if(IsEmptyList(Decode(mS7F6_Reply.text)))
		logn("Empty Response. Check Recipe on the Tool");
	else if(IsEmptyList(filewrite(mFullPathFile, mS7F6_Reply.text)))
		logn("Thinh - Operation was failed!");
	else
		logn("Uploaded Recipe: ", mFullPathFile);
}

//////////////////////////////////////////////////////////////
// Sending S7F17 to request Tool to delete Recipe
//////////////////////////////////////////////////////////////
public S7_F17_DeleteRecipeRequest(RecipeName){
	local mS7F6_Reply, mReplyInfo, mRecipeName, mGuiStrct, mLeaf, mFullPathFile, mExt;
	logn(">>>>>  S7F17_DeleteRecipeRequest  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Delete in the Tool";
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			logn("mLeaf: ", mLeaf);

			if(mLeaf == "PJRecipe"){
				mRecipeName = RemoveFileExtenstion(mGuiStrct.FileTitle);
			}else{
				if(TOOLTYPE == "Mecca"){
					mRecipeName = CatString("/", mLeaf, "/", RemoveFileExtenstion(mGuiStrct.FileTitle));
				}else{
					mRecipeName = CatString(mLeaf, "|", RemoveFileExtenstion(mGuiStrct.FileTitle));
				}
			}
		}
	}

	//logn("mRecipeName: ", mRecipeName);
	mS7F18_Reply = S7F17_Request(S2_A(mRecipeName));
	S7F18_Parser(mS7F18_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S7F19 to request Current Process Program Info
//////////////////////////////////////////////////////////////
public S7_F19_GetCurrentProcessPrograms(){
	local i, mS7F20_Reply, mReplyInfo, mRECOBJ, mFound, mFullPathRecipe;
	logn(">>>>>  S7F19_GetCurrentProcessPrograms  <<<<<");
	mS7F20_Reply = S7F19_Request();
	S7F20_Parser(mS7F20_Reply);
	mReplyInfo = Decode(mS7F20_Reply.text);
	RECIPES = NewList();

	for(i = 0;i < GetCount(mReplyInfo);i = i + 1){
		mFullPathRecipe = Smart_Decode(mReplyInfo[i]);
		if(TOOLTYPE == "Mecca"){
			mFullPathRecipe = FindAndReplace(mFullPathRecipe, "/", "\\");
			mFullPathRecipe = FindAndReplace(mFullPathRecipe, ">", "");
		}
		//logn("Found available recipe: ", mFullPathRecipe);
		mRECOBJ = NewStructured(RECOBJ);
		mRECOBJ.origfullname = mFullPathRecipe;
		mFound = FindString(mFullPathRecipe, "|");
		if(mFound.Count > 0){
			mRECOBJ.folder = SubString(mFullPathRecipe, 0, mFound.Start);
			mRECOBJ.name = SubString(mFullPathRecipe, mFound.Start + 1);
		}else{
			mRECOBJ.folder = ".\\";
			mRECOBJ.name = SubString(mFullPathRecipe, 0);
		}

		RECIPES = InsertFirst(mRECOBJ, RECIPES);
	}
}

//////////////////////////////////////////////////////////////////////////
// Sending S7F23 to Download Formatted Process Program to The Tool
//////////////////////////////////////////////////////////////////////////
public S7_F23_DownloadFormattedProcessProgramToTool(RecipeName){
	local mText, mStatus, mS7F24_Reply, mGuiStrct, mRecipeName, mFullPathFile;
	local mSendMsg, mReplyMsg;
	logn(">>>>>  S7F23_DownloadFormattedProcessProgramToTool  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Download to the Tool";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mRecipeName = mGuiStrct.FileTitle;
		}
	}else{
		mRecipeName = RecipeName;
	}

	//logn("FilePath: ", mGuiStrct.FilePath);
	mFullPathFile = _AddLeaf(mGuiStrct.FilePath, mRecipeName);
	//logn("mFullPathFile: ", mFullPathFile);
	mText = FileRead(mFullPathFile);
	mText = CheckSECSFormat(mText); //way to convert it back to secs object
	mS7F24_Reply = S7F23_Request(mText);
	wait(NewTimer(1));	//sleep for 1 sec
	S7F24_Parser(mS7F24_Reply);
}

//////////////////////////////////////////////////////////////////////////
// Sending S7F25 to request Formatted Process Program Uploaded to The Host
//////////////////////////////////////////////////////////////////////////
public S7_F25_UploadFormattedProcessProgramToHost(RecipeName){
	local mStatus, mS7F26_Reply, mGuiStrct, mRecipeName, mFullPathFile, mLeaf, mExt, mRecNameOnly;
	logn(">>>>>  S7F25_UploadFormattedProcessProgramToHost  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Upload to the Host";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			logn("mLeaf: ", mLeaf);
			mRecNameNoExt = RemoveFileExtenstion(mGuiStrct.FileTitle);
			if(mLeaf == "PJRecipe"){
				mRecipeName = mRecNameNoExt;
				mExt = ".pjr.txt";
			}else{
				if(TOOLTYPE == "Mecca"){
					mRecipeName = CatString("/", mLeaf, "/", mRecNameNoExt);
				}else{
					mRecipeName = CatString(mLeaf, "|", mRecNameNoExt);
				}

				if(mLeaf == PM1){
					mExt = ".r1t";
				}else if(mLeaf == PM2){
					mExt = ".r2t";
				}else if(mLeaf == PM3){
					mExt = ".r3t";
				}else if(mLeaf == PM4){
					mExt = ".r4t";
				}else if(mLeaf == "SEQ"){
					mExt = ".pjr.txt";
				}
			}

			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, CatString(mRecNameNoExt, mExt));
		}
	}else{
		mRecipeName = RecipeName;
		mExt = ".pjr.txt";
		mFullPathFile = _AddLeaf(".\\", CatString(mRecipeName, mExt));
	}

	mS7F26_Reply = S7F25_Request(mRecipeName);
	S7F26_Parser(mS7F26_Reply);

	if(IsEmptyList(Decode(mS7F26_Reply.text)))
		logn("Empty Response. Check Recipe on the Tool");
	else if(IsEmptyList(filewrite(mFullPathFile, mS7F26_Reply.text)))
		logn("Thinh - Operation was failed!");
	else
		logn("Uploaded Recipe: ", mFullPathFile);
}

//////////////////////////////////////////////////////////////////////////
// Sending S7F25 to request Formatted Process Program Uploaded to The Host then continue sending back to Tool
//////////////////////////////////////////////////////////////////////////
public S7F25_ULToHost_S7F23_DLToTool(RecipeName){
	local mStatus, mS7F26_Reply, mGuiStrct, mRecipeName, mFullPathFile, mLeaf, mExt, mRecNameOnly;
	logn(">>>>>  S7F25_UploadFormattedProcessProgramToHost  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Upload to the Host";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			logn("mLeaf: ", mLeaf);
			mRecNameNoExt = RemoveFileExtenstion(mGuiStrct.FileTitle);
			if(mLeaf == "PJRecipe"){
				mRecipeName = mRecNameNoExt;
				mExt = ".pjr.txt";
			}else{
				if(TOOLTYPE == "Mecca"){
					mRecipeName = CatString("/", mLeaf, "/", mRecNameNoExt);
				}else{
					mRecipeName = CatString(mLeaf, "|", mRecNameNoExt);
				}

				if(mLeaf == PM1){
					mExt = ".r1t";
				}else if(mLeaf == PM2){
					mExt = ".r2t";
				}else if(mLeaf == PM3){
					mExt = ".r3t";
				}else if(mLeaf == PM4){
					mExt = ".r4t";
				}else if(mLeaf == "SEQ"){
					mExt = ".pjr.txt";
				}
			}

			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, CatString(mRecNameNoExt, mExt));
		}
	}else{
		mRecipeName = RecipeName;
		mExt = ".pjr.txt";
		mFullPathFile = _AddLeaf(".\\", CatString(mRecipeName, mExt));
	}

	mS7F26_Reply = S7F25_Request(mRecipeName);
	S7F26_Parser(mS7F26_Reply);

	wait(NewTimer(1));	//sleep for 1 sec

	mS7F24_Reply = S7F23_Request(CheckSECSFormat(mS7F26_Reply.text));
	wait(NewTimer(1));	//sleep for 1 sec
	S7F24_Parser(mS7F24_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S7F71 to request Current Process Recipe List
//////////////////////////////////////////////////////////////
public S7_F71_GetCurrentProcessRecipeList(){
	local i, ii, mS7F72_Reply, mReplyInfo, mRCRecipeInfo, mRecipes, mAllRecipes;
	logn(">>>>>  S7F71_GetCurrentProcessRecipeList  <<<<<");
	mS7F72_Reply = S7F71_Request();
	S7F72_Parser(mS7F72_Reply);
	mReplyInfo = Decode(mS7F72_Reply.text);

	for(i = 0;i < GetCount(mReplyInfo);i = i + 1){
		mRCRecipeInfo = Decode(mReplyInfo[i]);
		mRC = S2_Decode(mRCRecipeInfo[0]);
		//logn("RC: ", mRC);
		mRCRecipeList = Decode(mRCRecipeInfo[1]);
		for(ii = 0;ii < GetCount(mRCRecipeList);ii = ii + 1){
			mRCRecipe = Smart_Decode(mRCRecipeList[ii]);
			//logn(" mRCRecipe: ", mRCRecipe);
			mRecipes = InsertFirst(mRCRecipe, mRecipes);
		}
		mAllRecipes = InsertFirst(Reverse(mRecipes), mAllRecipes);
	}
	return (Reverse(mAllRecipes));
}

//////////////////////////////////////////////////////////////
// Sending S7F73 to Download NonRoute Formatted Recipe to Tool
//////////////////////////////////////////////////////////////
public S7_F73_DownloadNonRouteFormattedRecipeToTool(RecipeName){
	local mText, mStatus, mS7F74_Reply, mGuiStrct, mRecipeName, mFullPathFile, mSendMsg, mReplyMsg;
	logn(">>>>>  S7F73_DownloadNonRouteFormattedRecipeToTool  <<<<<");

	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Download to the Tool";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mRecipeName = mGuiStrct.FileTitle;
		}
	}else{
		mRecipeName = RecipeName;
	}

	//logn("FilePath: ", mGuiStrct.FilePath);
	mFullPathFile = _AddLeaf(mGuiStrct.FilePath, mRecipeName);
	//logn("mFullPathFile: ", mFullPathFile);
	mText = FileRead(mFullPathFile);
	mText = CheckSECSFormat(mText); //way to convert it back to secs object
	mS7F74_Reply = S7F73_Request(mText);
	wait(NewTimer(1));	//sleep for 1 sec
	S7F74_Parser(mS7F74_Reply);

}

//////////////////////////////////////////////////////////////
// Sending S7F75 to Upload NonRoute Formatted Recipe to Host
//////////////////////////////////////////////////////////////
public S7_F75_UploadNonRouteFormattedRecipeToHost(RecipeName){
	local mStatus, mS7F76_Reply, mGuiStrct, mRecipeName, mFullPathFile, mLeaf, mExt, mRecNameOnly;
	logn(">>>>>  S7F75_UploadNonRouteFormattedRecipeToHost  <<<<<");

	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Upload to the Host";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			logn("mLeaf: ", mLeaf);
			mRecNameNoExt = RemoveFileExtenstion(mGuiStrct.FileTitle);
			if(mLeaf == "PJRecipe"){
				mRecipeName = mRecNameNoExt;
				mExt = ".pjr.txt";
			}else{
				if(TOOLTYPE == "Mecca"){
					mRecipeName = CatString("/", mLeaf, "/", mRecNameNoExt);
				}else{
					mRecipeName = CatString(mLeaf, "|", mRecNameNoExt);
				}

				if(mLeaf == PM1){
					mExt = ".r1t";
				}else if(mLeaf == PM2){
					mExt = ".r2t";
				}else if(mLeaf == PM3){
					mExt = ".r3t";
				}else if(mLeaf == PM4){
					mExt = ".r4t";
				}else if(mLeaf == "SEQ"){
					mExt = ".pjr.txt";
				}
			}

			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, CatString(mRecNameNoExt, mExt));
		}
	}else{
		mRecipeName = RecipeName;
		mExt = ".pjr.txt";
		mFullPathFile = _AddLeaf(".\\", CatString(mRecipeName, mExt));
	}
	
	mS7F76_Reply = S7F75_Request(mRecipeName);
	
	if(IsEmptyList(Decode(mS7F76_Reply.text)))
		logn("Empty Response. Check Recipe on the Tool");
	else if(IsEmptyList(filewrite(mFullPathFile, mS7F76_Reply.text)))
		logn("Thinh - Operation was failed!");
	else{
		logn("Uploaded Recipe: ", mFullPathFile);	
		S7F76_Parser(mS7F76_Reply);
		//mReplyInfo = Decode(mS7F76_Reply.text);			
	}
}

//////////////////////////////////////////////////////////////////////////
// Sending S7F83 to Download Name/Value Formatted Process Program to The Tool
//////////////////////////////////////////////////////////////////////////
public S7_F83_DownloadNameValueFormattedProcessProgramToTool(RecipeName){
	local mText, mStatus, mS7F84_Reply, mGuiStrct, mRecipeName, mFullPathFile;
	local mSendMsg, mReplyMsg;
	logn(">>>>>  S7F83_DownloadNameValueFormattedProcessProgramToTool  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Download to the Tool";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mRecipeName = mGuiStrct.FileTitle;
		}
	}else{
		mRecipeName = RecipeName;
	}

	logn("FilePath: ", mGuiStrct.FilePath);
	mFullPathFile = _AddLeaf(mGuiStrct.FilePath, mRecipeName);
	logn("mFullPathFile: ", mFullPathFile);
	mText = FileRead(mFullPathFile);
	mText = CheckSECSFormat(mText); //way to convert it back to secs object
	mS7F84_Reply = S7F83_Request(mText);
	wait(NewTimer(1));	//sleep for 1 sec
	S7F84_Parser(mS7F84_Reply);
}

//////////////////////////////////////////////////////////////////////////
// Sending S7F85 to request Name/Value Formatted Process Program Uploaded to The Host
//////////////////////////////////////////////////////////////////////////
public S7_F85_UploadNameValueFormattedProcessProgramToHost(RecipeName){
	local mStatus, mS7F86_Reply, mGuiStrct, mRecipeName, mFullPathFile, mLeaf, mExt, mRecNameOnly;
	logn(">>>>>  S7F85_UploadNameValueFormattedProcessProgramToHost  <<<<<");
	if(!RecipeName){
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select the Recipe to Upload to the Host";
		mGuiStrct.FilePath = PROCREC_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}else{
			mLeaf = _GetLeaf(mGuiStrct.FilePath);
			logn("mLeaf: ", mLeaf);
			mRecNameNoExt = RemoveFileExtenstion(mGuiStrct.FileTitle);
			if(mLeaf == "PJRecipe"){
				mRecipeName = mRecNameNoExt;
				mExt = ".pjr.txt";
			}else{
				mRecipeName = CatString(mLeaf, "|", mRecNameNoExt);

				if(mLeaf == PM1){
					mExt = ".r1t";
				}else if(mLeaf == PM2){
					mExt = ".r2t";
				}else if(mLeaf == PM3){
					mExt = ".r3t";
				}else if(mLeaf == PM4){
					mExt = ".r4t";
				}else if(mLeaf == "SEQ"){
					mExt = ".pjr.txt";
				}
			}

			mFullPathFile = _AddLeaf(mGuiStrct.FilePath, CatString(mRecNameNoExt, mExt));
		}
	}else{
		mRecipeName = RecipeName;
		mExt = ".pjr.txt";
		mFullPathFile = _AddLeaf(".\\", CatString(mRecipeName, mExt));
	}

	mS7F86_Reply = S7F85_Request(mRecipeName);
	S7F86_Parser(mS7F86_Reply);

	if(IsEmptyList(Decode(mS7F86_Reply.text)))
		logn("Empty Response. Check Recipe on the Tool");
	else if(IsEmptyList(filewrite(mFullPathFile, mS7F86_Reply.text)))
		logn("Thinh - Operation was failed!");
	else
		logn("Uploaded Recipe: ", mFullPathFile);
}


//////////////////////////////////////////////////////////////
// Sending S14F1 Get 'CarrierIDStatus' Attributes For Carrier
//////////////////////////////////////////////////////////////
public S10_F3_SendTerminalMessage(Message){
	local mS10F4_Reply;
	logn(">>>>>  S10_F3_SendTerminalMessage  <<<<<");
	if(Message == ""){		
		do{
			Message = GuiGetString("Please enter a message to send");
		}while (Message == "");
	}

	mS10F4_Reply = S10F3_Request(S2_L(S2_B(0), S2_A(Message)));
	S10F4_Parser(mS10F4_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S14F1 Get 'CarrierIDStatus' Attributes For Carrier
//////////////////////////////////////////////////////////////
public S14_F1_CarrierIDStatus(){
	local mCarrierId, mText, mStatus, mS14F2_Reply;
	logn(">>>>>  S14_F1_CarrierIDStatus  <<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
	do{
		mCarrierId = GuiGetString("Request to get CarrierIDStatus\nPlease enter correct CarrierId");
		mStatus = GuiMsgBox("CarrierIDStatus", CatString(mText, mCarrierId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS14F2_Reply = S14F1_Request(S2_A(""), S2_A("Carrier"), S2_L(S2_A(mCarrierId)), S2_L(), S2_L(S2_A("CarrierIDStatus")));
		S14F2_Parser(mS14F2_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S14F1 Get 'CarrierAccessingStatus' Attributes For Carrier
//////////////////////////////////////////////////////////////
public S14_F1_CarrierAccessingStatus(){
	local mCarrierId, mText, mStatus, mS14F2_Reply;
	logn(">>>>>  S14_F1_CarrierAccessingStatus  <<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
	do{
		mCarrierId = GuiGetString("Request to get CarrierAccessingStatus. Please enter correct CarrierId");
		mStatus = GuiMsgBox("CarrierAccessingStatus", CatString(mText, mCarrierId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS14F2_Reply = S14F1_Request(S2_A(""), S2_A("Carrier"), S2_L(S2_A(mCarrierId)), S2_L(), S2_L(S2_A("CarrierAccessingStatus")));
		S14F2_Parser(mS14F2_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S14F1 Get 'SlotMapStatus' Attributes For Carrier
//////////////////////////////////////////////////////////////
public S14_F1_CarrierSlotMapStatus(){
	local mCarrierId, mText, mStatus, mS14F2_Reply;
	logn(">>>>>  S14F1_CarrierSlotMapStatus  <<<<<");
	mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
	do{
		mCarrierId = GuiGetString("Request to get Carrier's SlotMapStatus\nPlease enter correct CarrierId");
		mStatus = GuiMsgBox("Carrier's SlotMapStatus", CatString(mText, mCarrierId), 3);
	}while(mStatus == 7);

	if(mStatus == 6){
		mS14F2_Reply = S14F1_Request(S2_A(""), S2_A("Carrier"), S2_L(S2_A(mCarrierId)), S2_L(), S2_L(S2_A("SlotMapStatus")));
		S14F2_Parser(mS14F2_Reply);
	}else{
		logn("Terminated per user's request");
	}
}

//////////////////////////////////////////////////////////////
// Sending S14F1 Get APC Attributes For all PJs
//////////////////////////////////////////////////////////////
public S14_F1_APCVariablesForAllPJsRequest(){
	local mCarrierId, mText, mStatus, mS14F2_Reply;
	logn(">>>>>  S14F1_PJAPCVariablesRequest  <<<<<");
	
	mS14F2_Reply = S14F1_Request(
						S2_A(""), 
						S2_A("RecipeAPCList"), 
						S2_L(S2_A("Sample")), 
						S2_L(
							// S2_A("RC1\\JOB\\TEMP\\TE701"),
							// S2_A("101.00"),
							// S2_U1(3)
						), 
						S2_L(
							S2_A("RC1\\JOB\\TEMP\\TE701"),
							S2_A("RC1\\JOB\\TEMP\\TE711"),
							S2_A("RC1\\JOB\\TEMP\\TE721")
						));
	//S14F2_Parser(mS14F2_Reply);
		
	// mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
	// do{
		// mCarrierId = GuiGetString("Request to get Carrier's SlotMapStatus\nPlease enter correct CarrierId");
		// mStatus = GuiMsgBox("Carrier's SlotMapStatus", CatString(mText, mCarrierId), 3);
	// }while(mStatus == 7);

	// if(mStatus == 6){
		// mS14F2_Reply = S14F1_Request(S2_A(""), S2_A("Carrier"), S2_L(S2_A(mCarrierId)), S2_L(), S2_L(S2_A("SlotMapStatus")));
		// S14F2_Parser(mS14F2_Reply);
	// }else{
		// logn("Terminated per user's request");
	// }
}

//////////////////////////////////////////////////////////////
// Sending S14F1 Get 'CarrierIDStatus' Attributes For Carrier
//////////////////////////////////////////////////////////////
// public S14_F1_CarrierSlotMapStatus()
// {	
// local mCarrierId, mText, mStatus, mS14F2_Reply;
// logn(">>>>>> S14F1_CarrierSlotMapStatus <<<<<<<");
// mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct CarrierId ?\n";
// do{
// mCarrierId = GuiGetString("Request to get Carrier's CarrierIDStatus\nPlease enter correct CarrierId");
// mStatus = GuiMsgBox ("Carrier's CarrierIDStatus", CatString(mText, mCarrierId), 3);
// }while (mStatus == 7);

// if(mStatus == 6){
// mS14F2_Reply = S14F1_Request(
// S2_A(""),
// S2_A("Carrier"),
// S2_L(
// S2_A(mCarrierId)
//),
// S2_L(),
// S2_L(
// S2_A("CarrierIDStatus")
//)
//);
// S14F2_Parser(mS14F2_Reply);
// }else{
// logn("Terminated per user's request");
// }
// }

CreatePJList(PJQTY){
	local i, mMultiPJs;
	for(i = 0;i < PJQTY;i = i + 1){
		mMultiPJs = InsertFirst(CreateSinglePJ(PJIDS[i]), mMultiPJs);
	}
	return (mMultiPJs);
}

CreateSinglePJ(PjId){
	local mSinglePJ;
	mSinglePJ = S2_L(S2_A(PjId), S2_L(), S2_L());
	return (mSinglePJ);
}

//////////////////////////////////////////////////////////////
// Sending S14F9 Create Object (~Create CJ Obj) Request
//////////////////////////////////////////////////////////////
public S14_F9_CreateCJobObjectRequest(IntroObject, PJQTY){
	local i, mS14F10_Reply, mPJIDs, mCID, mPJs, mCJDesc, mCJSMSCT, mFound;
	logn(">>>>>  S14F9_CreateCJobObjectRequest  <<<<<");
	//CJID = "1";
	if(!IntroObject)
		IntroObject = INTRO[0];

	if(PJQTY != 1){
		mPJs = CreatePJList(PJQTY);
		mCJDesc = "MultiPJs";
	}else{ //CJ with single PJ
		mPJs = CreateSinglePJ(IntroObject.pjids[0]);
		mCJDesc = "SinglePJ";
	}

	CJID = CatString("ASM-Host-LP", ToAscii(IntroObject.portid), "-CJ.", ToAscii(AtoI(GetDateTime())));
	IntroObject.cjid = CJID;
	mCID = IntroObject.carrierid;

	for(i = 0;i < GetCount(INTRO);i = i + 1){
		//logn(i, ": ", INTRO[i].cjid);
		if(INTRO[i].carrierid == mCID){
			INTRO[i].cjid = CJID;
		}
	}

	mS14F10_Reply = S14F9_Request(
									S2_A(mCJDesc),
									S2_A("ControlJob"),
									S2_L(
										S2_L(
											S2_A("ObjID"),
											S2_A(CJID) //ControlJobID
											),
										S2_L(
											S2_A("ProcessOrderMgmt"),
											S2_U1(3) //3 = List, 2 = Optimize, 1 = Arrival
											),
										S2_L(
											S2_A("StartMethod"),
											S2_BOOLEAN(1)
											),
										S2_L(
											S2_A("CarrierInputSpec"),
											S2_L(
												S2_A(mCID) //CarrierId
												)
											),
										S2_L(
											S2_A("MtrlOutSpec"),
											S2_L()
											),
										S2_L(
											S2_A("ProcessingCtrlSpec"),
											S2_L(mPJs)
											)
										)
									);
	S14F10_Parser(mS14F10_Reply);

	LPSTAT_STRUCT.portid = IntroObject.portid;
	mFound = DictionaryLookup(LPSTAT_STRUCT, LPSTAT_DICT);
	if(!mFound){
		LPSTAT_STRUCT.portid = IntroObject.portid;
		LPSTAT_STRUCT.carrierid = mCID;
		LPSTAT_STRUCT.done = 0;
		DictionaryInsert(LPSTAT_STRUCT, LPSTAT_DICT);
	}
}

public S16_F5_StartProcessJobRequest(){S16_F5_PRJobCommandRequest("", "", "Start", "");}
public S16_F5_AbortProcessJobRequest(){S16_F5_PRJobCommandRequest("", "", "Abort", "");}
public S16_F5_CancelProcessJobRequest(){S16_F5_PRJobCommandRequest("", "", "Cancel", "");}
public S16_F5_StopProcessJobRequest(){S16_F5_PRJobCommandRequest("", "", "Stop", "");}

//////////////////////////////////////////////////////////////
// Sending S16F5 Process Job Command Request to the Tool
//////////////////////////////////////////////////////////////
S16_F5_PRJobCommandRequest(DataId, PJID, PjCmdName, PjCmdInfo){
	local i, mMsg, mClick, mPJID, mPJCmd, mS16F6_Reply;
	logn(">>>>>  S16F5_PRJobCommandRequest: ", PjCmdName, "  <<<<<");
	mPJID = PJID;
	mPJCmd = PjCmdName;

	for(i = 0;i < GetCount(PJIDS);i = i + 1){
		mMsg = CatString(PjCmdName, ": ", PJIDS[i], "\n\n Click OK to ACCEPT. Click Cancel to DENY");
		mClick = GuiMsgBox(CatString(PjCmdName, ": ", PJIDS[i]), mMsg, 1);

		if(mClick == 1){
			mS16F6_Reply = S16F5_Request(
											S2_U4(0), //DataId
											S2_A(PJIDS[i]), //PJID
											S2_A(mPJCmd), //PJ Cmd Name
											S2_L()
										);
			S16F6_Parser(mS16F6_Reply);
		}else{
			logn("User clicked Cancel!");
		}
	}
}

UpdateDefaultFirstIntro(pjCmd, IntroObject){
	local mSlotAndRecipe;
	logn("**** UpdateDefaultFirstIntro ****");
	mSlotAndRecipe = PromptForSlotAndRecipeSelection(1);
	IntroObject.quantity = GetCount(mSlotAndRecipe[0]);
	IntroObject.slots = mSlotAndRecipe[0];
	IntroObject.recipes = mSlotAndRecipe[1];
	IntroObject.pjCmd = pjCmd;
	IntroObject.portid = PID;
	return (IntroObject);
}

CreatePJSecsList(CarrierID, Slots, Recipe, ProjID, TuningInfo){
	local i, pjSecsList, mSlots, mRecipeInfo;
	for(i = 0;i < GetCount(Slots);i = i + 1){
		mSlots = InsertFirst(S2_U1(Slots[i]), mSlots);
	}
	mSlots = Reverse(mSlots);
	mRecipeInfo = TuningInfo;
	if(IsEmptyList(TuningInfo)){
		mRecipeInfo = S2_L(
						//S2_U1(2), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
						S2_U1(1),
						S2_A(Recipe), //RecipeName
						//S2_L(S2_L(S2_A("PRRecipeCycle"), S2_U1(5)))
						S2_L()
					);
	}
	pjSecsList = S2_L(
						S2_A(ProjID), //PJID
						S2_B(0x0D),
						S2_L(S2_L(S2_A(CarrierID), S2_L(mSlots))),
						mRecipeInfo,
						S2_BOOLEAN(1), //1 = Auto Start and 0 = Manual Start
						S2_L()
					);

	return (pjSecsList);
}

SendProcessJob(pjCmd, IntroObject, PJQTY, TuningInfo){
	local i, mS16F12_Reply, mS16F16_Reply, mSelectedSlots, mSlots, mNumber, mIntroOBJ, mCarrierID, mQuantity, mPJSecsList;
	local mRecipes, mMultiPJs, mTuningInfo, mTuningList, mTuningValue;

	logn("-> SendProcessJob()");
	
	if(!IntroObject)
		IntroObject = UpdateDefaultFirstIntro(pjCmd, INTRO[0]);

	PJID = CatString("ASM-Host-LP", ToAscii(IntroObject.portid), "-PJ.", ToAscii(AtoI(GetDateTime()))); //Create unique PJID	
	logn("PJID: ", PJID);
	IntroObject.pjids = NewList(PJID);
	mRecipes = IntroObject.recipes;
	mQuantity = IntroObject.quantity;
	mSelectedSlots = IntroObject.slots;
	mCarrierID = IntroObject.carrierid;

	//logn("mRecipes: ", mRecipes);
	//logn("mCarrierID: ", mCarrierID);	
	for(i = 0;i < GetCount(mSelectedSlots[0]);i = i + 1){
		mSlots = InsertFirst(S2_U1(mSelectedSlots[0][i]), mSlots);
	}
	mSlots = Reverse(mSlots);

	if(pjCmd == "S16F11"){ //Single Job Only	
		mS16F12_Reply = S16F11_Request(
										S2_U4(0),
										S2_A(PJID), //ProcessJobID
										S2_B(0x0D),									
										S2_L(S2_L(S2_A(mCarrierID), S2_L(mSlots))),										
										S2_L(
											S2_U1(2), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
											S2_A(mRecipes[0]), //RecipeName
											S2_L(
												S2_L(
													S2_A("UseReactor"), 
													S2_U1(1)
													)
												)
											),
										S2_BOOLEAN(1), //1 = Auto Start and 0 = Manual Start
										S2_L()
										);
		return (S16F12_Parser(mS16F12_Reply));
	}else if(pjCmd == "S16F15"){ //Single or Multi Jobs 
		if(PJQTY != 1){ //Multi PJs
			mMultiPJs = NewList();
			for(i = 0;i < GetCount(mRecipes);i = i + 1){
				PJID = CatString("ASM-Host-PJ", ToAscii(i + 1), ".", ToAscii(AtoI(GetDateTime()))); //Create unique PJID
				logn("Create: ", PJID);
				PJIDS = InsertFirst(PJID, PJIDS);
				if(TuningInfo != ""){
					mTuningList = splitString(TuningInfo, "=");
					mTuningValue = AtoI(mTuningList[1]) + i; 
					mTuningInfo = S2_L( S2_U1(2), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
										S2_A(mRecipes[i]), //RecipeName
										S2_L(S2_L(S2_A(mTuningList[0]), S2_A(ToAscii(mTuningValue)))) //With tuning info
									);					
				}
				
				mPJSecsList = CreatePJSecsList(mCarrierID, mSelectedSlots[i], mRecipes[i], PJID, mTuningInfo);
				mMultiPJs = InsertFirst(mPJSecsList, mMultiPJs);
				wait(NewTimer(1));	//sleep for 1 sec to make different PJID
			}
			IntroObject.pjids = Reverse(mMultiPJs);
			mS16F16_Reply = S16F15_Request(S2_U4(0), S2_L(Reverse(mMultiPJs)));
		}else{ //Single PJ
			PJIDS = InsertFirst(PJID, PJIDS);
			if(TOOLTYPE == "Mecca"){
				mTuningInfo = S2_L( S2_U1(1), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
									S2_A(CatString("/SEQUENCE/", mRecipes[0])), //RecipeName
									S2_L() //No tuning info
								);				
			}else if (FindString(mRecipes[0],"SCR|", 0).Count > 0){
				mTuningInfo = S2_L( S2_U1(1), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
									S2_A(mRecipes[0]), //RecipeName
									S2_L() //No tuning info
								);
			}else{
				if(TuningInfo != ""){
					mTuningList = splitString(TuningInfo, "=");
					mTuningInfo = S2_L( S2_U1(2), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
										S2_A(mRecipes[0]), //RecipeName
										S2_L(S2_L(S2_A(mTuningList[0]), S2_A(mTuningList[1]))) //With tuning info
									);					
				}else{				
					mTuningInfo = S2_L( S2_U1(2), //Method 1 = Recipe Wo Parameter Tuning and 2 = with Para Tuning
										S2_A(mRecipes[0]), //RecipeName
										S2_L(S2_L(S2_A("PRRecipeCycle"), S2_U1(1))) //With tuning info
									);
				}
			}
				
			temp = Smart_Decode(mSlots[0]);
			TestData(temp);
			logn("Slots: ", temp);
			
			if(Smart_Decode(mSlots[0]) == 0){
				mS16F16_Reply = S16F15_Request(
												S2_U4(0),
												S2_L(
													S2_L(
														S2_A(PJID), //PJID
														S2_B(0x0D),
														S2_L(S2_L(S2_A("DUMMY"), S2_L())),
														mTuningInfo,
														S2_BOOLEAN(1), //1 = Auto Start and 0 = Manual Start
														S2_L()
														)
													)
												);					
			}else{				
				mS16F16_Reply = S16F15_Request(
												S2_U4(0),
												S2_L(
													S2_L(
														S2_A(PJID), //PJID
														S2_B(0x0D),
														S2_L(S2_L(S2_A(mCarrierID), S2_L(mSlots))),
														mTuningInfo,
														S2_BOOLEAN(1), //1 = Auto Start and 0 = Manual Start
														S2_L()
														)
													)
												);	
			}
		}

		return (S16F16_Parser(mS16F16_Reply));
	}
}

Split(WholeList, NumSplit){
	local mQuantity, mMultiPortion;
	mQuantity = GetCount(WholeList) / NumSplit;
	do{
		mPorttion = NewList();
		for(i = 0;i < mQuantity;i = i + 1){
			mPorttion = InsertFirst(GetFirst(WholeList), mPorttion);
			WholeList = RemoveFirst(WholeList);
		}
		mMultiPortion = InsertFirst(mPorttion, mMultiPortion);
	}while(WholeList);

	return (mMultiPortion);
}

//////////////////////////////////////////////////////////////
// Sending S16F11 PRJobCreateEnh Request
//////////////////////////////////////////////////////////////
public S16_F11_PRJobCreateEnhRequest(IntroObject){
	logn(">>>>>  S16F11_PRJobCreateEnhRequest  <<<<<");
	Return(SendProcessJob("S16F11", IntroObject));
}

//////////////////////////////////////////////////////////////
// Sending S16F15 Process Job Multi Create Request
//////////////////////////////////////////////////////////////
public S16_F15_ProcessJobMultiCreateRequest(IntroObject){
	logn(">>>>>  S16F15_ProcessJobMultiCreateRequest  <<<<<");
	Return(SendProcessJob("S16F15", IntroObject));
}

//////////////////////////////////////////////////////////////
// Sending S16F17 Send PJ's Dequeue Request to the Tool
//////////////////////////////////////////////////////////////
public S16_F17_ProcessJobDeQueueRequest(){
	local i, mS16F18_Reply, mS16F20_Reply, mReplyInfo, mPJSecsList, mPJInfo, mPJID, mPJIDs, mMessage;
	logn(">>>>>  S16F17_ProcessJobDeQueueRequest  <<<<<");
	mS16F20_Reply = S16F19_Request();
	mReplyInfo = Decode(mS16F20_Reply.text);
	logn("*****    There're ", GetCount(mReplyInfo), " Queued PJs    *****");
	for(i = 0;i < GetCount(mReplyInfo);i = i + 1){
		mPJInfo = Decode(mReplyInfo[i]);
		mPJID = Smart_Decode(mPJInfo[0]);
		mPJSecsList = InsertFirst(S2_A(mPJID), mPJSecsList);
		mPJIDs = CatString(mPJIDs, " : ", mPJID);
	}
	logn(mPJIDs);
	if(!mPJIDs){
		GuiMsgBox("No Queued PJ Found", "There's No Queued PJ for DeQueue!", 0);
	}else{
		mMessage = CatString("Which of these queued PJs you want to Dequeue", mPJIDs, "\n", "Just click ok if you want to Dequeue them all!");
		mPJIDs = GuiGetString(mMessage);
		mPJIDs = RemoveWhiteSpace(mPJIDs);
		if(mPJIDs){
			mPJSecsList = NewList();
			if(FindString(",", mPJIDs)){
				mPJIDs = ConvertStringToList(mPJIDs, ",");
			}else if(FindString(":", mPJIDs)){
				mPJIDs = ConvertStringToList(mPJIDs, ":");
			}else if(FindString(":", mPJIDs)){
				mPJIDs = ConvertStringToList(mPJIDs, ";");
			}else{ //Single PJ
				mPJSecsList = S2_A(RemoveWhiteSpace(mPJIDs));
			}
			for(i = 0;i < GetCount(mPJIDs);i = i + 1){
				mPJSecsList = InsertFirst(S2_A(mPJIDs[i]), mPJSecsList);
			}
		}
	}

	mS16F18_Reply = S16F17_Request(mPJSecsList);
	S16F18_Parser(mS16F18_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S16F19 Process Job List Request
//////////////////////////////////////////////////////////////
public S16_F19_ProcessJobListRequest(){
	local mS16F20_Reply;
	logn(">>>>>  S16F19_ProcessJobListRequest  <<<<<");
	mS16F20_Reply = S16F19_Request();
	S16F20_Parser(mS16F20_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S16F21 Process Job Create Limit Request
//////////////////////////////////////////////////////////////
public S16_F21_ProcessJobCreateLimitRequest(){
	local mS16F22_Reply;
	logn(">>>>>  S16F21_ProcessJobCreateLimitRequest  <<<<<");
	mS16F22_Reply = S16F21_Request();
	S16F22_Parser(mS16F22_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S16F27 Sends CJ Command to the Tool
//////////////////////////////////////////////////////////////
public S16_F27_SendCJCommand(CJID, CJCmd){
	local mS16F28_Reply, mCJID, mInput, mCJCmd, mCJIDs;
		
	if(CJID){
		mCJID = CJID;
		if(!IsInteger(CJCmd)){
			mCJCmd = AtoI(CJCmd);
		}else{
			mCJCmd = CJCmd;
		}
	}else{
		mCJIDs = _GetExecutingCJIDs();
		mCJID = mCJIDs[0];
		mCJCmd = 2;
		// if(GetCount(mCJIDs) > 0){
			// CJID = mCJIDs[0];
			// mInput = CatString("Please enter CJID (", mCJIDs, ")", "\n", "Eg. ", CJID, " to STOP CJ");
		// }else{		
			// mInput = GuiGetString("Please enter CJID and CJCmdNumber. Eg. 12345:6 to STOP CJ12345");
		// }
		
		// mInput = splitString(mInput, ":");
		// mCJID = mInput[0];
		// mCJCmd = AtoI(mInput[1]);
	}
	
	logn(">>>>>  S16F27_SendCJCommand:", mCJCmd,"  <<<<<");
	mS16F28_Reply = S16F27_Request(S2_A(mCJID), S2_U1(mCJCmd), S2_L(S2_A("Action"), S2_U1(1)));
	S16F28_Parser(mS16F28_Reply);
}

//////////////////////////////////////////////////////////////
// Sending S16F27 Sends CJStart Command to the Tool
//////////////////////////////////////////////////////////////
public S16_F27_SendCJStartCommand(){
	local mS16F28_Reply, mCJID;
	logn(">>>>>  S16F27_SendCJStartCommand  <<<<<");
	mCJID = GuiGetString("You want to START Control Job. Please enter CJID");
	mS16F28_Reply = S16F27_Request(S2_A(mCJID), S2_U1(1), S2_L(S2_A("Action"), S2_U1(0)));
	S16F28_Parser(mS16F28_Reply);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Get the name of CEID from dictionary
//////////////////////////////////////////////////////////////
GetCeidName(Ceid){
	local mCeidStruct, mFound, CeidName;
	if(IsInteger(Ceid)){
		Ceid = ToAscii(Ceid); //Must use string type to search
	}
	mCeidStruct = NewStructured(CEID_STRUCT);
	mCeidStruct.ceid = Ceid;
	mFound = DictionaryLookup(mCeidStruct, CEIDS_DICT);
	CeidName = mFound.name;
	return (CeidName);
}

//////////////////////////////////////////////////////////////
// Get the name of VID from dictionary
//////////////////////////////////////////////////////////////
GetVidName(Vid){
	local mVidStruct, mFound, VidName;
	if(IsInteger(Vid)){
		Vid = ToAscii(Vid); //Must use string type to search
	}
	//logn("Vid: ", Vid);
	mVidStruct = NewStructured(VID_STRUCT);
	mVidStruct.vid = Vid;
	mFound = DictionaryLookup(mVidStruct, VIDS_DICT);
	if(mFound){
		return (mFound.name);
	}else{
		return (Vid);
	}
}

//////////////////////////////////////////////////////////////
// Get names for a list of VID from dictionary
//////////////////////////////////////////////////////////////
GetVidNames(Vids){
	local i, mVid, mVidStruct, mFound, mVidNames;

	for(i = 0;i < GetCount(Vids);i = i + 1){
		mVid = Smart_Decode(Vids[i]);
		mVidStruct = NewStructured(VID_STRUCT);
		mVidStruct.vid = ToAscii(mVid); //Must use string type to search
		mFound = DictionaryLookup(mVidStruct, VIDS_DICT);
		if(mFound){
			mVidNames = InsertFirst(mFound.name, mVidNames);
		}else{
			logn("VID: ", mVid, " - Not Found");
			mVidNames = InsertFirst("Unknown VidName", mVidNames);
		}
	}
	return(Reverse(mVidNames));
}

//////////////////////////////////////////////////////////////
// Add to dictionary the custom report. It's not built in report
//////////////////////////////////////////////////////////////
UpdateReportDictionary(ReportInfo){
	local i, RPTIDStruct, mReportID, mVIDList, mVID, mVIDs, mVidNames;
	logn("*****    UpdateReportDictionary   *****");
	mReportID = Smart_Decode(ReportInfo[0]);
	mVIDList = Decode(ReportInfo[1]);
	mVidNames = GetVidNames(mVIDList);
	for(i = 0;i < GetCount(mVIDList);i = i + 1){
		mVID = Smart_Decode(mVIDList[i]);
		mVIDs = InsertFirst(ToAscii(mVID), mVIDs);
	}
	
	RPTIDStruct = NewStructured(RPTID_STRUCT);
	RPTIDStruct.rptid = ToAscii(mReportID);
	RPTIDStruct.rptname = CatString("Custom Report:", ToAscii(mReportID));
	RPTIDStruct.vids = Reverse(mVIDs);
	RPTIDStruct.vidnames = mVidNames;
	DictionaryInsert(RPTIDStruct, RPTIDS_DICT);	
	BASIC = 0;
}

//////////////////////////////////////////////////////////////
// Get report info from dictionary
//////////////////////////////////////////////////////////////
DictionaryExtractReport(mReportId, RPTIDS_DICT){
	local i, mStructReportList;
	mStructReportList = DictionaryToList(RPTIDS_DICT);
	for(i = 0;i < GetCount(mStructReportList);i = i + 1){
		if(mStructReportList[i].rptid == mReportId){
			//logn("*****  Found my Structured Report   *****");
			return (mStructReportList[i]);
		}
	}

	return (NewStructured(RPTID_STRUCT));
}

VidInfo(name, value){
	local mState, mValue;

	switch(name){
	case "ControlState":
		logn("value:", value);
		if(value == 0)
			mState = "REMOTE";
		else if(value == 1)
			mState = "LOCAL";
		else
			mState = "Unknown";
		//mInfo = CatString(name, " = ", mValue);
		/* 			switch(value)
		 {
		 case 1:
		 mInfo = CatString(name, " = ", value, " or REMOTE");
		 break;
		 case 0:
		 mInfo = CatString(name, " = ", value, " or LOCAL");
		 break;
		 default:
		 mInfo = CatString(name, " = ", value);
		 break;
		 } */
		break;
	default:
		mState = "Unknown";
		//mInfo = CatString(name, " = ", value);
		break;
	}
	return (mState);
}

////////////////////////////////////////////////////////
// Utility to verify data type.
////////////////////////////////////////////////////////
TestData(mData){
	if(IsArray(mData))
		logn("Thinh -> mData is an Array: ", mData);
	else if(IsInteger(mData))
		logn("Thinh -> mData is an Integer: ", mData);
	else if(IsList(mData))
		logn("Thinh -> mData is a List: ", mData);
	else if(IsMessage(mData))
		logn("Thinh -> mData is a Message: ", mData);
	else if(IsString(mData))
		logn("Thinh -> mData is a String: ", mData);
	else if(IsSECS(mData))
		logn("Thinh -> mData is a SECS: ", mData);
	else if(IsStructured(mData))
		logn("Thinh -> mData is a Structure");
	else if(IsReal(mData))
		logn("Thinh -> mData is a Real");
	else
		logn("Thinh -> mData is Unknown");

	if((IsInteger(mData) == 0) && (IsStructure(mData) == 0) && (IsMessage(mData) == 0) && (IsReal(mData) == 0)){
		count = GetCount(mData);
		logn("Thinh -> count = ", count);
	}
}

/////////////////////////////////////////////////////////////////
// This funct is to gather Lot Intro's information
// It's invoked after the Intro already started.
// It's used as assumtion SC knowing what info FW is holding. 
/////////////////////////////////////////////////////////////////
GetIntroInfo(){
	local i, k, mPort, mFileStatus, mCarrierID, string, mfound, mindex;
	local start, end, openBracket, closeBracket, val_start, val_end, mIntroInfo;
	logn("Thinh -> GetIntroInfo()");
	i = 0;
	NumIntro = NumIntro + 1;
	logn("Thinh - NumIntro = ", NumIntro);
	mFileStatus = FindFile(ToAscii(INTROFILE), "", FF_FILETITLEONLY);

	if(!IsEmptyList(mFileStatus)){
		logn(INTROFILE, " does exist");
		string = FileRead(INTROFILE);

		if(IsString(string)){
			//mIntroInfo = NewList(LID, CID, PID, RECIPE, INTROTYPE, QUANTITY);
			mIntroInfo = readIntroFile();

			LID = mIntroInfo[0];
			CID = mIntroInfo[1];
			PID = mIntroInfo[2];
			RECIPE = mIntroInfo[3];
			INTROTYPE = mIntroInfo[4];
			QUANTITY = mIntroInfo[5];
			SLOTS = mIntroInfo[6];
			logn("PID=", PID);

			for(i = 0;i < TOTALPORT;i = i + 1){
				mPort = INTRO[i].portid;
				logn("mPort=", mPort);

				if(PID == mPort){
					logn("Thinh - Updates INTROOBJ for PID:", PID);
					INTRO[i].lotid = LID;
					INTRO[i].carrierid = CID;
					INTRO[i].portid = PID;
					INTRO[i].recipes = RECIPE;
					INTRO[i].introtype = INTROTYPE;
					INTRO[i].quantity = QUANTITY;
					INTRO[i].slots = SLOTS;
					INTRO[i].State = "INTR";

					SUBSTRATECOUNT = QUANTITY;

					ShowIntroStruct(i);
					cleanupIntroFile();
				}
			}
		}
	}else{
		logn(INTROFILE, " does NOT exist");
		logn("Thinh - It's first intro WITHOUT INTROFILE");
	}

	logn("Thinh - i = ", i);
	logn("Thinh <- GetIntroInfo()");

	return (i);
}

/////////////////////////////////////////////////////////////////
// This funct is initilize the structure represents for each intro
// It's invoked once making readiness for new intro
// Each intro struct repesents for each intro lot.
// We have 4 ports so we need 4 structs. 
/////////////////////////////////////////////////////////////////
Initialize_Intro(){
	local i, k, mLotID, mCarrierID, mPortID;
	logn("Thinh -> Initialize_Intro()");
	RecCount = 0;
	RECORDID = 101;
	INTRO = NewArray(4);
	for(i = 0;i < 4;i = i + 1){ //Maximum number of LP
		INTRO[i] = NewStructured(INTROOBJ);
	}
	//Basic initialization
	for(i = 0;i < 4;i = i + 1){
		k = i + 1;
		mLotID = CatString("ASMLOT", ToAscii(k + 1));
		mCarrierID = ToAscii(k);
		mPortID = k;
		//logn("Structure", i, ", LotID:", mLotID, ", CarrierID:", mCarrierID, ", PortID:", mPortID);
		//Index, LID, CID, PID, Rec, IntType, Quan, Slots, PJID, CJID, State, InProc, First, PWC, CJStart, PjCmd
		setIntroStruct(i, mLotID, mCarrierID, k, "Unknown", "", 25, "1-25", "Unknown", "INIT", 0, 0, 0, 0, 0, "");
	}

	if(CTRLREMOTE){
		if(UPDATERECDIR == 0){
			_UpdateRecipeDirectories();
			_UpdateProcessRecipeDir();
			UPDATERECDIR = 1;
		}

		if(!LP1_CID && !LP2_CID && !LP3_CID && !LP4_CID){
			_CarrierLocationInfo();
		}
		
		if(AreChambersReady()){
			INITIALIZE = 1;
		}		
	}
	//logn("Thinh <- Initialize_Intro()");	
}

public _CarrierLocationInfo(){
	local i, mS1F4_Reply, mReplyInfo, mData, mLPInfo, mCarrierInfo;
	logn("Thinh -> _CarrierLocationInfo()");
	mS1F4_Reply = S1F3_Request(S2_U4(33947872)); //CarrierLocationMatrix
	mReplyInfo = Decode(mS1F4_Reply.text);
	mData = Decode(mReplyInfo[0]);
	//logn("mData: ", mData);
	for(i = 0;i < GetCount(mData);i = i + 2){
		mLPInfo = Decode(mData[i]);
		mCarrierInfo = Decode(mData[i + 1]);

		if(Smart_Decode(mLPInfo[0]) == "LP1"){
			LP1_CID = Smart_Decode(mCarrierInfo[1]);
			if(LP1_CID != ""){
				INTRO[0].carrierid = LP1_CID;
			}			
			//logn("LP1_CID: ", LP1_CID);
		}else if(Smart_Decode(mLPInfo[0]) == "LP2"){
			LP2_CID = Smart_Decode(mCarrierInfo[1]);
			if(LP2_CID != ""){
				INTRO[1].carrierid = LP2_CID;
			}
			//logn("LP2_CID: ", LP2_CID);
		}else if(Smart_Decode(mLPInfo[0]) == "LP3"){
			LP3_CID = Smart_Decode(mCarrierInfo[1]);
			if(LP3_CID != ""){
				INTRO[2].carrierid = LP3_CID;
			}
			//logn("LP3_CID: ", LP3_CID);
		}else if(Smart_Decode(mLPInfo[0]) == "LP4"){
			LP4_CID = Smart_Decode(mCarrierInfo[1]);
			if(LP4_CID != ""){
				INTRO[3].carrierid = LP4_CID;
			}
			//logn("LP4_CID: ", LP4_CID);
		}
		logn("*****    ", Smart_Decode(mLPInfo[0]), ": CID = ", Smart_Decode(mCarrierInfo[1]));
	}
}

SetBindInfo(){
	local i, mWaferID;
	ASMLOT = CatString("ASMLOT", ToAscii(INTRO_COUNT));
	BIND_INFO = CatString(ASMLOT, ": ");
	for(i = 1;i <= 25;i = i + 1){
		mWaferID = CatString("Wafer", ToAscii(i));
		if(i < 25)
			BIND_INFO = CatString(BIND_INFO, mWaferID, ", ");
		else
			BIND_INFO = CatString(BIND_INFO, mWaferID);
	}
}
/////////////////////////////////////////////////////////////////
// This funct is to blankout or cleanup INTROFILE.
// INTROFILE is an xml file produced by SC @IN in benchtest mode
// The file holding intro info of the lot that's introduced with SC.
// Once the data of the file is no longer needed. Clean it off to prevent ambiguity
// Because no support delete file function in SSPro so we blank it out. 
/////////////////////////////////////////////////////////////////
cleanupIntroFile(){
	local mFileStatus, mWriteStatus;
	logn("Thinh -> cleanupIntroFile()");
	mFileStatus = FindFile(ToAscii(INTROFILE), "", FF_FILETITLEONLY);

	if(!IsEmptyList(mFileStatus)){
		mWriteStatus = FileWrite(INTROFILE, "");

		if(IsEmptyList(mWriteStatus))
			logn("Failed to blank ", INTROFILE);
		else
			logn("Successfully blanked ", INTROFILE);
	}else
		logn(INTROFILE, " does NOT exist");

	logn("Thinh <- cleanupIntroFile()");
}

/////////////////////////////////////////////////////////////////
// This funct is to blank out or clean up a particular intro struct.
// An intro struct is a struct holding info of a particular intro
// After the lot is moved out we clean its intro struct 
/////////////////////////////////////////////////////////////////
cleanupmIntro(mIndex){
	local i, k, mFileStatus, mWriteStatus, mIntroInfo, clean;
	local mLID, mCID, mPID, mRECIPE, mINTROTYPE, mQUANTITY;
	logn("Thinh -> cleanupmIntro(", mIndex, ")");
	mIntroInfo = readIntroFile();

	if(!IsEmptyList(mIntroInfo)){
		mLID = mIntroInfo[0];
		mCID = mIntroInfo[1];
		mPID = mIntroInfo[2];
		mRECIPE = mIntroInfo[3];
		mINTROTYPE = mIntroInfo[4];
		mQUANITY = mIntroInfo[5];

		if(mCID != ""){
			clean = 0;

			for(i = 0;i < TOTALPORT;i = i + 1){
				logn("mCID = ", mCID);
				logn("INTRO[i].carrierid = ", INTRO[i].carrierid);

				if(INTRO[i].carrierid == mCID){
					logn("current INTROFILE is my INTROFILE");
					cleanupIntroFile();
					clean = 1;
					break;
				}
			}
			if(clean == 0)
				logn("INTROFILE is not my INTROFILE. No need to clean");
		}else
			logn("INTROFILE is already blank. No need to cleanupIntroFile()");
	}else
		logn(INTROFILE, " does not exist");

	//reset the Intro structure
	k = mIndex + 1;
	mLID = CatString("TESTLOT", ToAscii(k));
	mCID = CatString("TESTLOT", ToAscii(k));
	setIntroStruct(mIndex, mLID, mCID, k, "", "", 25, "1-25", "", "START", 0, 0, 0, 0, 0);
	NumIntro = NumIntro - 1;
	logn("Current NumIntro = ", NumIntro);

	logn("Thinh <- cleanupmIntro(", mIndex, ")");
}

/////////////////////////////////////////////////////////////////
// This funct is to set values to a particular intro struct.
// An intro struct is a struct holding info of a particular intro
//  
/////////////////////////////////////////////////////////////////
SetIntroStruct(Index, LID, CID, PID, Rec, IntType, Quan, Slots, PJID, CJID, State, InProc, First, PWC, CJStart, PjCmd){
	//logn("Thinh -> SetIntroStruct()");

	INTRO[Index].lotid = LID;
	INTRO[Index].carrierid = CID;
	INTRO[Index].portid = PID;
	INTRO[Index].recipes = NewList(Rec);
	INTRO[Index].introtype = IntType;
	INTRO[Index].quantity = Quan;
	INTRO[Index].slots = NewList(SelectSlots(Slots));
	INTRO[Index].pjids = NewList(PJID);
	INTRO[Index].cjid = CJID;
	INTRO[Index].State = State;
	INTRO[Index].inprocess = InProc;
	INTRO[Index].first = First;
	INTRO[Index].PWC = PWC;
	INTRO[Index].CJStart = CJStart;
	INTRO[Index].pjCmd = PjCmd;
	INTRO[Index].CJstate = -1;

	//logn("Thinh <- SetIntroStruct()");    
}

/////////////////////////////////////////////////////////////////
// This funct is to display info in a particular intro struct.
// An intro struct is a struct holding info of a particular intro
//  
/////////////////////////////////////////////////////////////////
ShowIntroStruct(Index){
	logn("LID = ", INTRO[Index].lotid);
	logn("CID = ", INTRO[Index].carrierid);
	logn("PID = ", INTRO[Index].portid);
	logn("RECIPE = ", INTRO[Index].recipes);
	logn("INTROTYPE = ", INTRO[Index].introtype);
	logn("QUANTITY = ", INTRO[Index].quantity);
	logn("SLOTS = ", INTRO[Index].slots);
	logn("PJIDs = ", INTRO[Index].pjids);
	logn("CJID = ", INTRO[Index].cjid);
	logn("State = ", INTRO[Index].State);
	logn("INPROCESS = ", INTRO[Index].inprocess);
	logn("FIRST = ", INTRO[Index].first);
	logn("PWC = ", INTRO[Index].PWC);
	logn("CJStart = ", INTRO[Index].CJStart);
}

///////////////////////////////////////////////////////////////////
// This funct is to read INTROFILE, the xml file produced by SC @IN in benchtest mode
// The file holding intro info of the lot that's introduced with SC.
// The return data is in a list 
/////////////////////////////////////////////////////////////////
readIntroFile(){
	local string, i, k, openBracket, closeBracket, word;
	local start, end, val_start, val_end;
	local mLID, mCID, mPID, mRECIPE, mINTROTYPE, mQUANTITY;

	logn("Thinh -> readIntroFile()");

	string = FileRead(INTROFILE);

	if(IsString(string)){
		logn("Reading... ", INTROFILE);

		k = GetCount(string);
		i = 0;

		while(i < k){
			switch(string[i]){
			case "<":
				openBracket = 1;
				start = i + 1;
				break;
			case ">":
				closeBracket = 1;
				end = i;
				break;
			default:
				break;
			}

			if(openBracket == 1 && closeBracket == 1){
				word = Substring(string, start, (end - start));
				//logn("got the word = ", word);
				switch(word){
				case "LotID":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/LotID":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mLID = Substring(string, val_start, (val_end - val_start));
					break;
				case "CarrierID":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/CarrierID":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mCID = Substring(string, val_start, (val_end - val_start));
					break;
				case "PortID":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/PortID":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mPID = AtoI(Substring(string, val_start, (val_end - val_start)));
					break;
				case "Recipe":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/Recipe":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mRECIPE = Substring(string, val_start, (val_end - val_start));
					break;
				case "IntroType":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/IntroType":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mINTROTYPE = Substring(string, val_start, (val_end - val_start));
					break;
				case "LotQuantity":
					val_start = end + 1;
					//logn(" val_start = ", val_start);
					break;
				case "/LotQuantity":
					val_end = start - 1;
					//logn(" val_end = ", val_end);
					mQUANTITY = AtoI(Substring(string, val_start, (val_end - val_start)));
					break;
				default:
					break;
				}

				//reset the values to get ready for next route
				openBracket = 0;
				closeBracket = 0;
				start = 0;
				end = 0;
			}

			i = i + 1;
		}

	}else{
		logn(INTROFILE, " is blank");
	}

	logn("mLID = ", mLID, ", mCID = ", mCID, ", mPID = ", mPID);
	logn("mRECIPE = ", mRECIPE, ", mINTROTYPE = ", mINTROTYPE, ", mQUANTITY = ", mQUANTITY);

	mList = NewList(mLID, mCID, mPID, mRECIPE, mINTROTYPE, mQUANTITY);

	logn("Thinh <- readIntroFile()");

	return (mList);
}

CopyFiles(){
	local mFileRead, mFileWrite, DirectoryName, status;

	logn("Thinh -> CopyFiles()");

	CopyingFolder("..\\Sim\\config", "..\\config");
	CopyingFolder("..\\Sim\\ct_src", "..\\ct_src");
	CopyingFolder("..\\Sim\\data", "..\\data");
	CopyingFolder("..\\Sim\\recipe", "C:\\SC\\recipe");
	CopyingFolder("..\\Sim\\FA300Sim", "..\\FA300Sim");

	logn("*****************************************************");
	logn("********** PLEASE WAIT UNTIL TOOL IS READY **********");
	logn("*****************************************************");
}

CopyingFile(mInFile, mOutFile){
	local mFileRead, mFileWrite, status;

	//logn("Thinh -> CopyingFile()");

	mFileRead = mInFile;
	mFileWrite = mOutFile;
	status = FindFile(ToAscii(mFileWrite), "", FF_FILETITLEONLY);

	if(IsEmptyList(status)){
		logn("Thinh - ", mFileWrite, " NOT found!");
		logn("Thinh - Copying : ", mFileRead, " to : ", mFileWrite);
		status = filewrite(mFileWrite, FileRead(mFileRead));
		if(IsEmptyList(status))
			logn("Thinh - Operation was failed!");
		//else
		//	logn("Thinh - Operation was successful!");			
	}else{
		logn("Thinh - ", mFileWrite, " FOUND!");
	}

	//logn("Thinh <- CopyingFile()");
}

CopyingFolder(InFolder, OutFolder){
	local mInFolder, mOutFolder, mStatus;

	//logn("Thinh -> CopyingFolder()");
	mInFolder = InFolder;
	mOutFolder = OutFolder;
	mStatus = CreateDirectory(mOutFolder);
	//logn("Thinh - Create dir status : ", mStatus);	

	if(mStatus)
		logn("Thinh - Already exist : ", mOutFolder);
	else
		logn("Thinh - Created Dir : ", mOutFolder);

	StructuredObject = FindFile(mInFolder, "*", FF_FILETITLEONLY);

	if(IsDirectoryStructure(StructuredObject)){
		mFileList = StructuredObject.Files;
		logn("Thinh - Number of files : ", GetCount(mFileList));
		for(ii = 0;ii < GetCount(mFileList);ii = ii + 1){
			mFileName = mFileList[ii].Name;
			logn("Thinh - FileName : ", mFileName);
			FullPathSourceFile = CatString(mInFolder, "\\", mFileName);
			//logn("Thinh - FullPathSourceFile : ", FullPathSourceFile);	
			FullPathDestFile = CatString(mOutFolder, "\\", mFileName);
			//logn("Thinh - FullPathDestFile : ", FullPathDestFile);	
			CopyingFile(FullPathSourceFile, FullPathDestFile);
		}
	}else{
		logn("It is not a Directory Structure.");
	}

	//logn("Thinh <- CopyingFolder()");
}

////////////////////////////////////////////////////////
// Get CEID name from dictionary to display
////////////////////////////////////////////////////////
DisplayCeIdInfo(mCeId){
	local mCeIdStruct;
	mCeIdStruct = NewStructured(CEID_STRUCT);
	mCeIdStruct.ceid = mCeId;

	if(DictionaryLookup(mCeIdStruct, CeIdS_DICT))	//status found
		logn("*****  ", mCeId, ": ", DictionaryLookup(mCeIdStruct, CeIdS_DICT).name);
	else
		logn("*****  ", mCeId, " is Unknown   *****");
}

GetInternalSecData(vidList){
	local mVIDList, mValue;
	mVIDList = vidList;
	mFormat = GetForMat(mVIDList);
	logn("Thinh - mFormat = ", mFormat);

	switch(mFormat){
	case "B":
		mVIDList = InsertFirst(S2_B(mValue), mVIDList);
		break;
	case "J":
		mVIDList = InsertFirst(S2_J(mValue), mVIDList);
		break;
	case "I1":
		mVIDList = InsertFirst(S2_I1(mValue), mVIDList);
		break;
	case "I2":
		mVIDList = InsertFirst(S2_I2(mValue), mVIDList);
		break;
	case "I4":
		mVIDList = InsertFirst(S2_I4(mValue), mVIDList);
		break;
	case "I8":
		mVIDList = InsertFirst(S2_I8(mValue), mVIDList);
		break;
	case "U1":
		break;
	case "U2":
		mVIDList = InsertFirst(S2_U2(mValue), mVIDList);
		break;
	case "U4":
		if(mVID == 952)
			mVIDList = InsertFirst(S2_U1(5), mVIDList);
		else if(mVID == 955)
			mVIDList = InsertFirst(S2_U1(7), mVIDList);
		else if(mVID == 1531 || mVID == 1532)
			mVIDList = InsertFirst(S2_U2(2), mVIDList);
		else if(mVID == 2300010000)
			mVIDList = InsertFirst(S2_BOOLEAN(True), mVIDList);
		else if(mVID == 2300200103 || mVID == 2300200203 || mVID == 2300200303 || mVID == 2300200403 || mVID == 2300200406 || mVID == 2300200503 || mVID == 2300200506 || mVID == 2300200601 || mVID == 2300200602 || mVID == 2300200701 || mVID == 2300200702 || mVID == 2300200703 || mVID == 2300200704 || mVID == 2300200705 || mVID == 2300200706 || mVID == 2300200707 || mVID == 2300201601)
			mVIDList = InsertFirst(S2_U4(4), mVIDList);
		else if(mVID == 1589){
			for(ii = 0;ii < 4;ii = ii + 1){
				mStr = "Load Port";
				mList = NewList();

				if(ii == 2 || ii == 3)
					mStr = CatString(mStr, " 1");
				else
					mStr = CatString(mStr, " 2");

				if(ii == 0 || ii == 2)
					mStr = CatString(mStr, " - Docked");
				else
					mStr = CatString(mStr, " - Undocked");

				mList = InsertFirst(S2_A(), mList);
				mList = InsertFirst(S2_A(mStr), mList);
				mVIDList = InsertFirst(S2_L(mList), mVIDList);
			}
		}else
			mVIDList = InsertFirst(S2_U4(999999), mVIDList);

		break;
	case "U8":
		mVIDList = InsertFirst(S2_U8(mValue), mVIDList);
		break;
	case "F4":
		mVIDList = InsertFirst(S2_F4(mValue), mVIDList);
		break;
	case "F8":
		mVIDList = InsertFirst(S2_F8(mValue), mVIDList);
		break;
	case "BOOLEAN":
		mVIDList = InsertFirst(S2_BOOLEAN(mValue), mVIDList);
		break;
	case "L":
		mVIDList = InsertFirst(S2_L(mValue), mVIDList);
		break;
	default:
		break;

	}
}

////////////////////////////////////////////////
// To transform the VID to more meaningful name
////////////////////////////////////////////////
LookUpDict(Vids, Values){
	local i, mVid, mValue, mPossibleValue;

	for(i = 0;i < GetCount(Vids);i = i + 1){
		mVid = Smart_Decode(Vids[i]);
		mValue = Values[i];
		mPossibleValue = GetVIDState(ToAscii(mVid), ToAscii(mValue));
		
		if(!IsEmptyList(mPossibleValue)){
			logn("*****    VID:", mVid, " (", mPossibleValue[0], ") = ", mPossibleValue[1], " (", mPossibleValue[2], ")");
		}else{
			logn("*****    VID:", mVid, " = ", mValue);
		}
	}
}

////////////////////////////////////////////////////////
// Removing all white spaces in the provided string
///////////////////////////////////////////////////////
RemoveWhiteSpace(InStr){
	local i, mOutStr;
	for(i = 0;i < GetCount(InStr);i = i + 1){
		if(InStr[i] != " "){
			mOutStr = CatString(mOutStr, InStr[i]);
		}
	}
	return (mOutStr);
}

////////////////////////////////////////////////////////
// Converting comma separated string to a list 
///////////////////////////////////////////////////////
MakeListFromString(item){
	local i, mResult, subList, commaEnd, commaBegin, subItem;
	logn("->MakeListFromString()");

	if(FindString(item, " ").Count != 0){
		item = RemoveWhiteSpace(item);
	}

	commaBegin = 0;
	do{	//If field contains more than one item then they're separated by comma
		//logn("commaBegin: ", commaBegin);
		commaEnd = FindString(item, ",", commaBegin);

		if(commaEnd.Count != 0)
			subItem = SubString(item, commaBegin, commaEnd.Start - commaBegin); //Get each item in the field
		else
			subItem = SubString(item, commaBegin); //The last item in the field

		//logn("subItem: ", subItem);
		subList = InsertFirst(subItem, subList); //List all items together					
		commaBegin = commaEnd.Start + 1;
	}while(commaEnd.Count != 0); //Do until we don't see the next comma in the field

	//logn("Size: ", GetCount(subList));
	return (Reverse(subList));
}

VerifyPortTransferState(PortID){
	local mValues, mS1F4_Reply, mVid;
	logn(">>>>>  VerifyPortTransferState  <<<<<");
	mVid = NewList(S2_U4(33947729 + PortID));
	mS1F4_Reply = S1F3_Request(mVid);
	mValues = S1F4_Parser(mS1F4_Reply, mVid);
	return (mValues[0]);
}

ConvertStringToList(InString, Seperator){
	local mFound, mStartLocation, mItem, mList;
	mStartLocation = 0;
	mFound = FindString(InString, Seperator, 0);
	do{
		mItem = "";
		mFound = FindString(InString, Seperator, mStartLocation);
		if(mFound.Count == 1){
			mItem = SubString(InString, mStartLocation, mFound.Start - mStartLocation);
		}else{
			mItem = SubString(InString, mStartLocation);
		}
		if(mItem != ""){
			mList = InsertFirst(RemoveWhileSpace(mItem), mList);
		}

		mStartLocation = mFound.Start + mFound.Count;
		wait();
	}while(mFound.Start != 0 || mFound.Count != 0);

	return (Reverse(mList));
}

IsLPLocked(PortId){
	local mVID, S1F4_Reply, mStatus;
	
	switch(PortID){
		case 1 : mVID = NewList(S2_U4(33891057)); break; //Port1LockState 
		case 2 : mVID = NewList(S2_U4(33891058)); break; //Port2LockState 
		case 3 : mVID = NewList(S2_U4(33891059)); break; //Port3LockState 
		case 4 : mVID = NewList(S2_U4(33891060)); break; //Port4LockState 
		default : logn("**** ERROR! ERROR! ERROR ****");
	}
	
	S1F4_Reply = S1F3_Request(mVID);
	mStatus = S1F4_Parser(S1F4_Reply, mVID);
	wait(NewTimer(1));	//sleep for 1 sec
	return (mStatus);
}

//STRUCTURE INTROOBJ (lotid, carrierid, portid, recipe, introtype, quantity, pjid, cjid, State, inprocess, first, PWC, CJStart, pjCmd);
// PJQTY = 0 will prompt for decision on number of PJ   
RunLotAtLP(PortID, PjCmd, PJQTY, SlotsAndRecipes, TuningInfo){
	local mS1F4_Reply, mStatus, mSlotAndRecipe, mPortCID;
	
	if(CTRLREMOTE == 0){
		CTRLREMOTE = S1_F3_IsToolOnlineRemote(); //Verify again to make final decision
	}
	
	if(CTRLREMOTE == 0){
		logn("*****************************************************");
		logn("********* Please set Control ONLINE REMOTE **********");
		logn("*****************************************************");
		return;
	}else if(!RC1_READY && !RC2_READY && !RC3_READY && RC4_READY){
		logn("*****************************************************");
		logn("********* Tool is not ready for lot intro ***********");
		logn("*****************************************************");
		return;
	}

	INTROSTART = 1; //Start to introduce the Lot to the Tool
	logn(">>>>>  RunLotAtLP", PortID, " with ", PjCmd, "  <<<<<");
	mPortCID = GetCIDAtLP(PortID);
	//logn("mPortCID: ", mPortCID);
	if(SlotsAndRecipes){
		mSlotAndRecipe = SlotsAndRecipes;
	}else{
		mSlotAndRecipe = PromptForSlotAndRecipeSelection(PJQTY, TuningInfo);
	}

	INTRO[PortID - 1].quantity = GetCount(mSlotAndRecipe[0]);
	INTRO[PortID - 1].slots = mSlotAndRecipe[0];
	INTRO[PortID - 1].recipes = mSlotAndRecipe[1];
	INTRO[PortID - 1].State = "INTRO";
	INTRO[PortID - 1].portid = PortID;
	INTRO[PortID - 1].pjCmd = PjCmd;
	
	if(mPortCID){ //There's a lot sitting at the load port	
		//S3_F17_ProceedWithCarrier(mPortCID, PortID); 
		//wait(NewTimer(1));	//sleep for 1 sec
		PJQTY = GetCount(mSlotAndRecipe[1]);
		logn("PJQTY = ", PJQTY);
		logn("Slots: ", GetCount(mSlotAndRecipe[0]));
		
		if(TuningInfo != ""){
			SendProcessJob(PjCmd, INTRO[PortID - 1], PJQTY, TuningInfo);
			wait(NewTimer(1));	//sleep for 1 sec
			S14_F9_CreateCJobObjectRequest(INTRO[PortID - 1], PJQTY);
		}else if(SendProcessJob(PjCmd, INTRO[PortID - 1], PJQTY)){
			wait(NewTimer(1));	//sleep for 1 sec
			S14_F9_CreateCJobObjectRequest(INTRO[PortID - 1], PJQTY);
		}else{
			logn("**** ERROR Creating PJ. No CJ created! ERROR !!! ****");
		}
		//wait(NewTimer(1));	//sleep for 1 sec
		//S3_F17_ProceedWithCarrier(mPortCID, PortID); 

	}else{
		logn("DONT KNOW");
	}

	if(BIND){
		INTRO_COUNT = INTRO_COUNT + 1;
		SetBindInfo();
		INTRO[PortID - 1].carrierid = ASMLOT;
		logn("BIND -> ", INTRO[PortID - 1].carrierid);
	}else if(mPortCID){ //There's a lot sitting at the load port	
		INTRO[PortID - 1].carrierid = mPortCID;
	}else{
		INTRO[PortID - 1].carrierid = ToAscii(PortID); //Default using CarrierID similar as PortID
	}
}

public _Run_S16F11_SinglePJ(){RunLotRequest(0, "S16F11", 1);} //S16F11 can run Single PJ Only
public _Run_S16F15_SinglePJ(){RunLotRequest(0, "S16F15", 1);} //0: unknown PortID now, 1: single job
public _Run_S16F15_SingleTuningPJ(){RunLotRequest(0, "S16F15", 1, "", "PJTuning");}
public _Run_S16F15_SinglePJWithN2Purge(){ N2PURGE = 1; PURGEMODE = 1; RunLotRequest(0, "S16F15", 1);}
public _Run_S16F15_MultiPJs(){RunLotRequest(0, "S16F15", 0);}
public _Run_S16F11_AutoMultiJobs(){RunLotRequest(0, "S16F11");}
public _Run_S16F15_AutoMultiJobs(){RunLotRequest(0, "S16F15");}
public _Run_S16F11_FullLotWithBindService(){BIND = 1; BIND_SENT = 0; RunLotRequest(0, "S16F11", 1);}
public _Run_S16F15_FullLotWithBindService(){BIND = 1; BIND_SENT = 0; RunLotRequest(0, "S16F15", 1);}

public _Run_S16F15_25TuningPJs(){RunLotRequest(0, "S16F15", 25, "", "PJTuning");}

public _Run_S16F15_Repeat3CJsFor3FOUPs(){
	local mRecList, mSlotList, mSendPWC; 
	logn("->_Run_S16F15_Repeat3CJsFor3FOUPs()");
	REPEAT = 1;
	_Run_S16F15_Repeat1PJ_LP1();
	_Run_S16F15_Repeat1PJ_LP2();
	_Run_S16F15_Repeat1PJ_LP3();	
	
	// //~ _Run_S16F15_Repeat1PJ_LP1
	// if(!CID1_DOCKED){
		// S3_F17_ProceedWithCarrier("", 1);
		// INTRO[0].state = "PWC1";
		// mSendPWC = 1;
	// }
	
	// mRecList = NewList("SamplePJ");
	// mSlotList = NewList(SelectSlots("1,2"));
	// S7_F19_GetCurrentProcessPrograms();
	// S7F25_Request("SEQ|SamplePJ");
	// RunLotAtLP(1, "S16F15", 1, NewList(mSlotList, mRecList));
		
	// if(mSendPWC){
		// S3_F17_ProceedWithCarrier("", 1);
		// INTRO[0].state = "PWC2";
	// }		
	
	// //~ _Run_S16F15_Repeat1PJ_LP2
	// if(!CID2_DOCKED){
		// S3_F17_ProceedWithCarrier("", 2);
		// INTRO[1].state = "PWC1";
		// mSendPWC = 1;
	// }
	
	// mRecList = NewList("SamplePJ");
	// mSlotList = NewList(SelectSlots("3,4"));
	// S7_F19_GetCurrentProcessPrograms();
	// S7F25_Request("SEQ|SamplePJ");
	// RunLotAtLP(2, "S16F15", 1, NewList(mSlotList, mRecList));
		
	// if(mSendPWC){
		// S3_F17_ProceedWithCarrier("", 2);
		// INTRO[1].state = "PWC2";
	// }	
	
	// //~ _Run_S16F15_Repeat1PJ_LP3
	// if(!CID3_DOCKED){
		// S3_F17_ProceedWithCarrier("", 3);
		// INTRO[2].state = "PWC1";
		// mSendPWC = 1;
	// }
	
	// mRecList = NewList("SamplePJ");
	// mSlotList = NewList(SelectSlots("5,6"));
	// S7_F19_GetCurrentProcessPrograms();
	// S7F25_Request("SEQ|SamplePJ");	
	// RunLotAtLP(3, "S16F15", 1, NewList(mSlotList, mRecList));
	
	// if(mSendPWC){
		// S3_F17_ProceedWithCarrier("", 3);
		// INTRO[2].state = "PWC2"; 
	// }	
}

////////////////////////////////////////////////////////
// Provide option to run job with selected scripted recipe 
////////////////////////////////////////////////////////
public _Run_S16F15_Single_ScriptedRecipe(Recipe, PortID){
	local mRecList, mSlotList, mSlots, mRange;
	if(!PortID){
		do{
			PortID = GuiGetInteger("Default is LP1\nIf not LP1 then please enter LP#: (Eg. 2 or 3 or 4)");
			if(!PortID)
				PortID = 1; //Default if not enter LP#
		}while(PortID < 1 && PortID > 4);
	}
	
	if(!IsString(Recipe)){
		logn("**** Select PJRecipe ****");
		mGuiStrct = NewStructured(GuiGFNB);
		mGuiStrct.WinTitle = "Select File contains PJRecipe";
		mGuiStrct.FilePath = PJRECIPE_DIR;
		mStatus = GuiGetFileName(mGuiStrct);

		if(mStatus == 0){
			logn("Operation cancelled per user's request");
			return;
		}
		
		logn("FilePath: ", mGuiStrct.FilePath);		
		Recipe = CatString("SCR|", mGuiStrct.FileTitle);	
		logn("Recipe: ", Recipe);			
	}
		
	mRecList = NewList(Recipe);
	mSlotList = NewList(SelectSlots("0"));
	//mSlotList = NewList();
	S7F25_Request(Recipe);
	RunLotAtLP(PortID, "S16F15", 1, NewList(mSlotList, mRecList)); //PJQTY = 1. It's number of PJ to run 
	REPEAT = 0;
}

////////////////////////////////////////////////////////
// Provide option to run multiple PJs. It'll prompt for decision 
////////////////////////////////////////////////////////
public _Run_S16F15_Multi_ScriptedRecipes(Recipes, PortID){
	local mRecList, mSlotList, mSlots, mRange;
	if(!PortID){
		do{
			PortID = GuiGetInteger("Default is LP1\nIf not LP1 then please enter LP#: (Eg. 2 or 3 or 4)");
			if(!PortID)
				PortID = 1; //Default if not enter LP#
		}while(PortID < 1 && PortID > 4);
	}
	
	RunLotAtLP(PortID, "S16F15", 0); //PJQTY = 0 will prompt for decision number of PJ to run
	REPEAT = 0;
}

////////////////////////////////////////////////////////
// Provide option to run over and over again the same PJ for LP1's wafers
////////////////////////////////////////////////////////
public _Run_S16F15_Repeat1PJ_LP1(){
	local mRecList, mSlotList, mRec, mSlots, mRange, mText, mStatus, mSendPWC;
	
	if(!TOOL_READY){
		logn("****** TOOL IS NOT READY FOR LOT INTRODUCTION *******");
		return;
	}else if(!REPEAT){
		do{
			mText = "Click NO to Run Once. Click YES to Repeat\n*** Terminate click CANCEL ***\n";
			mStatus = GuiMsgBox("How do you want to process wafers ?", mText, 3);
		}while(mStatus == "");

		if(mStatus == 6){
			REPEAT = 1;
		}else if(mStatus == 7){
			REPEAT = 0;
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}

	if(!CID1_DOCKED){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC1";
		mSendPWC = 1;
	}
	
	mRecList = NewList("SamplePJ1");
	mSlotList = NewList(SelectSlots("1,2"));
	S7_F19_GetCurrentProcessPrograms();
	S7F25_Request("SEQ|SamplePJ1");
	S7_F19_GetCurrentProcessPrograms();
	RunLotAtLP(1, "S16F15", 1, NewList(mSlotList, mRecList));
		
	if(mSendPWC){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC2";
	}	
}

////////////////////////////////////////////////////////
// Provide option to run over and over again the same PJ for LP2's wafers
////////////////////////////////////////////////////////
public _Run_S16F15_Repeat1PJ_LP2(){
	local mRecList, mSlotList, mRec, mSlots, mRange, mText, mStatus, mSendPWC;
	
	if(!TOOL_READY){
		logn("****** TOOL IS NOT READY FOR LOT INTRODUCTION *******");
		return;
	}else if(!REPEAT){
		do{
			mText = "Click NO to Run Once. Click YES to Repeat\n*** Terminate click CANCEL ***\n";
			mStatus = GuiMsgBox("How do you want to process wafers ?", mText, 3);
		}while(mStatus == "");

		if(mStatus == 6){
			REPEAT = 1;
		}else if(mStatus == 7){
			REPEAT = 0;
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}

	if(!CID2_DOCKED){
		S3_F17_ProceedWithCarrier("", 2);
		INTRO[1].state = "PWC1";
		mSendPWC = 1;
	}
	
	mRecList = NewList("SamplePJ2");
	mSlotList = NewList(SelectSlots("3,4"));
	S7_F19_GetCurrentProcessPrograms();
	S7F25_Request("SEQ|SamplePJ2");
	S7_F19_GetCurrentProcessPrograms();
	RunLotAtLP(2, "S16F15", 1, NewList(mSlotList, mRecList));
		
	if(mSendPWC){
		S3_F17_ProceedWithCarrier("", 2);
		INTRO[1].state = "PWC2";
	}	
}

////////////////////////////////////////////////////////
// Provide option to run over and over again the same PJ for LP3's wafers
////////////////////////////////////////////////////////
public _Run_S16F15_Repeat1PJ_LP3(){
	local mRecList, mSlotList, mRec, mSlots, mRange, mText, mStatus, mSendPWC;
	
	if(!TOOL_READY){
		logn("****** TOOL IS NOT READY FOR LOT INTRODUCTION *******");
		return;
	}else if(!REPEAT){
		do{
			mText = "Click NO to Run Once. Click YES to Repeat\n*** Terminate click CANCEL ***\n";
			mStatus = GuiMsgBox("How do you want to process wafers ?", mText, 3);
		}while(mStatus == "");

		if(mStatus == 6){
			REPEAT = 1;
		}else if(mStatus == 7){
			REPEAT = 0;
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}

	if(!CID3_DOCKED){
		S3_F17_ProceedWithCarrier("", 3);
		INTRO[2].state = "PWC1";
		mSendPWC = 1;
	}
	
	mRecList = NewList("SamplePJ3");
	mSlotList = NewList(SelectSlots("5,6"));
	S7_F19_GetCurrentProcessPrograms();
	S7F25_Request("SEQ|SamplePJ3");	
	S7_F19_GetCurrentProcessPrograms();
	RunLotAtLP(3, "S16F15", 1, NewList(mSlotList, mRecList));
	
	if(mSendPWC){
		S3_F17_ProceedWithCarrier("", 3);
		INTRO[2].state = "PWC2"; 
	}
}

////////////////////////////////////////////////////////
// Provide option to run multiple CJ
////////////////////////////////////////////////////////
public _Run_S16F15_MultiCJs_ForOneFOUP(PortID){
	local mRec, mSlots, mStatus, mDone;
	if(!PortID){
		do{
			PortID = GuiGetInteger("Default is LP1\nIf not LP1 then please enter LP#: (Eg. 2 or 3 or 4)");
			if(!PortID)
				PortID = 1; //Default if not enter LP#
		}while(PortID < 1 && PortID > 4);
	}
	
	mDone = 0;
	do{
		do{
			mRec = SelectRecipe();
			mSlots = SelectSlots();	
			mStatus = GuiMsgBox("Building PJs for CJ", "Click NO to finalize CJ or YES to continue\n*** Terminate click CANCEL ***\nNeed more PJ for CJ?\n", 3);
		}while(mStatus == 6);

		if(mStatus == 7){
			mStatus = GuiMsgBox("Building CJ", "Click NO to conclue or YES for next CJ\n*** Terminate click CANCEL ***\nMore CJ?\n", 3);
			if(mStatus == 7){
				mDone = 1;
			}else{
				logn("Terminated per user's request");
				return;
			}				
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}while(!mDone);

	
}

////////////////////////////////////////////////////////
// Provide option to run over and over again the same 3 CJs for LP1's wafers
////////////////////////////////////////////////////////
public _Run_S16F15_Repeat3CJs_LP1(){
	local i, mRecList, mSlotList, mRec, mSlots, mRange, mText, mStatus, mSendPWC;
	local mPortID, mPJQty, mPJCmd;
	
	if(!TOOL_READY){
		logn("****** TOOL IS NOT READY FOR LOT INTRODUCTION *******");
		return;
	}else if(!REPEAT){
		do{
			mText = "Click NO to Run Once. Click YES to Repeat\n*** Terminate click CANCEL ***\n";
			mStatus = GuiMsgBox("How do you want to process wafers ?", mText, 3);
		}while(mStatus == "");

		if(mStatus == 6){
			REPEAT = 1;
		}else if(mStatus == 7){
			REPEAT = 0;
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}
	
	if(!CID1_DOCKED){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC1";
		mSendPWC = 1;
	}

	mPJCmd = "S16F15";
	mPJQty = 1;

	for(i = 1;i < 4;i = i + 1){
		mSlotList = NewList();
		mRecList = NewList();
		mRec = CatString("SamplePJ-", ToAscii(i));
		mRecList = InsertFirst(mRec, mRecList);
		mSlots = NewList(i, i * 4);
		mSlotList = InsertFirst(mSlots, mSlotList);
		
		INTRO[0].slots = Reverse(mSlotList);;
		INTRO[0].recipes = Reverse(mRecList);
	
		if(SendProcessJob(mPJCmd, INTRO[0], mPJQty)){
			wait(NewTimer(1));	//sleep for 1 sec
			S14_F9_CreateCJobObjectRequest(INTRO[0], mPJQty);
		}else{
			logn("**** ERROR Creating PJ. No CJ created! ERROR !!! ****");
		}
	}

	// for(i = 1;i < 4;i = i + 1){
		// S7F25_Request(CatString("SEQ|SamplePJ-", ToAscii(i)));
	// }

	if(mSendPWC){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC2";
	}	
}

////////////////////////////////////////////////////////
// Provide option to run over and over again the same 3 PJs for LP1's wafers
////////////////////////////////////////////////////////
public _Run_S16F15_Repeat3PJs_LP1(){
	local i, mRecList, mSlotList, mRec, mSlots, mRange, mText, mStatus, mSendPWC;
	
	if(!TOOL_READY){
		logn("****** TOOL IS NOT READY FOR LOT INTRODUCTION *******");
		return;
	}else if(!REPEAT){
		do{
			mText = "Click NO to Run Once. Click YES to Repeat\n*** Terminate click CANCEL ***\n";
			mStatus = GuiMsgBox("How do you want to process wafers ?", mText, 3);
		}while(mStatus == "");

		if(mStatus == 6){
			REPEAT = 1;
		}else if(mStatus == 7){
			REPEAT = 0;
		}else{
			logn("Terminated per user's request");
			return;
		}		
	}
	
	if(!CID1_DOCKED){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC1";
		mSendPWC = 1;
	}

	for(i = 1;i < 4;i = i + 1){
		mRec = CatString("SamplePJ-", ToAscii(i));
		mRecList = InsertFirst(mRec, mRecList);
		mSlots = NewList(i, i * 4);
		mSlotList = InsertFirst(mSlots, mSlotList);
	}

	mRecList = Reverse(mRecList);
	mSlotList = Reverse(mSlotList);
	for(i = 1;i < 4;i = i + 1){
		S7F25_Request(CatString("SEQ|SamplePJ-", ToAscii(i)));
	}
	RunLotAtLP(1, "S16F15", 3, NewList(mSlotList, mRecList));
	
	if(mSendPWC){
		S3_F17_ProceedWithCarrier("", 1);
		INTRO[0].state = "PWC2";
	}	
}

////////////////////////////////////////////////////////
// Run wafers of any LP
////////////////////////////////////////////////////////
RunLotRequest(PortID, PJCmd, PJQTY, SlotsAndRecipes, Tuning){
	local i, mTuningInfo, mText, mStatus;
	
	logn("Tuning = ", Tuning);
	
	if(PortID){
		mLP = PortID;
	}else{
		mPrompt = CatString("Process ", Qty, " LOT via", PJCmd, ". Default is LP1\nPlease enter LP#: (Eg. any 1 to 4)");
		do{
			mLP = GuiGetInteger(mPrompt);
			if(!mLP)
				mLP = 1; //Default if not enter LP#
		}while(mLP < 1 && mLP > 4);
	}
	
	if(Tuning == "PJTuning"){
		mText = "Click NO to Update or Click YES to Submit\n*** Terminate click CANCEL ***\nHave you entered correct Tuning Info?\n";
		do{
			mTuningInfo = GuiGetString("Enter tuning Info in format <ParaName=ParaValue>. For instance, PRRecipeCycle=1");
			mStatus = GuiMsgBox("mTuningInfo", CatString(mText, mTuningInfo), 3);
		}while(mStatus == 7);
	}

	PID = mLP; //Keep this info in global for wide access
	logn(">>>>>> Run_", PJCmd, "_", PJQTY, "PJ_LP", mLP, "_Request <<<<<<<");	
	RunLotAtLP(mLP, PJCmd, PJQTY, SlotsAndRecipes, mTuningInfo);
}

////////////////////////////////////////////////////////
// Run S2F41 to switch chamber's mode 
////////////////////////////////////////////////////////
ChangeModulesStateFromMaintToProd(){
	local S1F4_Reply, mStatus;

	S1F4_Reply = S1F3_Request(S2_U4(130220006)); //ModOperateState (LP1 or Left Load Port)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("***** Switching LoadPort1 from Maintenance to Production *****");
		S2_F41_ChangeModuleState("CM1", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(131220006)); //ModOperateState (LP2 or Right Load Port)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching LoadPort2 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("CM2", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(120200021)); //ModOperateState (Vacuum Robot)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching TM1 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("TM1", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(121210009)); //ModOperateState (Atmospheric Robot)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching TM2 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("TM2", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(101030193)); //ModOperateState (Pulsar PM1)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Pulsar PM1 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM1", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(102030193)); //ModOperateState (Pulsar PM2)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Pulsar PM2 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM2", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(103030193)); //ModOperateState (Pulsar PM3)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Pulsar PM3 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM3", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(104030193)); //ModOperateState (Pulsar PM4)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Pulsar PM4 from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM4", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(106230009)); //ModOperateState (Left Load Lock)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Left LoadLock from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM6", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}

	S1F4_Reply = S1F3_Request(S2_U4(107230009)); //ModOperateState (Right Load Lock)
	mStatus = S1F4_Parser(S1F4_Reply);
	wait(NewTimer(1));	//sleep for 1 sec

	if(mStatus[0] == 1){ //0:Unknown, 1:Maintenance, 2:Production
		logn("**** Switching Right LoadLock from Maintenance to Production ****");
		S2_F41_ChangeModuleState("PM7", "Production");
		wait(NewTimer(1));	//sleep for 1 sec
	}
}

////////////////////////////////////////////////////////
// Delete empty existing folder for any purpose
////////////////////////////////////////////////////////
DeleteDirIfExist(Directory){
	//logn("**** DeleteDirIfExist: ", Directory);		
	if(IsDirectoryStructure(FindFile(Directory, "", FF_SHOWALL))){
		if(IsEmptyList(RemoveDirectory(Directory)))
			logn("Thinh - failed to delete dir: ", Directory);
		else
			logn("Deleted dir: ", Directory);
	}
}

////////////////////////////////////////////////////////
// Create folder for any purpose. Will only create if it does not exist yet
////////////////////////////////////////////////////////
CreateDirIfNotExist(Directory){
	//logn("**** CreateDirIfNotExist: ", Directory);		
	if(!IsDirectoryStructure(FindFile(Directory, "", FF_SHOWALL))){
		if(IsEmptyList(CreateDirectory(Directory)))
			logn("Thinh - failed to create dir: ", Directory);
		else
			logn("Created dir: ", Directory);
	}
	// else{
		// logn("Already exists!");
	// }
	return (Directory);
}

////////////////////////////////////////////////////////
// Create recipe file once doing recipe upload. Create only if does not exist
////////////////////////////////////////////////////////
CreateRecipeIfNotExist(recipeObject){
	if(!IsFileStructure(FindFile(recipeObject.hostfullname, "", FF_NORMAL))){
		if(IsEmptyList(filewrite(recipeObject.hostfullname, recipeObject.origfullname)))
			logn("Thinh - failed to create recipe: ", recipeObject.hostfullname);
		// else
			// logn("Created Recipe: ", recipeObject.hostfullname);
	}
}

////////////////////////////////////////////////////////
// Delete recipe file to cleanup if found. It's to prepare a new upload operation
////////////////////////////////////////////////////////
DeleteRecipeIfExist(recipeObject){
	if(IsFileStructure(FindFile(recipeObject.hostfullname, "", FF_NORMAL))){
		if(IsEmptyList(filewrite(recipeObject.hostfullname))){
			logn("Thinh - failed to Delete Recipe: ", recipeObject.hostfullname);
			return (0);
		}else{
			//logn("Deleted Recipe: ", recipeObject.hostfullname);
			return (1);
		}
	}
	return (0);
}

////////////////////////////////////////////////////////
// Upload recipe to Host to keep as a gold recipe
////////////////////////////////////////////////////////
AddHostRecipe(Recipe, RecType){
	local mHostRecFullName;
	logn("Thinh - AddHostRecipe: ", Recipe);
	mHostRecFullName = _AddLeaf(CatString(".\\", RecType), Recipe);
	//logn("mHostRecFullName: ", mHostRecFullName);
	if(!IsFileStructure(FindFile(mHostRecFullName, "", FF_NORMAL))){
		if(IsEmptyList(filewrite(mHostRecFullName, Recipe)))
			logn("Thinh - failed to create recipe: ", mHostRecFullName);
		// else
			// logn("Created Recipe: ", mHostRecFullName);
	}
}

////////////////////////////////////////////////////////
// Delete Host's gold recipe. Prepare for a new upload
////////////////////////////////////////////////////////
RemoveHostRecipe(Recipe, RecType){
	local mHostRecFullName;
	logn("Thinh - RemoveHostRecipe: ", Recipe);
	mHostRecFullName = _AddLeaf(CatString(".\\", RecType), Recipe);
	//logn("mHostRecFullName: ", mHostRecFullName);
	if(IsFileStructure(FindFile(mHostRecFullName, "", FF_NORMAL))){
		if(IsEmptyList(filewrite(mHostRecFullName))) //No data to write will delete the file
			logn("Thinh - failed to remove recipe: ", mHostRecFullName);
		// else
			// logn("Removed Recipe: ", mHostRecFullName);
	}
}

////////////////////////////////////////////////////////
// Wipe out the whole folder PJRecipe. Prepare for a new upload
////////////////////////////////////////////////////////
public _RemovePJRecipes(){
	RemoveRecipes(PJRECIPE_DIR);
}

////////////////////////////////////////////////////////
// Wipe out the whole folder ProcessRecipe. Prepare for a new upload
////////////////////////////////////////////////////////
public _RemoveProcessRecipes(){
	RemoveRecipes(PROCREC_DIR);
}

////////////////////////////////////////////////////////
// Delete all recipes in any recipe folder. Prepare for new upload
////////////////////////////////////////////////////////
RemoveRecipes(RecDir){
	local mStructuredObject, mSubDirs, mFileStructure, mRecipes, mRecipeName;
	
	mStructuredObject = FindFile (RecDir, "*", FF_RECURSE);	
	
	if(IsDirectoryStructure(mStructuredObject)){
		mSubDirs = mStructuredObject.Directories;
		if(GetCount(mSubDirs) > 0){ //With Sub-Dirs
			for(i = 0;i < GetCount(mSubDirs);i = i + 1){
				mFileStructure = mSubDirs[i];
				if(IsDirectoryStructure(mFileStructure)){
					//logn("******* ", fileStructure);
					//logn("Dir : ", mFileStructure.Name);
					mRecipes = mFileStructure.Files;
					for(ii = 0;ii < GetCount(mRecipes);ii = ii + 1){
						mRecipeName = mRecipes[ii].Name;
						//logn("Thinh - mRecipeName : ", mRecipeName);
						// if(IsEmptyList(filewrite(mRecipeName))){ //No data to write will delete the file
							// logn("Thinh - failed to remove recipe: ", mRecipeName);
						// }else{
							// logn("Removed Recipe: ", mRecipeName);	
						// }
					}			
				}
			}			
		}else{ //No Sub-Dirs
			mRecipes = mStructuredObject.Files;
			for(ii = 0;ii < GetCount(mRecipes);ii = ii + 1){
				mRecipeName = mRecipes[ii].Name;
				//logn("Thinh - mRecipeName : ", mRecipeName);
				// if(IsEmptyList(filewrite(mRecipeName))){ //No data to write will delete the file
					// logn("Thinh - failed to remove recipe: ", mRecipeName);
				// }else{
					// logn("Removed Recipe: ", mRecipeName);	
				// }
			}			
		}
	}
}

////////////////////////////////////////////////////////
// Demanding the tool to update Host's PJRecipe & ProcessRecipes whenever needed
////////////////////////////////////////////////////////
public _UpdateRecipeDirectories(){
	local i, mRecipeFolder, mCurrentDir, mFullPathRecipe;
	logn("Thinh -> _UpdateRecipeDirectories()");

	if(IsEmptyList(RECIPES)){ //Either Delete or Create case once Recipe provided
		S7_F19_GetCurrentProcessPrograms();
	}

	for(i = 0;i < GetCount(RECIPES);i = i + 1){
		if(TOOLTYPE == "Mecca"){
			mFullPathRecipe = RECIPES[i].origfullname;
			mFound = FindString(mFullPathRecipe, ".rcp");
			if(mFound.Count > 0){
				mCurrentDir = CreateDirIfNotExist(PROCREC_DIR);
			}else{
				mCurrentDir = CreateDirIfNotExist(PJRECIPE_DIR);
			}
			do{
				mFound = FindString(mFullPathRecipe, "\\");
				if(mFound.Start == 0){
					mFullPathRecipe = SubString(mFullPathRecipe, 1);
					//logn("Found available recipe: ", mFullPathRecipe);
					mFound = FindString(mFullPathRecipe, "\\");
					if(mFound.Count == 0){
						RECIPES[i].hostfullname = _AddLeaf(mCurrentDir, mFullPathRecipe);
						DeleteRecipeIfExist(RECIPES[i]);
						CreateRecipeIfNotExist(RECIPES[i]);
						mFullPathRecipe = "";
					}
				}else if(mFound.Count > 0){
					mRecipeFolder = SubString(mFullPathRecipe, 0, mFound.Start);
					//logn("Found available folder: ", mRecipeFolder);
					mRecipeFolder = CatString(mCurrentDir, "\\", mRecipeFolder);
					mCurrentDir = CreateDirIfNotExist(mRecipeFolder);
					//logn("mCurrentDir now is ", mCurrentDir);
					mFullPathRecipe = SubString(mFullPathRecipe, mFound.Start);
				}
			}while(mFullPathRecipe);
		}else{	
			mRecipeFolder = RECIPES[i].folder;
			//logn("mRecipeFolder: ", mRecipeFolder);
			if(mRecipeFolder == "SEQ" || mRecipeFolder == ".\\"){ //Create sub-folder for PJRecipes if needed
				mCurrentDir = CreateDirIfNotExist(PJRECIPE_DIR);
				//logn("mCurrentDir = ", mCurrentDir);
				if(mRecipeFolder == "SEQ"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\SEQ"));					
				}
			}else if(mRecipeFolder == "SCR" || mRecipeFolder == "PS1" || mRecipeFolder == "PS2" || mRecipeFolder == "PS3" || mRecipeFolder == "PS4"){
				mCurrentDir = CreateDirIfNotExist(".\\Script"); //Create sub-folder for script recipes if needed
				if(mRecipeFolder == "SCR"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\SCR"));
				}else if(mRecipeFolder == "PS1"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\PS1"));
				}else if(mRecipeFolder == "PS2"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\PS2"));
				}else if(mRecipeFolder == "PS3"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\PS3"));
				}else if(mRecipeFolder == "PS4"){
					mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, "\PS4"));
				}
			}else{ //Create sub-folder for process recipes if needed
				mCurrentDir = CreateDirIfNotExist(PROCREC_DIR);
				mCurrentDir = CreateDirIfNotExist(_AddLeaf(mCurrentDir, mRecipeFolder));
			}
			//Now is time to create recipes to appropriate folder - It's file name to use only, content is empty
			RECIPES[i].hostfullname = _AddLeaf(mCurrentDir, RECIPES[i].name);
			DeleteRecipeIfExist(RECIPES[i]);
			CreateRecipeIfNotExist(RECIPES[i]);
		}
	}
}

////////////////////////////////////////////////////////
// Demanding the tool to update Host's ProcessRecipes whenever needed
////////////////////////////////////////////////////////
public _UpdateProcessRecipeDir(Recipes){
	local i, ii, mProcessRecipeDir, mRecipeDir, mRecDirStrObj, mStatus, mFullPathFile, mRCRecipes;
	logn("Thinh -> UpdateProcessRecipeDir()");

	if(CTRLREMOTE){
		if(IsEmptyList(Recipes)){
			Recipes = S7_F71_GetCurrentProcessRecipeList();
		}

		mProcessRecipeDir = "ProcessRecipe";
		mRecDirStrObj = FindFile(mProcessRecipeDir, "*", FF_SHOWALL);

		if(IsDirectoryStructure(mRecDirStrObj)){
			mStatus = RemoveDirectory(mProcessRecipeDir);
			if(IsEmptyList(mStatus))
				logn("Thinh - failed to delete dir: ", mProcessRecipeDir);
		}

		mStatus = CreateDirectory(mProcessRecipeDir);
		if(IsEmptyList(mStatus))
			logn("Thinh - failed to create dir: ", mRecipeDir);

		for(i = 0;i < GetCount(Recipes);i = i + 1){
			mRecipeDir = CatString(mProcessRecipeDir, "\\", "RC", ToAscii(i + 1));
			mStatus = CreateDirectory(mRecipeDir);
			if(IsEmptyList(mStatus))
				logn("Thinh - failed to create dir: ", mRecipeDir);

			mRCRecipes = Recipes[i];
			for(ii = 0;ii < GetCount(mRCRecipes);ii = ii + 1){
				mFullPathFile = CatString(".\\", mRecipeDir, "\\", mRCRecipes[ii]);
				mStatus = filewrite(mFullPathFile, mRCRecipes[ii]);
				if(IsEmptyList(mStatus))
					logn("Thinh - failed to create recipe: ", mRCRecipes[ii]);
			}
		}
	}else{
		logn("*****************************************************");
		logn("*****  Can't do it. Tool must be Online/Remote ******");
		logn("*****************************************************");
	}
}

RemoveFileExtenstion(FileName){
	local mFileWithNoExtension, mFound;
	mFound = FindString(FileName, ".", 0);
	if(mFound.Count > 0){
		mFileWithNoExtension = SubString(FileName, 0, mFound.Start);
		return (mFileWithNoExtension);
	}else
		return (FileName);
}

////////////////////////////////////////////////////////
// Provide option for user to pick PJ recipe to run wafers
////////////////////////////////////////////////////////
SelectRecipe(){
	local mGuiStrct, mStatus, mRecipe;
	logn("**** SelectRecipe ****");
	mGuiStrct = NewStructured(GuiGFNB);
	mGuiStrct.WinTitle = "Select PJ or Script Recipe to Process";
	mGuiStrct.FilePath = PJRECIPE_DIR;;
	mStatus = GuiGetFileName(mGuiStrct);

	if(mStatus == 0){
		logn("Operation cancelled per user's request");
		return;
	}
	
	logn("Recipe: ", mGuiStrct.FileTitle);
	
	if (FindString(mGuiStrct.FilePath,"\\SCR", 0).Count > 0){
		mRecipe = CatString("SCR|", RemoveFileExtenstion(mGuiStrct.FileTitle));
	}else{
		mRecipe = RemoveFileExtenstion(mGuiStrct.FileTitle);
	}
	
	// if(TOOLTYPE == "Mecca"){
		// mS7F24_Reply = S7F23_Request(CatString("/SEQUENCE/",mRecipe));
		// wait(NewTimer(1));	//sleep for 1 sec
		// S7F24_Parser(mS7F24_Reply);
		// wait(NewTimer(1));	//sleep for 1 sec
		// S7F19_GetCurrentProcessPrograms();
		// wait(NewTimer(1));	//sleep for 1 sec
		// mS7F26_Reply = S7F25_Request(CatString("/SEQUENCE/",mRecipe));
		// S7F26_Parser(mS7F26_Reply);
	// }
	
	return (mRecipe);
}

////////////////////////////////////////////////////////
// Provide option for user to pick specific slots to run 
////////////////////////////////////////////////////////
SelectSlots(Slots){
	local mSlots, mDash, mComma, mSlotList, mMin, mMax;
	if(Slots){
		mSlots = Slots;
	}else{
		mSlots = GuiGetString("Default is ONLY slot 1\nEnter Slots: (eg. 1-5 or 1,3,5,7)");
		if(!mSlots){
			mSlots = "1";
		}else if(mSlots == "0"){
			return;
		}
	}
	mDash = FindString(mSlots, "-", 0);
	mComma = FindString(mSlots, ",", 0);

	if(mDash.Count < 1 && mComma.Count < 1){ //Single slot selected
		mSlotList = NewList(AtoI(mSlots));
	}else if(mComma.Count > 0){ //Slots with comma seperators selected
		mSlotList = ConvertStringToList(mSlots, ",");
		mSlotList = ConvertStringListToIntegerList(mSlotList);
	}else if(mDash.Count > 0){ //Slots range with dash
		mMin = AtoI(Substring(mSlots, 0, mDash.start));
		mMax = AtoI(Substring(mSlots, mDash.start + 1));
		mSlotList = NewList();
		for(i = mMin;i <= mMax;i = i + 1){
			mSlotList = InsertFirst(i, mSlotList);
		}
		mSlotList = Reverse(mSlotList);
	}else{
		logn("**** USER ERROR ! ERROR ! ERROR ! ****");
	}

	//logn(">>>> Selected Slots: ", mSlotList);

	return (mSlotList);
}

////////////////////////////////////////////////////////
// Utility to manipulate list data
////////////////////////////////////////////////////////
ConvertStringListToIntegerList(StrList){
	local i, mIntList;
	for(i = 0;i < GetCount(StrList);i = i + 1){
		mIntList = InsertFirst(AtoI(StrList[i]), mIntList);
	}
	return (Reverse(mIntList));
}

////////////////////////////////////////////////////////
// Provide option for user to pick number of PJ and slots to run
////////////////////////////////////////////////////////
PromptForSlotAndRecipeSelection(PJQTY, TuningInfo){
	local i, mRec, mSlots, mRecList, mSlotList;
	
	if(PJQTY == 0){
		PJQTY = GuiGetInteger("How many PJs ? (Default = 1)");

		if(!PJQTY){
			PJQTY = 1;
		}		
	}
	
	if(TuningInfo != ""){		
		mRec = SelectRecipe();
		logn(CatString("**** ", ToAscii(PJQTY), "_PJs with recipe ", mRec, " and ", TuningInfo));
		for(i = 0;i < PJQTY;i = i + 1){			
			mRecList = InsertFirst(mRec, mRecList);
			mSlotList = InsertFirst(NewList(i+1), mSlotList);
		}		
	}
	else{
		logn("**** PromptForSlotAndRecipeSelection: ", PJQTY, "_PJ");
		for(i = 0;i < PJQTY;i = i + 1){
			mRec = SelectRecipe();
			mRecList = InsertFirst(mRec, mRecList);
			mSlots = SelectSlots();
			mSlotList = InsertFirst(mSlots, mSlotList);
		}
	}
	
	mRecList = Reverse(mRecList);
	mSlotList = Reverse(mSlotList);	
	return (NewList(mSlotList, mRecList));
}

////////////////////////////////////////////////////////
// Utility to manipulate data with whitespace
////////////////////////////////////////////////////////
RemoveWhileSpace(inStr){
	local i, outStr;

	do{
		for(i = 0;i < GetCount(inStr);i = i + 1){
			if(inStr[i] != " ")
				outStr = CatString(outStr, inStr[i]);
		}
		inStr = outStr;
	}while(FindString(" ", inStr).Count > 0);
	//logn("outStr: <", outStr, ">");
	return (outStr);
}

////////////////////////////////////////////////////////
// Utility to update string data
////////////////////////////////////////////////////////
FindAndReplace(inStr, findStr, replaceStr){
	local i, outStr;

	do{
		for(i = 0;i < GetCount(inStr);i = i + 1){
			if(inStr[i] != findStr)
				outStr = CatString(outStr, inStr[i]);
			else
				outStr = CatString(outStr, replaceStr);
		}
		inStr = outStr;
	}while(FindString(findStr, inStr).Count > 0);
	//logn("outStr: <", outStr, ">");
	return (outStr);
}

GetCIDAtLP(PortID){
	local mCID, mCarrierIDVID, mS1F4_Reply;
	logn("**** GetCIDAtLP:", PortID, ": ");

	switch(PortID){
		case 1 : mCID = LP1_CID; break;
		case 2 : mCID = LP2_CID; break;
		case 3 : mCID = LP3_CID; break;
		case 4 : mCID = LP4_CID; break;
		default : logn("**** ERROR! ERROR! ERROR ****");
	}
	//logn("CID: ", mCID);	
	if(mCID == ""){ //Query new data
		switch(PortID){
			case 1 : mCarrierIDVID = 33947681; break;
			case 2 : mCarrierIDVID = 33947682; break;
			case 3 : mCarrierIDVID = 33947683; break;
			case 4 : mCarrierIDVID = 33947684; break;
			default : logn("**** ERROR! ERROR! ERROR ****");
		}
		
		mCarrierIDVID = S2_U4(mCarrierIDVID);
		mS1F4_Reply = S1F3_Request(mCarrierIDVID);
		mCID = S1F4_Parser(mS1F4_Reply, NewList(mCarrierIDVID))[0];
		
		if(mCID){ //Update it again
			switch(PortID){ 
				case 1 : LP1_CID = mCID; break;
				case 2 : LP2_CID = mCID; break;
				case 3 : LP3_CID = mCID; break;
				case 4 : LP4_CID = mCID; break;
				default : logn("**** ERROR! ERROR! ERROR ****");
			}				
		}
	}
	//logn(mCID);
	return (mCID);
}

////////////////////////////////////////////////////////
// Utility to keep all log in multiple files for a long run
////////////////////////////////////////////////////////
RenameOldLog(){
	local mDateTime, mOldLog, mNewLog, mStatus;
	mOldLog = "C:\\ASM-Host\\Log\\ASM-Host.old";
	if(IsFileStructure(FindFile(mOldLog, "", FF_NORMAL))){
		mDateTime = GetDateTime();
		mNewLog = CatString("C:\\ASM-Host\\Log\\ASM-Host-", mDateTime, ".txt");
		mStatus = FileWrite(mNewLog, FileRead(mOldLog));
		if(IsEmptyList(mStatus)){
			logn("Thinh - Failed to Rename OLD log!");
			return (0);
		}else{
			logn("Thinh - Successfully to Rename OLD log!");
			return (1);
		}
	}

	return (0);
}

////////////////////////////////////////////////////////
// Utility to cleanup old logs
////////////////////////////////////////////////////////
DeleteOldLog(){
	local mDateTime, mOldLog, mNewLog, mStatus;
	mOldLog = "C:\\ASM-Host\\Log\\ASM-Host.old";
	if(IsFileStructure(FindFile(mOldLog, "", FF_NORMAL))){
		mStatus = FileWrite(mOldLog);
		if(IsEmptyList(mStatus)){
			logn("Thinh - Failed to Delete OLD log!");
		}else{
			logn("Thinh - Successfully to Delete OLD log!");
		}
	}
}

//Input : String, String
//Output: List
GetVIDState(Vid, VidValue){
	local i, mVidVal, mVidStruct, mFound, mVidValuePairs, mDash, mPossibleValue, mFoundValue;
	mVidVal = NewList();
	mVidStruct = NewStructured(VID_STRUCT);	
	mVidStruct.vid = Vid;
	mFound = DictionaryLookup(mVidStruct, VIDS_DICT);
	//logn("mFound: ", mFound);
	if(mFound){ //If the VID is the pre-defined Value/Name VID then we'll try to decode the value  
	
		mVidValuePairs = mFound.valnames;
		//logn("mVidValuePairs: ", mVidValuePairs);
		if(!isEmptyList(mVidValuePairs)){ //This VID has pre-defined ValueName pair
			for(i = 0;i < GetCount(mVidValuePairs);i = i + 1){
				mPossibleValue = mVidValuePairs[i];
				//logn("mPossibleValue: ", mPossibleValue);
				mDash = FindString(mPossibleValue, "=");
				//logn("mDash: ", mDash);
				if(mDash.Count > 0){
					if (IsInteger(VidValue)){
						VidValue = ToAscii(VidValue);
					}
					mFoundValue = FindString(mPossibleValue, VidValue);
					if(mFoundValue.Count > 0){
						mVidVal = splitString(mPossibleValue, "=");
						mVidVal = InsertFirst(mFound.name, mVidVal);
						break;
					}
				}
			}
		}
	}
		
	return(mVidVal);
}

//Input: None
//Output: Array of CJs in executing
public _GetExecutingCJIDs(){
	local mCJIDs;
	for(i=0; i < GetCount(INTRO); i=i+1){
		logn(INTRO[i].cjid, ": ", INTRO[i].CJstate);
		
		if(INTRO[i].CJstate == 3){	
			mCJIDs = InsertFirst(INTRO[i].cjid, mCJIDs);
		}
	}
	
	logn("Array: ", ListToArray(mCJIDs));
	return(ListToArray(mCJIDs));	
}

_TEST(){
	local i, a, b, c, simmsg, mLines, mLogTime, mPJID, mGuiStrct;
	local test, mSlots, fileContent, mFStatus, count, counter;
	local mRecipeFolder, mCurrentDir, CEIDInfo, reportIdInfo, RPTIDInfo, VIDInfo;
	local found, foundInt;
	local Temp;
	local The_File;

	logn("Begins _TEST");
	// Temp = 0;
	// The_File = FileRead("C:\\ASM-Host\\Config\\SYN\\ConvertedEventXp.txt");
	// logn("Started Finding...");

	// do{
	// found = FindString(The_File, "RPTID", Temp);
	// Temp = found.Start + found.Count;
	// counter = counter + 1;
	// wait();
	// } while (found.Start != 0 || found.Count != 0);

	// logn("Done!", counter);

	// count = counter = 0;
	// RPTID_SRC = CatString("C:\\ASM-Host\\Config\\EPI\\ConvertedEventXp.txt");
	// mFStatus = FindFile(RPTID_SRC,"", FF_FILETITLEONLY);

	// // logn(RPTID_SRC);
	// if (!IsEmptyList(mFStatus)){
	// mLines = GetLines(RPTID_SRC);
	// for (i = 0; i < GetCount(mLines); i = i + 1){
	// if((FindString(mLines[i], "CEID : ", 0)).Count > 0){
	// CEIDInfo = splitString(mLines[i], " : ");
	// logn("CEID: ", CEIDInfo[2], " NAME: ", CEIDInfo[3]);
	// }else if((FindString(mLines[i], "RPID : ", 0)).Count > 0){
	// reportIdInfo = splitString(mLines[i], " : ");
	// logn("reportId: ", reportIdInfo[2]);
	// }else if((FindString(mLines[i], "RPTID : ", 0)).Count > 0){
	// RPTIDInfo = splitString(mLines[i], " : ");
	// logn("RPTID: ", RPTIDInfo[2], " NAME: ", RPTIDInfo[3]);
	// }else if((FindString(mLines[i], "VID : ", 0)).Count > 0){
	// VIDInfo = splitString(mLines[i], " : ");
	// logn("VID: ", VIDInfo[2], " NAME: ", VIDInfo[3]);
	// }
	// }
	// }else
	// logn("empty");
	// if (!IsEmptyList(mFStatus)){
	// mLines = GetLines(RPTID_SRC);
	// for (i = 0; i < GetCount(mLines); i = i + 1){
	// found = FindString(mLines[i], "CEID: ", 0);
	// if(found.Count != 0){
	// found = FindString(mLines[i], ": ^I", 0);
	// if (found.Count != 0){
	// logn("Found: ", SubString(mLines[i], found.Start + 2));
	// }
	// }else{
	// found = FindString(mLines[i], "RPTID", 0);
	// if (found.Count != 0){
	// found = FindString(mLines[i], ": ^I", 0);
	// if (found.Count != 0){
	// logn("Found: ", SubString(mLines[i], found.Start + 2));
	// }
	// }
	// }

	// }
	// }else
	// logn("empty");

	test = "CEID : $00011010 : 69648 : EquipmentOFF-LINE : ";
	ceidInfo = splitString(test, " : ");

	for(i = 0;i < GetCount(ceidInfo);i = i + 1)
		logn(i, " = ", ceidInfo[i]);

	logn("Performing special work now...");

	// mRecipeFolder = ".\\PJRecipe\\Test1";
	// mCurrentDir = CreateDirIfNotExist(mRecipeFolder);
	// logn("mCurrentDir = ", mCurrentDir);

	// a = "/SEQUENCE/eqpostjob";
	// b = "/";
	// c = "\\";
	// FindAndReplace(a,b,c);

	// local mPort1TransferState, mPort1ReservationState, mPort1AssociationState, mStatus;
	// S1F4_Reply = S1F3_Request(NewList(S2_U4(33947745), S2_U4(33947777), S2_U4(33947729))); 
	// mStatus = S1F4_Parser(S1F4_Reply);
	// mPort1TransferState = 	mStatus[0];	
	// mPort1ReservationState = 	mStatus[1];	
	// mPort1AssociationState = 	mStatus[2];	
	// logn("mPort1TransferState: ", mPort1TransferState);
	// logn("mPort1ReservationState: ", mPort1ReservationState);
	// logn("mPort1AssociationState: ", mPort1AssociationState);

}
// It splits all items in a string by a specified separator into a list
splitString(inStr, separator){
	local begin, end, item, resultList;
	resultList = NewList();
	begin = 0;
	do{	//Each field in inStr is separated by separator
		end = FindString(inStr, separator, begin);
		if(end.Count > 0)
			item = SubString(inStr, begin, end.Start - begin);
		else
			item = SubString(inStr, begin);

		//logn("item: ", item);
		resultList = InsertFirst(item, resultList);
		begin = end.Start + GetCount(separator);
	}while(end.Count > 0);
	//logn("Finished");
	return (Reverse(resultList));
}

public _Enable_SlotMapFailed(){
	SLOTMAPFAIL = 1;
}
public _Disable_SlotMapFailed(){
	SLOTMAPFAIL = 0;
}
